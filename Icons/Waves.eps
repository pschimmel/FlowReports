%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1512.m00.i125.n002.S.c12.230002453 Wave icons vector.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For:  
%%CreationDate: 12/5/2015
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.1.1 x446 R agm 4.7721 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                            
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">1510.m00.i125.n026.S.c12.297897560 Human resources personnel recruitment vector infographics</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2015-12-05T07:56:50+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-12-05T07:56:50+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-12-05T07:56:50+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqp3N&#xA;zb2sD3FzIsMEQ5SSuQqqB3JOSjEyNDcsZSERZ2DFdO/M7y7qWvR6PZLPK0xKx3QQCIsAT3POm3Xj&#xA;mfk7Mywx8cq26OBj7UxTycEb369GTPqWnRyGN7qFJAaFGkUMD4UJzBGORF0XOOSINWEQCCAQag7g&#xA;jIM3Yq7FXYq7FXYq7FWL+ZPP1l5e1S3tL+zuFtrjpfAAx9uVBXk3HkOWZ+m0Es0DKJFjo4Gp7Qjh&#xA;mIyBo9U6tNd0W8untbS/t57mPd4Y5EZxTr8INdu+Ys8E4izEge5yoZ8cjQkCfehNA8z22r3mp2Qh&#xA;a3utLnME0TkGq1IRwR2bict1GlOOMZXYkLatPqhklKNUYmk5zFcp2KuxV55+Yv5kahoGpxabpkUT&#xA;S+mJZ5ZgWA5E8VUAr2FTm57O7NjmiZTJp0vaPaUsMxCAF+aY+QvzEt/Mga0uY1ttVjXkY1J4SIOr&#xA;R13FO6k/2U6/s44NxvBv0HaIz+k7T+9mWax2bsVdirsVdirsVdiqG1HVNO021a6v7hLaBeskhoK+&#xA;A7k+wyzHilM1EWWvJljAXI0GtM1XT9Us1vNPnW4tnJCyLWlVNCKGhGOXFLHLhkKK4ssckeKJsIrK&#xA;2x2KuxV2KuxV5b5hOp+efMs+kWs31by7pDUvbn9lpFryPgTsQvYdc3+n4dLiEyLyT5B0Go49VlMA&#xA;axw5lJNX1nyTpBfT9HE91Co4yNauIPWPf1roh5JBX9lAqfPMrDhz5PVOgfPevdHkPjZcXNmwY/TC&#xA;yPLa/fLmfhQSaz1PyNczLBfaJJZQOeJu7W5kd0B/aKS8lanen3ZkzxaiIuM+I9xA/Q4sMunkalDh&#xA;HeCf0vQdB8leZ9A1m0m0XVBd+X5mVriGRqfum3JCbqTx3DLT7s0+fW4s0CMkayD73c6fQ5cMwccr&#xA;xn7nouaV3TsVdirDvzB8/R+WoEtrVVm1W4XlGjfZjTpzcDrU9Bmy7P0BzmztAOs7R7QGAUN5l41q&#xA;PmzzLqMxlu9Snck1Cq5RB/qonFR9AzpsekxQFRiHmcmryzNykVK28y+YrY/6Pql3F7LNIB91aZKW&#xA;mxS5xj8mMdTljylL5lR1HWNV1N0fUbya7aOoQzOz8QevGp2rTJY8MIfSAGOTNOf1ElkGl6tJqfnj&#xA;RZtMtRaNE9tAEQ7usVBI8hULUsleXtmHlxcGCYmb5n+xzMWXxNRAwFch/a9Q8laXdnXte1+4iMMW&#xA;ozcLJGHF2hjJHqFdqB9qVzQ63LHw4Ywb4Rv7+532ixS8SeQiuI7e7vZjmtdm7FXYq8w/OHyjc3Sp&#xA;r9mvqG3j9O9jHURqSVkA70qQ3t9Ob3sfWCP7uXXl+p0PbGjMv3kenP8AW8v0PVJtK1ez1GEkPbSq&#xA;5A7qD8S/7JajN9nxDJAxPUOhwZTjmJDoX08rBlDKaqRUEeBzhHvG8VdirsVQOq6xp2nW7Nd3sFm7&#xA;KfSa4YAFqbfDVS2/YZbiwymdgT7mrLmjAeoiPvYLeX+k6k1ZvPssMpPwi2K2sSjwoN/+CfNtDHOH&#xA;LAD79z+Pg6meSE+ecj3bD8fFBjy552Yl9A84rqke5Aa5Yt9G86/jln5nB/lMXD8P7Gr8tn/yeXj+&#xA;P9qWT/ll511K5+s6/qUUcSD47q4maUqtd+I6fRUDL49p4ICscTfcBTRLsvPM3kkK7ybTLUPPmheV&#xA;NCTQfLEv166iDA3jUaNGYks9aUdqnYD4fftlOPQZNRk8TL6R3fjk35Nfj0+Pw8R4j3/jmzjyTNr8&#xA;/l22uNdblfzcpN1VGEbGqBlQKAae2arWxxjKRj+kO10MshxA5PqKe5iOW7FXYqtkZljZlHJgCQvi&#xA;QOmEc0Hk8A1/XJrHRLby3ZuUV0W61iRdmluJwJCjHwjUqp9x7Z1+nwCeQ5Ze6PkB+t4/UZzDGMUf&#xA;fLzJ3+ximbB1z2H8p7LyxqXlia0mtYJ71ZHF6kqKzlW+w2+/Gmwp3zm+1p5YZRIEiPR6bsmGKeIx&#xA;IBl1eh6dYxWFhb2URZobaNYoixqeCCign2GabJMzkZHmXc44CEREcgiMgzdirsVfOfn+9lu/OOqy&#xA;SEkxztCoPZYf3YA/4HO07PgI4I13X83iu0JmWeRPfXyZV+X/AOV1tqunpq2ss4t5t7W1Q8Syg05u&#xA;3Wh7AfPMDtDtQ45cEOY5l2HZ/ZYyR458jyDKNT/Jzyncr/onrWDjp6bmRfpEvM/ccwMXbGaP1VL8&#xA;eTn5exsMvpuP480jl/I+GINK2suYl3KraF3oPALIST8lzKHbhO3B/sv2OIewwN+P/Y/tWaZeaF5U&#xA;Z00LRdR1PWpBw9e5geOleyjjyUewXfxw5YZNR/eThGHkUYp49P8A3cJyn5hPPIvlrzKdauPM/mKQ&#xA;x3twhjhtKiqoxB+ICoUAKOK9fHMXXanFwDFi+kdXL0Gmy8Zy5fqPRnuah27sVdirTKrqUcBlYEMp&#xA;FQQeoIxBUi3zP5g0xbPzHf6dbAssV1JDAo3NOZCDO50+XixRke54XUYuHLKI6Fmnmf8ANHzJZa5N&#xA;Yac8dvbadIbcqUVzK0J4OWLA7FgacabZrNL2XiljEpbmW/ut2eq7VyxyGMdhHb309T8t6x+mdCst&#xA;T4em1zGGdB0DglWA9uQNM0Gpw+HkMO56DTZvFxifemWUN62RWaNlVyjMCFcAEqSNiAajbCOaCNmK&#xA;ana+T9EcNd2Z1XV7oEpG8f1y8mPcgMDxX/gVHbNhilmy/SeCA/zYj8fEuvywwYvqHHM/50j+PgGO&#xA;av61ynN/y6D2+/xKyxzkfKBOa/jmbhqP+X3+z7S4Wa5f8h9vt+wMJuYfJck5jkj1HQrkH4o3VbqN&#xA;D8j6Mv682kTnAscOQfL9YdVIYCaPHjPz/UVOfSNEdA3+J4ZYq/ZeC7Dg0/k4MPxp75KObIP8mfnH&#xA;9bGWHGf8oPlL9ShaahpGk3CzafCdSvUIMU92gSFG7FYFZi7eBZv9jkp455BUjwx8ufz/AB72MMkM&#xA;ZuI4pefL5fj3PfvLV3qt5odpdatAttqEylpoVBULVjx+FiSDwoSD3zkNTCEchEDcQ9hppzljBmKk&#xA;UzyhvdirsVdir5n81RSxeZtVjlFHW7m2AoKeoaUG21OmdzpSDiiR/NDwurBGWQP84pXl7jonTb/U&#xA;NPu0vLCV4LmH4hJH1A9+xHiDtkMmOMxwyFgtmPJKB4omiHtv5e/mGnmJTY3qrDqsK8vh2SZB1ZR2&#xA;Ydx9I9uW7Q7O8H1R3gfsep7O7R8b0y2mPtZtmrdq7FXYq8I/Nfy9cab5mlvgpNnqR9aKQdBJQeoh&#xA;96/F8jnW9k6gTxCP8UfwHku1tOYZTL+GX4L1/wAnXltd+VtKmtiDGLaKMgfstGoRl/2LKRnN6yBj&#xA;lkD3l6TRzEsMSO4JxmM5LsVdirsVdirsVdiqXeYNdsdD0qbUbxgEjH7uOtGkenwovucv0+CWWYjF&#xA;o1GeOKBlJ5T+Xnli71fW5PNWrj0rGKV7oSP8Kyz8i/IV/YRtyfHbxzf9o6oY8fgw+qq9wef7O0py&#xA;ZPGn9IN+8sZ8yOuv+crw6REZhe3HG2VRu52Xl8mI5b/Tmfph4OAce3CN3A1J8bOeAXxHZ6pc+adI&#xA;8haZpOh3SSXNwsIM3o8fhFfif4iPtPXiM5+Olnq5yyDYX1eglqoaSEcZ3NdGbQTxXEEc8TcopVV4&#xA;26VVhUHf2zVyiQaLtYyBFjqvwJQ9tp1lbTz3EMQWe5blPMas7HsCzVNB2XoO2TlklIAE7BhHHGJJ&#xA;A3KQXnmDzVPyk0PQvXtR/d3F1MsBk90iNG4nsWIrmZDT4R/eTo+Qv7XDnqMx/u4WPM1fwYrq/n61&#xA;Mgs/OPlVox+w54yGnjHzVPvV8z8OgNcWDL+Px5OvzdoC+HPi/Hl/akt0/wCTM6mWNL63br6MXKv/&#xA;ACULr+OZUBrht6S4szoTuOIK/kvVdDk81Wlp5e8vgxlqy3t2zSzog3Mg39OOnt18chrcWQYSck/g&#xA;Nh7u8s9FlxnMI4sfxO59/cHsmc09M7FXYq7FXYqx7VPIHlTVdSk1G/svWupQokb1JEB4gKCQjL2G&#xA;ZmLtDNjjwxND4OFl7Pw5JcUhZ+KIsvJvlSyobfSrZWX7LtGrsPkz8jkJ6zNLnItkNFhjyiE3jjjj&#xA;UJGoRB0VQAPuGY5NuQBXJBy6HpEl9FqDWkYvoCWjuVXjICQVNWWhIoeh2ywZ5iJjfpPRrOCBkJV6&#xA;h1R2VNrsVdiqF1PS9P1Szezv4FuLaT7Ubjv2IPUEeIyzFlljlxRNFry4o5I8MhYSLy95ITy9ftJp&#xA;eoTLpspLT6dMFkUsVopR/hKU28a98ytRrvGj64ji73E0+h8GVwkeHuZPmC57sVdirsVdirsVUrn6&#xA;16dLYJ6h6NJXiPei/a+VRko1e7GV1sxPU/Jl9f3ovNQaHWJo/wDeeO5keG1iOxPG2jR6+/KQ175s&#xA;MWtjCPDG4DrW5PxJ/Q67LopTlxSqZ6XsB/mgfpQ+p+R/NOuqsOra3HbaetB+j7CErFQdBVmBNP8A&#xA;Kr8sni12LFvCFy75Fhl0ObLtOdR7ohVsfI95oEbr5bSyjnf4Wv70SSz8T4cQFHyGxyOTXRzf3vFX&#xA;cKplj0MsP91w33m7S61/KRrvVG1PzJqbajM7cpIkXgrU6BmJrxptxUDL59rcMODFHhDTDsjinx5Z&#xA;cReiKqqoVQFVRRVGwAHYZpSXdAN4q7FXYqpXVpa3cLQXUKTwP9qKVQ6n5hqjJRmYmwaLGUBIURYY&#xA;teflT5KuZTILNoCftLDI6qf9iSQPozPh2rniKu/eHXz7JwSN1XuKeaJ5c0XQ7cwaZarbq28jCrOx&#xA;/wAp2JY/fmLn1M8puZty8Gmx4hUBSZZQ3uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVim&#xA;tfmNo1henTrOKbVtSBKm2s158WHUM3iO9K0zYYezpzjxSIhHvLr83aUIS4Ygzl3BBf8AKxNZhl43&#xA;vli5hXqFSVJJSOv91xRq+2W/ydAj05Afht82r+UZg+rGR8d/kyLQvNWi62HWymIuYv7+zlUxzx9v&#xA;iQ/rG2YefSzxfUNu/o5mDVwy/Sd+7qm2YzkuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxVRivrKWQxRXEckorVFdWbbrsDkjCQFkMBOJNAhWyLN2KuxVb60XqmHmvrBQ5jqOQUkgNTr&#xA;Sow0avoixddV2BLsVdirCvzS8w3mnaTb6bpxI1DVnMEbL9oIKB+P+UxZVHzzadl6eM5mUvphu6vt&#xA;XUShARj9U9nnGq6o+ij/AAx5dDLcqwh1LUIa+vcz9GjQj4ljVvhAHX9e6xYvF/e5eXOIPIDv97pM&#xA;uXwv3WLnykRzJ7vcpwflzrFw5jl1HToNQJ+Kwmul+s8j2KKH3PuclLtGA3EZmPeI7MY9mzOxlAS7&#xA;jLdASv5g8u6rFBfiW1u7WhgkNGeMb0aJq0ZOtVrxO/ffLQMeaBMaIP438/taicmGYErBH428vLk9&#xA;48q68ut6NDe0Czf3dwi14iRQCStf2WBDL7EZyWqweFMx6dHrdJn8WAl16pvmO5LsVQ+o6haadYz3&#xA;124jtrdC8jnwHYe56DJ48ZnIRjzLDJkEImUuQeEebPzH13XLmRIJnstNqRFbRMVLL4ysu7E+HTOt&#xA;0nZuPENxxS7/ANTyWr7SyZTseGPd+tisVxcQyiaKV45QaiRGKtX5jfM8xBFF14kQbB3eoflv+Zd9&#xA;LfRaNrcpnWchLS7f7Yc9Ec/tcuxO9fw0PaXZsREzxiq5h33ZvacjIQyG75F6znPPROxV2KuxVoug&#xA;YKWAZq8QTuadaY0i28Use1D8wvJun3LW11qcYmQkOsayS0I6gmJXAPtmbj7PzzFiO3wH3uFk7RwQ&#xA;NGW/xP3JppOt6Tq9ubjTbqO6iBoxQ7qfBlNGX6RmPlwTxmpCnIw54ZBcTaNyptdirsVdiryjUdXn&#xA;83XmoXN1evp/krSTxmMZo1w3QLUfaL9h2FNqnOgx4Rp4xAHFnn9jz2TMdTKRJ4cEPtUNM1Xzbewt&#xA;F5G0SPS9KBKrdlU9STjtV5ZjxY/KpHjk8uLDE3qJ8U+79gYYsuaQrTw4Id/7S64u/wA6tKb15llu&#xA;Yl3ZUSC4Uj3EYLj8MYw0OTYUPmPvWU9dj3Nn5H7kHq/5iy+YNLbSL3Qll1hvgtZYuXKOQ0+KNCrS&#xA;K23QNluHs4YZ8cZ+jr+OTXm7ROaHBKHr6fjm9Y8tRajFoGnx6kxa+WBBcFjVuVOjHxHQ5z2pMTkk&#xA;Y/Tb0OmEhjiJfVTzj82dXuNK82aTfWEvp30FvVqHqnqGisO6t8W2brsnCMmGUZD0kuk7WzHHmjKJ&#xA;9QD1HTb1L/TrW+jHFLqGOdFPUCRQwH45ocsOCRj3Gnf4p8cRLvFojIM3Yq87/MZRb+bfKmozmlnH&#xA;cBJHP2UYSI1T+v6M3PZxvDliPqr9BdL2kOHNikfpv9Iee6C09r5rvlIpqireR2hbqLvg4Slf2uVQ&#xA;v+VTNznqWEfzfTf9V02nJjmP8/1V/WRt5o/k8+UIbmyneTXRH6t7zZgYnX7YdacQC/wL3JINeuVQ&#xA;zZvGIkP3fTz/ABzLbPDg8EGJ/edfL8cgi9UvY9b/AC5s5b5jJq+neo0M7bs9vHLFCwZu/wDfr/wO&#xA;V4oHFqSI/RL76J/R9rZlmMulBl9cfusD9P2Mn/JaSZ9LvA390vpBT4uDICf+ACD5DMDtoDjHx/R+&#xA;1z+xSTA/D9P7Ho+aV3bsVYD+dEl2vlaFIQ3ovdJ9ZKgkcQrFeXgOVPppm37FEfGN862dP20ZeCK5&#xA;Xu8RzqXlXYquikkjlSSIlZEYMjDqGBqCMBAIopBINh7DrPmLXk/NHTdMt7lktCIRPaKapR1LScgO&#xA;pp3zm8Onx/lJTI333+56XNqcn5uMAdttvvek5pHeOxVIPPHmT/D/AJduL5KfWmpDaA7gyvWhp34g&#xA;FvozM0Om8bKI9OvucPXanwcRl16e94Fbrquu61DE0zT6heSqiyysSeTGlS29AM66RhigTVRiHkIi&#xA;eWYF3KRei+a9U8x+U/K40O51AXl3eNxtbxSwlS3A/eqa7/aoqmvQnpTNLpMWLUZfEEaEeY6X0d1q&#xA;8uXT4fDMuIy5HrXV5VnQPPPVNK/K7XdM0wajbao1vfyQ1ntow0fFSOVBIrA8kNG6UJFOmaDL2pjn&#xA;PhMbjfP9nm9Bi7KyQhxCVSrl+3yZd+W3mO817y0tzenldW8rW0stAOZRVYNQd+Livvmu7S00cWWo&#xA;8iLdl2ZqZZsVy5g0yrNe7B2KoXVlmbSr1YP75oJRF/rFDx/HLMRHGL5WGvMDwGudF5NpGlJfaH5S&#xA;0Jjws9QmutQ1Mg0DLAxABI3+wOOdDmy8GTLk/iiIxj8XncOLjx4sf8MjKUvggTB5q8/X9xHphW20&#xA;W0pHbwMxit4oxtGpVQ3JyBU7H6BTLeLDpIgz3mefeWrhzayRENoDl0AS67tfPHke8QmWW2Rj+7kj&#xA;YvbSU3pQ/Cfkwrl8JYNVHkD94aJw1GllzI+4sx0T87LUxhNasnSYAAz2tGVvmjlSv3nNZn7EN+g7&#xA;ebs8HbYr94N/JX1X87dJjhI0uymnnI+Fp+McYPY/CXZvlt88ji7EmT6yAPJnl7cgB6ASfN5Zd3er&#xA;a/rBmmZrrULyQKoHUsxoqqOwHQDN9CEMMKG0YvPznPNOzvKT6S0ix+oaTZWPLl9Ugig5ePpoFr+G&#xA;cTmnxzMu8kvcYYcEBHuACLytsdiqW+YdAsNe0qXTr0H0pKMjr9pHH2XX3GX6fUSxTEotGo08csDG&#xA;TynX/wArfN0l2JIVjvZRxX63G6xmQKKB5VkZSHoNypNevWpPQaftTCBR9Pl+qujz+o7KzGVj1ef6&#xA;76qL+QfP15HTXbl7fT4DyeSef6x02qkcbSFm3oO/bJDX6eP92Lke4V9pYHs/USH7w1Ed5v7AgfNF&#xA;LC0+prE9sksKWthYyj9+LVZRO886/syTTKCB1pX2rbpfWeK73snpdVQ8gGrVeiPDVbUB1q7s+ZL1&#xA;n8vtCl0XyraWs68bmSs9wvcPJvxPuq0Bznu0M4y5iRy5PRdn4DiwgHnzLI8wnNdiqje2qXdnPayE&#xA;hLiN4nI6gOpU0+/JQlwyB7mM4cUSO94P5k/LLzLo8q+jA+pWz14zWqM5G52dBVlNN/D3zrdN2niy&#xA;Dc8J83kdT2XlxnYcQ8mU+fbfSIfy50sSWQsL/wDdC2t3UJMrBf33Ifap3Ne9K75gaCUzqZUeKO9n&#xA;p5Ow18YDSxscMtqHXzYp+XPlS51rWkuXhZ9OsGEtwdgHZfiSJSaCrHrv0zYdo6sYoVfql+Ldd2bp&#xA;DlndemP4p6R5S8tu3mS98yavcQSavcFvRs4ZBJ9XQjhRmB3YIOG21Pw0mr1P7oYoA8A6nr+ObvNJ&#xA;pv3pyzI4z0HT8cmcZqnaoe/v7SwtJLu7f07eIVd6M1B8lBOTx4zM0ObDJkEBcuTwr8xPPA8y30Ud&#xA;qrR6baV9EPszu3WRh26UUf1zrOztD4EST9ReS7R13jyAH0hj9i2raXcwapBFJE1s6yRzMjcAwPck&#xA;UoemZk+DIDAnm4ePjxkTA5IrzX5ovfMmqC/ukWIrGkSRISVUKKmlfFiTlek0scMOEd7Zq9VLPPiP&#xA;ck2ZLivffJX5i6V5giitZm+rauFAkgfZZGA3aI9/Hj1H45yGt7OnhJI3h+Ob2Gi7RhmAB2n+OTKb&#xA;SysrOIxWlvHbRFixjiRUXkepooAqcwJzlI3I27CEIxFRFK2RZOxV2KsUv9Bg0m50y+tkJsLOW6S5&#xA;jUVMcF9VnYU34xy0PspPhmwx5zkEon6iI174/rH2uvyacYzGQ+mJlful+o/YkXkK8tvKV5f+WdaY&#xA;Wkr3BnsbuX4Yp0ZQoo5+Hogp7kjrmXr4HURjlx77UR3OHoJjTyliybb2D3vQLq0sNSs2guY47q0m&#xA;AqjAOjDqCP4HNPCcoSsbEO5nCM40dwXnGu/knaSu0ui3n1au4tbgF0HykHxAfMH55usHbZG2QX5h&#xA;0mfsQHfGa8j+tIE/JbzYZOLT2apXeT1JCKeIHp1zMPbWGuUvx8XDHYma+cfx8Ge+TPy10zy7ILyZ&#xA;/rup0IWZl4pGD19Nd9/8o/hmo1vaU83pHpi7fRdmQw+o+qTMc1rs3YqlXmDW59Mth9UsJ9SvZaiG&#xA;2gUkbftSPQhF+eZGnwCZ9UhGPeXH1Gc4x6YmUu4fpYBqd7+dk4M0dp9UhPSG3Fux/wCGaSTtm3xQ&#xA;0I2Js+d/sDp8s9edwKHlX7SkQ/ND8wNKuDDqSq8qjeG7t/Sb50QRHMv+S9NkFx+w/wBrifypqcZq&#xA;X2iv1Ii6/OnzHPB6UFva2kjChn4u5HuqkkfeDkI9i4gbJJZy7bykUAAknl6/ml1tLm3tn1vzHcPW&#xA;F7j+5jk/34RXk/EdCxUL4ZlajGBjongxju5+7y+23F0+QnJYHHkPfy9/n9lPdtEs7+109E1C6N3f&#xA;P+8uZui826rGuwVF6Db36nOTzzjKXpFR6PWYISjH1G5dUdlTc7FVk0oiieQqzhAWKoCzGngBuThA&#xA;s0gmhbFdZ/MLSLZTFbXUEN0Qfhv0uoeB94xDyP3jNhh7PnLcgkf0eE/bbr83aMI7AgH+lxD7Keba&#xA;xqXly91A32tarc+YLr7MVpaRG2gG+yc5PiC/6q1zd4cWWMeGERjHeTZ+x0ebLilLiySOQ9wFD7f1&#xA;I1dJ8++aIo7K0sf0JoEe0dt8UEIU92r+8mJ7mnXKjl0+A8Ujx5O/mf1BtGLUZxwxHBj7uQ/WWVaP&#xA;+TmhWaRyXN3cz3qEMJom9EKw6FAtWFP9bNfm7YyS2AAj83YYexscdySZfJnsaFI1QsXKgAu1ORoO&#xA;poAKnNSTZduBQXYErFhhVy6xqHPVgADv74eIo4QxnzX+X9j5jlEtzfXcJX7MKOGhBpSojYGh+RzO&#xA;0naEsIoRifv+bgavs+Oc2ZSH3fJIYfyQ0EH99qF048E9NP1q+Zcu3MnSMftcSPYePrKX2JjD+T/k&#xA;yOnOO4mp15ykV/4ALlJ7YznuHwbo9j4B3n4rJfyf8r8lktJbuznjIeKWKUEqwNQfiUnb2OEdsZeU&#xA;hEj3IPY+LnEyifezS0initoop5fXmRQrzcePMgU5FQTQnNZMgkkCg7SAIABNlVyLJ2KuxV2KqVza&#xA;Wt0np3MKTx9eEihx9zA5KMzHcGmMoCWxFr4oooY1iiRY4kHFEQBVAHYAbDASSbKQABQXYEuxV2Ku&#xA;xV2KuxV2Koe/03T9QgMF9bR3MJ/YlUOPmK9MnjySgbiaLDJijMVIWGMzflT5Ill9QWTR1NSiTShT&#xA;9BY0+jM6PaucDn9gcCXZOnJ5faU90by5oeixmPTLOO2DbOygl2A/mdiWP0nMXNqcmU+s25eHTY8Q&#xA;9ApMcob3Yq7FXYqsmggmThNGsqfyuAw+44RIjkgxB5rIbGygblBbxxMepRFU/gMMpyPMsYwiOQCt&#xA;kWbsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdiqjc3lnaoHup44EOwaV1QfexGSjCUuQtjKcY8zSy11PTbtitrdw3DDqIpFcj/gScMsUo&#xA;8wQiGWMuRBROQZuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KsR1D80PLFjrp0mVpGZG9Oa6RQ0Ub1oVb&#xA;flt3oM2OPsvLPHxivd1dbk7UxQycBv39E28zeadL8u6cL2+ZmEh4wRR0LyNSvw1IFPE5j6bSzzS4&#xA;YuTqtVDDHik15Y816T5jsGu7BmX0jxnhlAV0PUVoSKHsQcdVpJ4ZcMl0urhmjxRSi0/NPyvda6NJ&#xA;jaT4n9KK8IHoO/SgNeVCdgaZkz7Lyxx8Z+XVxodq4pZOAfPozDNa7J2KuxV2KvMte/NfWLa9ujpm&#xA;kibSrOYwPeyLIUZ0NDR0oi1PSv8AZm9wdkwlEccqmRdOi1Ha04yPBG4A1e7KdF896LqHls67cSCy&#xA;giYxXKSHlwkFDxFBV6ggigzX5tBkhl8Meo9HPwa/HPF4h9I6qWmfmZ5P1G7W0hvDHM7cYvWRo1cn&#xA;YUYim/vTJZezM0BZG3kjF2ngmaB382U5gOe7FXYq7FWH3us/mLZ6vcRx6HBqOms5+qPDMsT8K7cy&#xA;7NvTr8ObKGHTSgLmYy67W62ebUxmagJR6b0kvnD8y9V0m2axEMEGtTCrRxP64tUI/bchVaQ9hxoO&#xA;u9cytH2ZDIeKyYD4cX7HF1nac8Y4aAmfjw/teTTT6lql6GleW9vJmoKlpJGJ7DqfozoYxjjjtUYh&#xA;52UpZJb3KRTOPyj5qhdZI7R450NVRZEWcH2jDepy9qVyg6zCdidvs/U3jR5huBv9v63p/wCWPnPU&#xA;dQefQta5/pO0XlHJKCsjIpAZZAaHmtR7n6M0PaeijCsmP6S77svWynePJ9Qeg5p3cuxVQv7pbSxu&#xA;LthyW3ieUqOpCKWp+GTxw4pAd5YZJ8MSe4PLPLWh+YfO6z63qOtzWkXqMlvb27H4SN9lDAIo6Duf&#xA;17/U58elrHGAPmXQabBk1V5JTI7gE70zzPqPljUL/RfM10byG1tje2OoH+8lirx4MCTVi2wqetd6&#xA;UzFy6WOeMcmIUSaI7i5WLVSwSljyniAFg94Uh+bVxb3EUmq6Bc2Ol3DAQ3j8qkHflRkUNtv8J+/D&#xA;/JIIIhMSmOn4LH+VyCDOBjA9fwHoUciSRrJGwZHAZGG4IIqCM05FbO5BvcLsCXYq7FXYqxnz/wCY&#xA;b/RtHrYoq3N0TDDcysEjjYjryb4Q1KleRA2+g53Z+njkn6uQ6OB2hqJYoenmevc8d8vadr+nazaa&#xA;qumPfLbSiQqKOr/JxyFd6g+OdLqMmOcDDi4bDzWnx5ITE+HioovzpfeYPMmq/WrqBLKCFfTtraee&#xA;KPgtd6mRkqzHrt+rKtFDHhhQPETzIB/Q262eTPOyOEDkCR+lHW/m+ax8l/4bimtLSduaSXiyPKTH&#xA;IxLbQxyDkQ1K8unTKpaMTz+KRIjuqvvIbY6wwweEDEHvu/uBUfy6sb6116HU7O2fUYYQ6SSInCJe&#xA;S0r60xiUEV+ftk+0ZxljMJHhJ+fyFsOzYSjkE4jiA+XzNPcYJHkiV3QIWFeIYNt8xtnKSFF6yJsK&#xA;mBLsVQ+oajY6daSXl7MtvbRCryuaAf1J7AZPHjlM8MRZYZMkYR4pGg8y1rzxNrGm3OieU9Fmmtrr&#xA;1I5Ln0jx/esTIVRQQORYnkxFPDN7g0IxyGTNMAjpbos+uOWJx4YEg9a70x0D8rIv8P2VlrMjVFy9&#xA;5eWsbbMzII0j5ginEDcjxNDlGo7VPiGUO6gW7T9lDwxGffZDC/zQ8s6DoOqW0WkuVM6M89mWL+lQ&#xA;gIQWJaj77E9s2nZepyZYEz6de91famlx4pgQ69O5mP8AjDzZZeUdHFhpk+o6jNaiWe6aKWWNI6lY&#xA;yxT7Tsq16+565rfyeGWafFIRiJcrAdn+czRww4YmUjHnRKF8ofm/PeajFYa5DFEJ2CRXcIZQrsaA&#xA;SKxbYnao6d/HJ6zscRiZYydujXo+2DKQjkA36h6jmhd+7FUi8yWvnC4haLQru0tQ4p6kyP6i7fss&#xA;Oa/8JmXppYYm8gkfd+P0uJqYZpCsZiPf+P0PNj+S/mmaWSW6v7VpHJdnDyyOzGpJPJE3J983f8tY&#xA;gKEZfZ+t0f8AIuYmzKP2/qSnyto+sNDJZaav1fWry6eylneqtbQwpzm3HxIXLUJG/wANB1zI1WaF&#xA;8Ut4AX7yeTj6XDOuGO05GvcBzXebvyy1fy/Y/pD10vbRSBO6AqyFjQEqa1WppWuOk7Thmlw1wlOs&#xA;7LnhjxXxBE+Q9cZr0X14TNdaJDLMrk/vJbUxtGYC3VisjoY6+46UyvX4PTwx2EyB7j3/ACu2egz+&#xA;riluYAn3iuXzqnpvk2485XS3V15iijto5irWNqoAeNTXkGpv4fa3zRayOCNDEbrmXe6KWeVnKKvk&#xA;GSZhOctkjjljaORQ8bgq6ncEEUIOEGjYQRYosBP5f+XvL051a41e4s7G2cSRRrJ6dAGL+kzCpkFT&#xA;sAOXuc2/8oZMw4BASkfxfl9zqP5PxYTxmZjEfivP72JJrmjebvOt4+qz/UbCe1a2095CAFKOrx8+&#xA;R47nk1K9ds2BwT0+AcA4pA2f0uuGeGoznjPDEih+hOfzB1aytfKb6JNq663qFxMht2pHzhjjIPxm&#xA;Pavw0q255Zjdn4pSzeII8EQN+e/zcntDNGOHwzPjkTty2+Sld6t+YOiaKL6O5hh03SXjsPqEkQLS&#xA;CECEScylWDstfhfpkoYtNlnwkEyn6rvv3r4e5jPNqcWPiBAjD01Xdtfx9703RdR/SWkWeocPT+tw&#xA;xzemd+PNQaV75o82PgmY9xp3uHJxwEu8WjMqbXYq7FUPqOnWWpWUtlfRLPazDjJG3Q9+o3BHYjJ4&#xA;8koSEomiGGTHGcTGQsF5drH5IT+sz6Pfp6RPww3QYFR4c0DV/wCBGb7D22K9cfk6DN2Gb9Evmktx&#xA;+U+pWLA6lqllAlK0j9aaSniIxGpOZUe1oz+mMj8h+lxZdkyh9Uoj5n7KVbHy3a25A0jQrzX7z9i8&#xA;vomtrIEd1iJHP5O+Ryakn65xxjuibl8/1Blj0wH0Qlkl3yFR+X6ymz/lx5617i2ualFawL/d2ifG&#xA;sY8Fij4RD6GzHHaWnxf3cST3/tO7kHs3UZf7yQA7v2DZnXkvy7eeXtIbTLi7F4kczNbSBStImCni&#xA;VJanx8jsc1Ot1Ec0+MCtt3baLTSww4Cb329yfZiOY7FXnX5im5utTiikVRZWaepF66lofUFDJM6D&#xA;+94CSNETervTxGbrs6owJH1S7ufkPK9yT3B0vaNymAfpj38vM+dbADvLFtQi81LaLK8nmBIAPhZY&#xA;vSiUDofQjcCMD55n4zhuv3V++z8yN3X5Bmq/3te6h8gdkiTU5pn9P/Et5Ap2Y3InA+6F5zmWcQH+&#xA;TifdX6QHEGUn/KSHvv8AQSyHyz5N8n3N2tzq/mS1uhy5G2V/SMhrX43m4Pv3AWvvmHqdZmiKhjI8&#xA;+f3ObpdFgkbnkifLl9706+84+UtLs+cmo2wjjWkcMDrI5AFAqohJ/hmiho82SW0T8Xe5NZhxx3kP&#xA;g+fb2Z9V1yea1h4PfXLvBbp1BlclVFPnTOwgPDxgE/SPueOmfEyEgfUfvfTkQdY0VzycABm8TTc5&#xA;wp5vdjkuwJSnU9T1Izmx0a3Se8WhmuJyVt4K7jmV+J2I6IvzJG1cjFijXFM1Hy5n8d7jZcsr4YC5&#xA;efIfjuYxrtn+a1pC13Zatb3QQcpLRIIoz/sfUVuX/BDM/BPSSPDKJHnZcHPDWRHFGQPlQY95f/NO&#xA;3g1R28w6YkN2TwmvbdCkgZKr+9iJ3YVIr1HSmZmo7KJh+7lY7j+guFp+1QJ/vY0e8fpCN8/fmboF&#xA;7oM+maQ7XU14AjylHjSNKgt9sKSx6CgyrQdmZI5BOewDb2h2pjljMIbkpT+S2kS3Gs3eoSR8rSCH&#xA;0qsKgyu6uo3/AJQlfuzI7azAQEepP2OP2LhJmZdAPtez5zL06lc3draxerdTJBECB6krBFqegqxA&#xA;yUYGRoC2MpiIsmnm/wCYPnW6sn56D5kgPLaSyjjjmZdqErKqOo9wxB983fZ+iEv7zGffy+y3Sdoa&#xA;0x/u8g93P7aeV6lrGq6pN62oXct1IPsmViwHso6D6M3+LDDGKiAHn8uaeQ3IkoTLGpVhtLuZGeGG&#xA;SREBZ2RSwUAVJJA2AyJmBzLMQJ5BPdIvv0ndWdj5l1e4i0aIhlRzLICBsAvUL4cu2YuaHADLFAcf&#xA;wcrDPxCI5Zng+L6DsGsmsoDYsj2YRVt2iIZOCii8SOwpnHZBLiPF9T2WMx4Rw/Sr5Bm7FXYq7FXY&#xA;q7FXYq7FXYq7FXYqpzW8E4UTRrIEZXUMAaMpDKRXuCK5KMiOTGUQeapkWSUaz5R8uayD+kLCKWQ/&#xA;7vUcJf8AkYnFvxzJw6vLi+mR/Q42bR4sv1RH6WE6n+SGnyEtpmoyQdxHOolHy5L6ZH3HNpi7ckPr&#xA;jfu2dXl7DifolXv3SgfkfrnOh1C2EdftASE0+XH+OZH8uY/5pcb+Q8n84Mz8ofllo/l+ZbySQ32o&#xA;qPgmdQqR17om9D7kn6M1ms7TnmHCPTF2ej7MhhPEfVJmOa12bsVWOHWNvRVfU3KhjxUsfEgHCOe6&#xA;Dy2YVrv5ZvrrtPqWtXMlya+mqqot4z/kQ12H+yqfHNpg7T8LaEBX2/N1efszxd5zN/Z8nmXmT8uv&#xA;MuhuzvAbyzH2bq3Bdaf5a/aT6dvfN5pu0cWXrR7i6LU9nZcXS494S7QbG0vLgRPY3l9PUUt7QqOW&#xA;/wC0xRyo+jL9RkMRdxiPNo0+MSNVKR7g948oaNcadp6iaCKyqKRafASyQr1POQ7yyt+0x8KD35LW&#xA;ZhOWxMvM9f1Dyeu0eEwjuBHyHT9Z80+zEctbJHHIjRyKHRhRkYAgg9iDhBrkgi9igIPLnl63l9WD&#xA;S7SKUbiRIIlavzC1y2WpyEUZSPxLVHTYgbEYj4BF3VlZ3cJgu4I7iE9Y5VV1+5gRlcJyibBotk4R&#xA;kKIsMYufyu8oyzevbwS2Mx/btZXT7gSwH0DM+PamYCiRIeYcCXZeEmwDE+RTbT/K9jZgBri8vAAA&#xA;Fu7qaZNv+Ky3pn/gcx8mqlLpEe6IH283Ix6WMespe+RP2ckxurOzu4jDdQR3EJ6xyorr9zAjKIzl&#xA;E2DRb5QjIURYWWGmadp0JhsLaK1iZizJCgQFj3IAGSyZZTNyJLHHijAVEABE5W2OxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KsN1v81/Kml3DW6vJfTIeL/VlVkUjsXYqp/2Nc2eDsnNkF/SPN1mftbDjNfUfJR0v84PKd5M&#xA;sM/r2JY0Ek6gx/SyM1PpGSy9j5oixUvcxxdsYZGjcfezaKWOWNZYnEkbgMjqQVYHcEEdRmrIINF2&#xA;gIIsLsCXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqw&#xA;j83NcudN8siC2YpLqEnoM4NCIuJZ6fOgX5HNp2RgE8tnlHd1Xa+cwxUOctnhQBJAAqTsAM6x5Nt0&#xA;dGKupVh1BFDiDakU9N/JzzVcret5euZC9vKrSWQO/B0+J0H+Sy1b5j3zRds6UcPiDn1d72NqzxeE&#xA;eXR69nOPSOxV2KuxV2KuxV2KuxV2KuxV2Koe91GwsIfWvbmK1i/nmdUFfmxGThjlM1EElhPJGAuR&#xA;ACH0/wAw6FqLmOx1C3uZB1jjkVm+fEGuTyafJDeUSPgwx6jHPaMgfimGUtzsVdirsVdirsVdiqye&#xA;eG3heed1ihiUvJI5oqqNySThjEk0OaJSAFnkwO6/OnyvFcGOKC6uIlNPXREVT7qHZW+8DNvHsXKR&#xA;ZMQ6ifbWIGgJFlnl/wAyaRr1n9b02b1EU8ZI2HF0bwZT0/Vmu1GmnhlUg7HT6mGaNxKZ5Q3uxV2K&#xA;uxV2KsA/NmKy1LytcSwTo0+kXMfrKCKguAhj+dJA30ZuOyTKGYAjaY/H3On7XEZ4SQd4H8fe88/K&#xA;6J5PPOm8RsnqsxIqABC+bjtQ1p5fD7w6bssXqI/H7i9D/OTS7Oby0uoMii7tpkWOWgDFHJBSvcb1&#xA;zT9jZZDLw9CHc9s4onFxdQXnP5ZK7eedLCdQ0hPyELk/hm57TP8Ag8vx1DpOzB/hEfj9xZ3+TGt3&#xA;99DqtreTvO0Ukc6PIxc1m5c9z7qD9OartrBGJiYiunydv2LnlMSEjfX5vSs0bvHYq7FXYqgNb13S&#xA;9FsWvNRnWGJa8V/bdv5UXqxy7BgnllwxFtOfPDFHikaeLeaPzT8watM8djI2m2FaJHE1JWHi8g3+&#xA;hdvnnT6XsrHjFy9Uvs+Ty+q7VyZDUfTH7fmgNNk81WWm/wCJI765t7QXAt1lVmkLyFSTVGYKyDhQ&#xA;lu9Bv2tyjDKXhcIJq2rEc0Y+KJEC6eqeXvPeoazBY/U9Pju3lPG9ZbhYWiCMokf0pBUgBw1EZutK&#xA;5oNRoI4zLilXdtd92/63oNPr5ZRHhjffvVd+36rZnmsdm7FXl/5peVhearFql1qsdvZiFgLZ+TS0&#xA;hUu/ooNjUeJG+b7svVcMDARs3z6b97oe1dLxTEzKo1y67dzzU63LC4/R8MdnGhrGwRHmHuZnBfl/&#xA;q0HgBm88AH6jf3fJ0XjkfSBH7/myXyx+anmHT76JdTuGvtOZgs6yAGRVOxZH+1UdaHr+OYOq7Kxz&#xA;ieAcMnP0vauSEhxniinfnTzJ5i0DXjMdaeeK5Pr2VjbhFVICaJ6hdHXpsPhNeu2Yui02PNjrgqti&#xA;T3+Tla3U5cOS+O73AHd5sh8l/mjY69cx6ddwmz1Bx+7PLlHKVFSAaAq3en45ha3suWIcUTcfuczR&#xA;dqRzHhkKl97Oc1TtnYq7FXYqx7zxpN1q2lW2nRGQW9xeQJfmL7Qt+XxHoeh4/LrmbocoxzMjzETX&#xA;vcLXYjkgIjkZC/cxbzh5U0Ty1ZW+p2UP+41Zkh1LTZWeaKWKQ0Lr6hYrIvYqcz9Hq8meRhI+qvTL&#xA;kQf1OBrNJjwRE4j036o8wR8erGPL5l8qfmd+jIJWa1kuRZsD+1HPT0+VO6llNcztRWo0vGRvV/Lm&#xA;4GnvT6vgB2uvnye45yr1bsVdirsVdirxvzj5V0fUtZu7zTPMenQrPIZLm1u7j0+MwqGK05139ts6&#xA;XR6qcICM8czXIgdHmdZpITmZQyQFncE9U6/KnSvL9pf3y2c51G/hjUT36Lxt0Vyf3cXL4mJ41LU+&#xA;WYvauXJKMeIcMT06+8uV2TixxlLhPFIdenuCD/OnzHC62+gQPykRhcXlP2fhIjQ+5DFiPllvYumO&#xA;+Q+4fpau29SNsY95/QxfycP0RpGq+ZpvhKRNY6bX9u5nG5X/AIxpucz9Z+8nHEO/il7h+twNH+7h&#xA;LKe7hj7z+p6B+T/l6503Q57+5Qxy6kyPGh6+jGDwJH+UWJ+VM0/bGoE8giP4fvdx2PpzDGZH+L7m&#xA;fZqHcOxVJfM3m7RvLlqJtQlPqyA+hbJ8UkhHgOw9ztmVptJPMaiPi4uq1kMIuR+Dy7Wfzn8wXXJN&#xA;Mhi0+I9HI9aX72HD/hc32HsXHH6yZfYHQZu2skvoAj9pYPqOqajqVwbi/uZLqY/tysWIHgK9B7DN&#xA;rjxRgKiKDqsmWUzcjZQ2Ta2d+S/M+gS6JJ5V8ygrp8snqW10CQI2JrRiu4HLcH332zU63S5Bk8bF&#xA;9XUO30WqxnH4OX6ehZJ5c8i3+jX2kXOn3S6jbNeSSzXcJURpB6RT+Zq86708BmFqddHLGQkOE8PI&#xA;99/oc7TaCWKUDE8Q4uY7q/S9NzRO9dirzrz55T8wapq1/fxAPYx6a0duoarGRW5lFTrVqdc3Wg1e&#xA;PHCMT9XHu6XX6TJknKQ+ng2eeeSPKuq61q8Elvbh7O1mje6lk2j4hwWXcfESK/Dm512rhigQT6iD&#xA;TpdDpJ5ZggekEWmP5u2unW3m4rZKiF7eN7pEAAEpLdh0JQKcp7InKWH1d+3ub+14Rjm9Pdv7061D&#xA;8vr3zTDpusabqFubV7K3imEpYGNoYwjgcVYGhBqCRvmLj7QjgMoSib4j9rlZOz5agRnGQrhH2MX1&#xA;/UNItvOsVxoqxxWdhJbhHiAVHeDjzcU23Yde/XM7T45ywET+qQP2uBqMkI5wcf0xI+x9C5xz2TsV&#xA;diqT+Y9AbW47e0luZILBXL3ccLcHkovwLyp9kNucydNqPCJIFy6X0cbU6fxQATUetdWCeRddi0Tz&#xA;Hrmi3Oo89EshJJBPcOKI0cipxBPc89wOpGwzba7AcuKGQR9cu73Op0GcYss8Zl6I9/vWa/5mh846&#xA;lFZWpMPljTHF1ql9ICquqdBTqOW4RepJ6bYdPpjpo8R3yy2iPx9rHUaoamQiNsUd5H8fYx3y60/m&#xA;j8zIr9UKobr663+RFAQyBv8AgVX55m6gDBpTHyr4lwtMTn1Ql538A94zknrnYq7FXYq7FWC63+U/&#xA;lG5uZdQlnmsI2JkuAkiLECdyayK3Hf3pm2wdrZogRAEvx5Opz9k4ZEyJMfx5sd1Hz35d8r6a+jeT&#xA;oxLMTWXUH+JeVKFqn+8bbw4jtmZj0GXPLjz8u78cvvcLJr8WCPBg3Pf+Of3Md8r+RNc8z3Rv7xnt&#xA;9PdjJc6hN9qSu7cOX2if5ug/DM3Va/HgHDHeXQBwtLoMmc8Uto9SWW+Ztc/L3R0tILaMarcaYhjs&#xA;bFX5WsT1q0khHws5P2vtH5dc12mwanJZPoEuZ6nyDsdVn02OgPWY8h0HmWaeS9dv9d0OPUb21Fo8&#xA;rsI0XlRkFKOOXia5rNbgjiycMTbtNFnllx8UhSe5iOW7FWIz/lpouoahLqOtzT6ldyncFjFEqj7K&#xA;IiHkqj/WzYx7TnCIjjAiPmfx8HWy7MhORlkJkT8B+Pi1f+X/AChpCrHa+WxqN0RVII4PWHh8cktU&#xA;UfM18Bhx6jNk55OEe+vsC5NPhx7DHxH3X9pY5fW2svUr+XtkkP7IHol6dOsXA/hmbCUB/l5X8f0u&#xA;FOMz/kI18P0MZv7SwqRe+TL6wc9ZLaWZBX2WaKVfuzOxzl/DmjL3gfoIcDJCP8WGUfcT+kFB2nkv&#xA;VNVmEel6RfRRt0nu2VIx7ljGgP0b5ZPWwxj1zj8P7WuGinkNQhL4/wBj1ryL5Fg8s2zs8xuL+cUm&#xA;dSREo2PFFPy+0d/lnPa7XHOeVRD0Wg0AwDncj8mVZr3YOxVjfmvUNZsImlhSb6oPjW8tEWaSEgUI&#xA;mt3/ALyM9eSkEfic3SY4TNGr7jtfuPQuDq8k4Cxdd43r3jqHnupfmn5s9Bo7W709xSn1mBHST/gL&#xA;gjf5Kc3OLsrDdkS9x/Y6bL2rmqgYe8ftYMttq2rXcsqJLfXDEyTygM536s7Hp8zm1MoYwBtEOqEZ&#xA;5CTvIq66VrsUbRQ1dJNpILaZJWNezRxOx+8ZE5cZNn7RX2lkMWQCh9hv7AidI8vW9zMEu3uhLy4/&#xA;Uba1kkuG36DlxjX6TtlebUGI2r3k7frbMOnEj6r9wG/6nvnly2vLbSYIbpPR4KFit2kMzxxqKKJJ&#xA;T9t/Gmw6DpXOR1MoymSN/s+Qev00ZRgAdvLn8z3pnlDegdZvryztDNaQwzyD9ief6uKezFHH6stw&#xA;wjI0SR7hbTmnKIuIB95p5n5g86ec7n1Lb63pujQHZpIruKWWh67xtJIP9igPhm90+iwR3qcz/VIH&#xA;6B9ro9Rrc8trhAf1gT+k/YxZB+X1hbhp3u9cv+rrEfq1qT4cnHrfTT7szz+ZmduGEfmf1OvH5aA3&#xA;4skvkP1uR/Mvmtk0zSLEQabG1Vs7VSluh/nlkP2mp3Y18MSMWn9c5XLvPP4KDl1HohGo9w5fF655&#xA;F8kWvlixYMwn1G4obm4A2oOiJXfiPx/Ac7rtcc8u6I5B6PQaEYI98jzLJ8wHPdirsVdiqXa1aa3c&#xA;wKuk38dhKK83kgE5NaUpVlC0+Ry7BPHE+uPF8aaM8Mkh6JcPwtiF7+VuoarLz1vzJc3y1qI1jEaj&#xA;/VXm6D6FzZQ7UjjH7vGI/F10+ypZD+8yGXwTfRvyz8oaWyyJZ/W516TXR9U/PjQR/wDC5jZu082T&#xA;a6Hlt+1yMPZmHHvVnz3/AGLNa/L2LWZa3+s6jJb9rYPEkY8KKsYT/hclh7QOIemEL79/1oz9nDKf&#xA;VOdd236m9J/LDydpsiyi0N1Mu6vdN6gH+w+FP+FwZu1M0xV0PL8WnD2Xggbqz5/imVgACg2A6DNe&#xA;7B2KuxV2KuxV2KuxV2KuxV2KuxV2KpXqPlnQ77nJLp1nJdHdZ5rdJDy7Fvssw9uWZGPU5IbCUq8i&#xA;4+TS457mMb8wxuT8rLO8kH6T1Gaa2Q1isrZI7S3X5RoGH0ihzNHakoj0RAPebJ+bhHsqMj65EjuF&#xA;RHyVz+UnkgqQLSQH+YTSV/E5D+Vs/f8AYGX8kYO77SnOh+V7DRtrSa6aMCiQzXEkka/6sZPD8Mxs&#xA;+qll5iPyDlYNLHF9Jl8ynGYzkuxVRu7GyvIvSvLeK5i/33Miuv3MCMnCcom4khhPHGQqQBSSf8vv&#xA;Jczcn0mAHr8AaMfchUZkx7Qzj+IuLLs/Af4QutvIXk22YNHpNuSNx6imX/k4WwS1+eXORTHQYI8o&#xA;hPIYYYYxHCixxrsqIAqj5AZikkmy5YiAKC/Al2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:a215815f-e2c9-854c-ae00-183dcc505638</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:a215815f-e2c9-854c-ae00-183dcc505638</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:e7a0a442-391d-4f67-953c-e5ed3a2024a6</stRef:instanceID>
            <stRef:documentID>xmp.did:8fb1f162-c712-784c-9aee-67ce71565cbf</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4239c0b2-9560-5644-9c1b-2d4eaefa5ca4</stEvt:instanceID>
                  <stEvt:when>2015-03-29T08:26:58+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:a215815f-e2c9-854c-ae00-183dcc505638</stEvt:instanceID>
                  <stEvt:when>2015-12-05T07:56:50+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Áåëûé</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>×åðíûé</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
391.21 377.548 mo
391.21 377.548 391.136 377.458 390.992 377.284 cv
390.849 377.115 390.637 376.847 390.402 376.465 cv
389.956 375.713 389.283 374.486 389.153 372.692 cv
388.996 370.922 389.43 368.621 390.805 366.43 cv
391.475 365.325 392.392 364.277 393.507 363.318 cv
394.067 362.841 394.684 362.395 395.359 361.997 cv
395.528 361.897 395.698 361.796 395.875 361.705 cv
396.14 361.565 li
396.206 361.53 li
396.24 361.512 li
396.229 361.514 396.458 361.428 396.374 361.458 cv
396.488 361.405 li
396.802 361.261 397.081 361.117 397.432 360.969 cv
397.862 360.823 398.297 360.676 398.735 360.527 cv
399.153 360.43 399.575 360.332 400.001 360.233 cv
400.437 360.172 400.877 360.111 401.321 360.048 cv
401.768 360.013 402.223 360 402.684 359.981 cv
404.527 359.96 406.447 360.34 408.29 361.058 cv
412.002 362.493 415.185 365.512 417.252 368.998 cv
417.688 369.803 li
418.048 370.546 li
418.272 371.044 418.482 371.546 418.663 372.056 cv
419.019 373.076 419.294 374.113 419.5 375.161 cv
419.909 377.256 420.06 379.404 419.899 381.542 cv
419.639 385.824 418.24 390.07 416.005 393.755 cv
413.747 397.432 410.706 400.523 407.359 402.844 cv
404.031 405.207 400.423 406.833 396.905 407.988 cv
393.379 409.15 389.908 409.819 386.635 410.209 cv
383.358 410.598 380.27 410.683 377.444 410.623 cv
371.788 410.488 367.179 409.737 363.992 409.094 cv
362.398 408.768 361.158 408.447 360.315 408.232 cv
359.474 408.003 359.026 407.881 359.026 407.881 cv
359.026 407.881 359.487 407.822 360.351 407.712 cv
361.209 407.611 362.468 407.463 364.07 407.275 cv
367.255 406.884 371.783 406.355 377.04 405.388 cv
379.667 404.905 382.477 404.312 385.356 403.512 cv
388.238 402.73 391.192 401.742 394.064 400.482 cv
395.493 399.837 396.916 399.159 398.276 398.37 cv
399.632 397.577 400.943 396.715 402.174 395.769 cv
404.618 393.856 406.76 391.622 408.296 389.056 cv
409.875 386.525 410.847 383.667 411.191 380.792 cv
411.351 379.355 411.361 377.915 411.204 376.538 cv
411.123 375.85 410.999 375.18 410.831 374.545 cv
410.744 374.229 410.66 373.917 410.562 373.615 cv
410.406 373.176 li
410.275 372.829 li
409.086 370.323 407.461 368.347 405.443 367.15 cv
404.446 366.538 403.362 366.157 402.263 365.931 cv
401.985 365.889 401.708 365.848 401.435 365.807 cv
401.155 365.79 400.879 365.774 400.605 365.758 cv
400.327 365.766 400.053 365.775 399.781 365.783 cv
399.547 365.807 399.312 365.824 399.072 365.836 cv
398.77 365.89 398.414 365.983 398.093 366.053 cv
397.971 366.081 li
397.867 366.118 398.076 366.039 398.047 366.049 cv
398.022 366.056 li
397.974 366.07 li
397.781 366.123 li
397.651 366.156 397.525 366.2 397.398 366.241 cv
396.894 366.411 396.404 366.611 395.936 366.839 cv
395.005 367.305 394.184 367.898 393.484 368.543 cv
392.083 369.844 391.257 371.396 390.921 372.802 cv
390.584 374.213 390.697 375.455 390.871 376.275 cv
390.963 376.683 391.036 377.007 391.11 377.221 cv
391.176 377.437 391.21 377.548 391.21 377.548 cv
cp
.741787 .329229 0 0 cmyk
f
390.701 377.464 mo
390.701 377.464 390.545 377.251 390.283 376.793 cv
390.015 376.306 389.706 375.574 389.57 374.556 cv
389.428 373.547 389.54 372.256 390.119 370.921 cv
390.669 369.598 391.822 368.212 393.373 367.346 cv
395.012 366.404 397.133 366.034 399.258 366.572 cv
401.375 367.094 403.304 368.462 404.753 370.191 cv
406.301 372.14 407.096 374.391 407.416 376.802 cv
407.702 379.204 407.413 381.711 406.604 384.044 cv
405.773 386.365 404.496 388.516 402.947 390.349 cv
401.394 392.178 399.579 393.696 397.688 394.855 cv
395.781 395.993 393.836 396.851 391.953 397.466 cv
391.014 397.78 390.084 398.017 389.194 398.257 cv
388.291 398.441 387.429 398.655 386.589 398.783 cv
384.913 399.058 383.372 399.199 382.01 399.276 cv
380.645 399.345 379.456 399.327 378.481 399.307 cv
376.524 399.198 375.415 399.048 375.415 399.048 cv
375.273 399.029 375.174 398.899 375.193 398.758 cv
375.206 398.663 375.269 398.587 375.351 398.553 cv
375.36 398.549 li
375.36 398.549 376.406 398.123 378.22 397.528 cv
378.669 397.367 379.167 397.19 379.708 396.996 cv
380.248 396.808 380.838 396.642 381.45 396.399 cv
382.062 396.158 382.721 395.952 383.407 395.709 cv
384.083 395.451 384.794 395.18 385.536 394.896 cv
387.007 394.32 388.57 393.674 390.168 392.935 cv
391.758 392.178 393.378 391.339 394.971 390.389 cv
396.571 389.453 398.122 388.378 399.527 387.114 cv
400.913 385.837 402.075 384.304 402.857 382.586 cv
403.611 380.862 403.985 378.973 403.914 377.106 cv
403.869 376.176 403.713 375.26 403.469 374.386 cv
403.224 373.515 402.855 372.68 402.431 372.023 cv
401.414 370.521 400.045 369.404 398.575 368.849 cv
397.115 368.28 395.483 368.385 394.225 368.922 cv
392.845 369.506 391.883 370.446 391.28 371.499 cv
390.686 372.543 390.454 373.62 390.457 374.499 cv
390.457 375.382 390.651 376.086 390.818 376.516 cv
391.004 376.971 391.139 377.219 391.139 377.219 cv
391.205 377.34 391.16 377.492 391.039 377.558 cv
390.928 377.619 390.79 377.586 390.717 377.487 cv
390.701 377.464 li
cp
f
374.461 388.51 mo
374.461 388.51 374.353 388.325 374.151 387.977 cv
374.051 387.803 373.928 387.599 373.855 387.288 cv
373.768 386.991 373.637 386.607 373.648 386.206 cv
373.64 385.996 373.631 385.775 373.622 385.543 cv
373.647 385.315 373.687 385.073 373.728 384.815 cv
373.75 384.686 373.768 384.551 373.799 384.417 cv
373.847 384.289 373.896 384.159 373.946 384.026 cv
374.061 383.768 374.137 383.46 374.315 383.204 cv
374.48 382.939 374.661 382.661 374.864 382.384 cv
375.098 382.14 375.349 381.887 375.619 381.63 cv
375.893 381.382 376.231 381.203 376.565 380.987 cv
376.693 380.91 li
376.757 380.871 li
376.79 380.852 li
376.806 380.842 li
376.685 380.878 376.989 380.782 376.962 380.79 cv
377.171 380.699 li
377.596 380.514 li
377.81 380.379 378.354 380.287 378.819 380.206 cv
379.325 380.102 379.747 380.123 380.205 380.127 cv
380.669 380.107 381.118 380.212 381.584 380.314 cv
382.061 380.392 382.499 380.579 382.953 380.771 cv
383.425 380.939 383.831 381.21 384.244 381.493 cv
384.68 381.758 385.047 382.088 385.403 382.442 cv
385.948 382.975 li
386.104 383.166 386.246 383.368 386.396 383.569 cv
386.836 384.183 li
386.946 384.339 li
386.973 384.378 li
387.093 384.624 li
387.126 384.688 li
387.257 384.945 li
387.573 385.395 388.081 386.927 388.202 387.914 cv
388.256 388.425 388.361 388.952 388.354 389.467 cv
388.346 389.983 388.322 390.503 388.295 391.026 cv
388.066 393.102 387.274 395.095 386.169 396.868 cv
385.204 398.081 li
384.712 398.677 li
384.155 399.19 li
383.783 399.531 383.408 399.868 383.024 400.189 cv
382.637 400.501 382.21 400.732 381.806 401.001 cv
381.395 401.256 380.99 401.525 380.577 401.756 cv
380.148 401.94 379.721 402.123 379.297 402.304 cv
378.874 402.481 378.454 402.657 378.036 402.831 cv
377.612 402.956 377.185 403.058 376.766 403.168 cv
375.092 403.683 373.463 403.776 371.942 403.935 cv
370.422 403.965 368.999 403.915 367.707 403.816 cv
366.419 403.631 365.253 403.439 364.232 403.245 cv
363.213 403.037 362.347 402.716 361.633 402.51 cv
360.92 402.301 360.371 402.083 359.995 401.957 cv
359.622 401.815 359.424 401.74 359.424 401.74 cv
359.424 401.74 359.635 401.696 360.031 401.613 cv
360.424 401.547 361.001 401.414 361.723 401.315 cv
362.445 401.193 363.318 401.091 364.301 400.919 cv
365.284 400.72 366.38 400.52 367.558 400.328 cv
368.146 400.218 368.741 400.047 369.359 399.903 cv
369.971 399.743 370.617 399.646 371.248 399.454 cv
372.49 399.029 373.827 398.701 375.046 398.11 cv
375.359 397.98 375.671 397.842 375.99 397.721 cv
376.279 397.557 376.569 397.392 376.861 397.226 cv
377.152 397.065 377.445 396.902 377.74 396.739 cv
378.012 396.557 378.263 396.353 378.529 396.164 cv
378.783 395.965 379.075 395.8 379.304 395.581 cv
379.521 395.351 379.748 395.135 379.979 394.922 cv
380.328 394.603 li
380.601 394.235 li
380.786 393.992 380.972 393.75 381.168 393.515 cv
381.805 392.496 382.269 391.4 382.512 390.26 cv
382.536 389.974 382.562 389.69 382.605 389.406 cv
382.653 389.12 382.604 388.853 382.621 388.573 cv
382.642 388.246 382.578 388.149 382.585 387.944 cv
382.585 387.898 382.583 387.851 382.587 387.802 cv
382.587 387.775 382.596 387.758 382.589 387.722 cv
382.542 387.583 li
382.357 387.031 li
382.265 386.757 li
382.242 386.688 li
382.237 386.671 li
382.144 386.476 382.357 386.917 382.333 386.868 cv
382.321 386.847 li
382.276 386.762 li
382.1 386.415 li
381.933 386.061 li
381.727 385.766 li
381.528 385.457 li
381.46 385.357 381.37 385.294 381.294 385.207 cv
381.137 385.041 380.987 384.856 380.804 384.744 cv
380.631 384.608 380.461 384.447 380.261 384.375 cv
380.07 384.277 379.879 384.154 379.672 384.11 cv
379.47 384.044 379.243 383.951 379.108 383.943 cv
378.935 383.922 378.84 383.809 378.465 383.878 cv
378.31 383.893 378.156 383.908 378.004 383.922 cv
377.777 383.944 li
377.741 383.954 378.037 383.863 377.908 383.903 cv
377.899 383.905 li
377.881 383.91 li
377.845 383.919 li
377.772 383.937 li
377.584 383.991 377.368 384.006 377.18 384.074 cv
376.989 384.154 376.803 384.232 376.622 384.307 cv
376.463 384.418 376.304 384.532 376.133 384.638 cv
375.951 384.737 375.854 384.901 375.707 385.027 cv
375.562 385.158 375.433 385.297 375.341 385.452 cv
375.232 385.607 375.128 385.756 375.029 385.898 cv
374.959 386.059 374.893 386.213 374.83 386.358 cv
374.673 386.665 374.65 386.927 374.57 387.188 cv
374.482 387.44 374.484 387.696 374.485 387.895 cv
374.469 388.296 374.461 388.51 374.461 388.51 cv
cp
f
350.548 61.0533 mo
350.548 61.0533 350.778 60.8453 351.209 60.4553 cv
351.626 60.0711 352.316 59.4873 353.206 58.8321 cv
354.972 57.4939 357.787 55.8228 361.57 54.7661 cv
363.456 54.2464 365.566 53.9182 367.798 53.7806 cv
370.031 53.6524 372.386 53.7131 374.776 53.9501 cv
377.167 54.1799 379.598 54.5441 382.028 54.9442 cv
384.417 55.3547 386.843 55.7719 389.269 56.1889 cv
391.658 56.5645 394.013 56.8822 396.282 56.9839 cv
398.549 57.1085 400.732 56.9629 402.722 56.6079 cv
404.721 56.2579 406.52 55.6815 408.162 55.038 cv
409.802 54.3842 411.303 53.6563 412.675 52.8723 cv
415.429 51.3205 417.611 49.5308 419.133 48.2334 cv
419.885 47.5685 420.487 47.0419 420.877 46.6575 cv
421.284 46.2864 421.5 46.0885 421.5 46.0885 cv
421.619 45.9803 li
422.843 44.8635 424.74 44.95 425.857 46.1737 cv
426.77 47.1739 426.876 48.627 426.217 49.7333 cv
426.217 49.7333 426.047 50.0177 425.729 50.5511 cv
425.412 51.0856 424.907 51.849 424.238 52.8157 cv
423.533 53.7575 422.667 54.9098 421.504 56.1229 cv
420.355 57.3428 418.946 58.6625 417.2 59.895 cv
415.456 61.1195 413.36 62.2379 410.999 63.0198 cv
408.637 63.7926 406.028 64.2096 403.406 64.2484 cv
400.779 64.3248 398.148 64.0317 395.577 63.6446 cv
393.004 63.238 390.488 62.6661 388.038 62.0254 cv
385.591 61.3773 383.199 60.707 380.883 60.0232 cv
378.565 59.3524 376.305 58.7357 374.113 58.2586 cv
371.922 57.7884 369.803 57.4349 367.785 57.2867 cv
365.769 57.141 363.858 57.1935 362.11 57.4177 cv
358.608 57.8599 355.799 59.0161 353.929 59.9897 cv
352.983 60.477 352.291 60.8906 351.795 61.2177 cv
351.307 61.5338 351.047 61.7024 351.047 61.7024 cv
350.856 61.8256 350.602 61.7713 350.479 61.581 cv
350.368 61.4095 350.401 61.1859 350.548 61.0533 cv
cp
f
354.027 73.0656 mo
354.027 73.0656 354.223 72.8586 354.59 72.4704 cv
354.948 72.0796 355.514 71.5178 356.252 70.8098 cv
357.003 70.1287 357.911 69.2809 359.068 68.4367 cv
360.216 67.5828 361.578 66.6805 363.181 65.8636 cv
364.78 65.0402 366.636 64.3317 368.685 63.8606 cv
370.73 63.3781 372.968 63.1497 375.251 63.1985 cv
379.835 63.2978 384.512 64.3738 388.904 65.4414 cv
393.306 66.4955 397.55 67.4235 401.369 67.3132 cv
405.194 67.2373 408.423 66.2706 411.175 65.3274 cv
412.553 64.8448 413.808 64.315 414.93 63.8181 cv
416.059 63.3355 417.024 62.8219 417.835 62.4158 cv
418.637 61.9875 419.265 61.6341 419.696 61.3867 cv
420.129 61.1438 420.36 61.0142 420.36 61.0142 cv
420.516 60.9267 li
422.221 59.9703 424.379 60.5772 425.335 62.2823 cv
426.157 63.7476 425.822 65.548 424.63 66.6323 cv
424.63 66.6323 424.403 66.839 423.977 67.2267 cv
423.56 67.6261 422.898 68.1569 422.054 68.8439 cv
420.33 70.1537 417.722 72.0246 414.04 73.3591 cv
412.207 74.0233 410.11 74.5056 407.873 74.7141 cv
405.636 74.9268 403.27 74.8339 400.922 74.5333 cv
396.205 73.9251 391.596 72.4836 387.29 70.9671 cv
385.128 70.2271 383.027 69.4632 380.97 68.8175 cv
378.912 68.1766 376.891 67.6637 374.924 67.3837 cv
372.959 67.0948 371.045 67.0119 369.238 67.1892 cv
367.427 67.3439 365.735 67.757 364.197 68.266 cv
361.115 69.2992 358.72 70.7851 357.085 71.8539 cv
356.281 72.4033 355.651 72.8482 355.226 73.181 cv
354.8 73.5036 354.572 73.6756 354.572 73.6756 cv
354.391 73.8124 354.134 73.7766 353.997 73.5958 cv
353.874 73.4333 353.891 73.2087 354.027 73.0656 cv
cp
f
365.825 82.6347 mo
365.825 82.6347 365.956 82.4608 366.202 82.1346 cv
366.439 81.8201 366.856 81.3063 367.409 80.7458 cv
367.968 80.1782 368.693 79.5048 369.66 78.8847 cv
370.62 78.2603 371.816 77.683 373.203 77.2768 cv
374.59 76.8737 376.155 76.6798 377.781 76.6669 cv
379.41 76.6505 381.098 76.8208 382.787 77.11 cv
386.172 77.6733 389.583 78.6271 392.859 79.4288 cv
394.499 79.8195 396.112 80.1638 397.667 80.3664 cv
399.224 80.5536 400.72 80.5896 402.081 80.4819 cv
403.448 80.3864 404.664 80.1721 405.785 79.9778 cv
406.9 79.7616 407.93 79.5234 408.901 79.2361 cv
409.871 78.9528 410.768 78.5998 411.575 78.2404 cv
412.388 77.8931 413.096 77.5083 413.696 77.1964 cv
414.289 76.8677 414.766 76.5991 415.087 76.3998 cv
415.415 76.2084 415.59 76.1063 415.59 76.1063 cv
415.791 75.9895 li
417.067 75.2462 418.704 75.6779 419.447 76.9538 cv
419.966 77.8438 419.91 78.9121 419.397 79.7277 cv
419.397 79.7277 419.268 79.9329 419.025 80.3177 cv
418.785 80.7069 418.392 81.2505 417.862 81.9389 cv
417.308 82.6064 416.611 83.4167 415.668 84.2428 cv
414.732 85.0698 413.572 85.9348 412.16 86.6904 cv
410.752 87.4447 409.082 88.061 407.268 88.3743 cv
405.457 88.6812 403.52 88.6673 401.646 88.3739 cv
399.763 88.0945 397.935 87.6001 396.167 87.0446 cv
394.395 86.4985 392.68 85.8749 391.019 85.2183 cv
387.696 83.9229 384.605 82.4556 381.692 81.417 cv
378.786 80.3791 376.053 79.7781 373.717 79.9859 cv
371.374 80.1291 369.504 81.042 368.282 81.8156 cv
367.656 82.2071 367.225 82.5344 366.899 82.8031 cv
366.583 83.0628 366.415 83.2013 366.415 83.2013 cv
366.239 83.3459 365.98 83.3209 365.835 83.1451 cv
365.712 82.9951 365.712 82.7833 365.825 82.6347 cv
cp
f
364.429 48.5057 mo
364.429 48.5057 365.057 48.1334 366.155 47.4816 cv
366.738 47.1979 367.44 46.7707 368.284 46.4263 cv
369.119 46.0472 370.09 45.6771 371.179 45.3209 cv
373.354 44.6293 376.059 44.1479 378.96 44.0907 cv
381.858 44.0466 384.904 44.3853 387.728 44.7023 cv
390.552 45.0101 393.188 45.1961 395.415 44.7531 cv
396.53 44.5231 397.552 44.2167 398.474 43.7969 cv
398.938 43.6155 399.377 43.3732 399.808 43.1925 cv
400.233 42.9796 400.641 42.7557 401.043 42.5789 cv
401.437 42.3615 401.822 42.1682 402.191 41.9904 cv
402.563 41.8045 402.909 41.6014 403.251 41.4446 cv
403.924 41.11 404.518 40.7694 405.028 40.5385 cv
406.011 39.9713 406.613 39.6805 406.613 39.6805 cv
406.896 39.5436 li
408.779 38.6328 411.044 39.4211 411.955 41.3044 cv
412.671 42.7844 412.331 44.5044 411.242 45.6134 cv
411.242 45.6134 410.68 46.183 409.628 47.1217 cv
409.068 47.5673 408.416 48.1345 407.563 48.6824 cv
407.138 48.9605 406.679 49.2418 406.182 49.527 cv
405.664 49.7859 405.119 50.0586 404.537 50.3145 cv
403.34 50.7842 401.996 51.2167 400.511 51.4426 cv
399.041 51.7088 397.452 51.7822 395.865 51.7489 cv
394.272 51.7219 392.675 51.5474 391.134 51.2731 cv
389.591 51.0005 388.102 50.6307 386.671 50.2467 cv
385.237 49.8718 383.876 49.4368 382.543 49.0798 cv
381.213 48.7201 379.918 48.3985 378.661 48.1908 cv
377.404 47.9669 376.179 47.8036 375.009 47.7656 cv
373.836 47.6971 372.724 47.7609 371.684 47.8261 cv
370.65 47.9192 369.694 48.0489 368.852 48.2197 cv
368 48.3617 367.293 48.5634 366.679 48.6925 cv
365.456 49.0507 364.757 49.2555 364.757 49.2555 cv
364.539 49.3205 364.309 49.1963 364.244 48.978 cv
364.189 48.7937 364.271 48.6002 364.429 48.5057 cv
cp
f
144.912 293.43 mo
144.912 293.43 144.949 293.196 145.017 292.758 cv
145.084 292.327 145.201 291.657 145.388 290.838 cv
145.572 290.013 145.831 289.013 146.241 287.887 cv
146.651 286.764 147.192 285.5 147.981 284.2 cv
148.772 282.906 149.807 281.567 151.128 280.35 cv
152.44 279.124 154.052 278.078 155.769 277.212 cv
157.487 276.352 159.312 275.66 161.053 275.055 cv
162.78 274.441 164.453 273.816 165.532 273.035 cv
166.627 272.237 166.93 271.484 167.06 270.331 cv
167.091 270.042 167.1 269.75 167.095 269.388 cv
167.049 269.04 li
167.027 268.914 167.022 268.788 166.992 268.675 cv
166.9 268.208 166.736 267.876 166.583 267.577 cv
166.274 267.009 165.781 266.441 164.993 265.958 cv
164.215 265.497 163.249 265.221 162.376 265.166 cv
161.497 265.117 160.704 265.248 160.025 265.575 cv
159.358 265.904 158.774 266.444 158.373 267.033 cv
157.976 267.622 157.715 268.207 157.553 268.618 cv
157.393 269.045 157.307 269.273 157.307 269.273 cv
157.231 269.482 157 269.589 156.791 269.513 cv
156.702 269.48 156.629 269.415 156.583 269.339 cv
156.583 269.339 156.448 269.112 156.266 268.644 cv
156.085 268.177 155.851 267.457 155.815 266.437 cv
155.788 265.434 155.972 264.054 156.856 262.677 cv
157.719 261.309 159.249 260.052 161.137 259.42 cv
163.017 258.776 165.229 258.639 167.484 259.316 cv
168.609 259.646 169.752 260.195 170.79 261.017 cv
171.833 261.826 172.755 262.938 173.371 264.226 cv
173.994 265.51 174.283 266.951 174.27 268.298 cv
174.275 268.638 174.255 268.968 174.225 269.297 cv
174.189 269.615 174.144 269.947 174.073 270.318 cv
173.959 270.867 173.801 271.484 173.587 272.088 cv
173.17 273.294 172.513 274.558 171.582 275.608 cv
170.663 276.668 169.544 277.484 168.456 278.032 cv
166.264 279.14 164.261 279.507 162.443 279.923 cv
160.622 280.325 158.938 280.646 157.396 281.14 cv
155.855 281.623 154.471 282.267 153.242 283.044 cv
152.016 283.823 150.97 284.762 150.098 285.744 cv
148.344 287.715 147.289 289.792 146.603 291.25 cv
146.258 291.988 146.022 292.564 145.86 292.984 cv
145.7 293.398 145.615 293.618 145.615 293.618 cv
145.542 293.807 145.33 293.901 145.142 293.828 cv
144.978 293.764 144.886 293.596 144.912 293.43 cv
cp
f
147.815 294.926 mo
147.815 294.926 147.863 294.604 147.952 294 cv
148.085 293.374 148.25 292.446 148.69 291.317 cv
149.124 290.19 149.843 288.823 151.088 287.549 cv
152.312 286.26 154.075 285.159 156.096 284.439 cv
158.122 283.715 160.376 283.323 162.71 283.109 cv
165.048 282.887 167.476 282.871 169.935 282.881 cv
172.393 282.896 174.891 282.919 177.337 282.866 cv
179.774 282.817 182.192 282.642 184.276 282.114 cv
186.383 281.61 187.991 280.673 188.872 279.47 cv
189.087 279.155 189.296 278.851 189.456 278.498 cv
189.547 278.334 189.618 278.148 189.692 277.968 cv
189.749 277.835 li
189.645 278.029 189.727 277.873 189.706 277.909 cv
189.717 277.882 li
189.739 277.827 li
189.782 277.717 li
189.828 277.59 189.925 277.38 189.928 277.322 cv
189.958 277.133 li
190.005 276.881 li
190.029 276.711 190.072 276.552 190.079 276.402 cv
190.118 276.1 190.097 275.831 190.084 275.598 cv
190.033 275.131 189.943 274.776 189.787 274.366 cv
189.622 273.967 189.384 273.505 189.016 273.055 cv
188.305 272.12 187.143 271.323 186.005 270.849 cv
184.855 270.367 183.727 270.187 182.717 270.294 cv
181.702 270.389 180.745 270.818 179.991 271.41 cv
179.229 271.992 178.663 272.665 178.296 273.144 cv
178.101 273.382 177.974 273.581 177.876 273.713 cv
177.778 273.847 177.727 273.916 177.727 273.916 cv
177.559 274.148 177.235 274.2 177.003 274.032 cv
176.904 273.961 176.837 273.857 176.806 273.748 cv
176.806 273.748 176.711 273.396 176.651 272.706 cv
176.603 272.019 176.559 270.964 176.958 269.593 cv
177.345 268.244 178.282 266.52 180.092 265.165 cv
181.886 263.817 184.432 263.012 187.129 263.093 cv
189.821 263.189 192.722 264.064 195.318 266.133 cv
196.594 267.179 197.794 268.553 198.613 270.277 cv
199.446 271.984 199.855 274.032 199.702 275.994 cv
199.637 276.974 199.419 277.921 199.139 278.81 cv
199 279.258 198.837 279.685 198.651 280.099 cv
198.356 280.714 li
198.001 281.377 li
197.876 281.605 197.818 281.667 197.723 281.82 cv
197.659 281.919 li
197.626 281.969 li
197.61 281.994 li
197.58 282.047 197.654 281.908 197.539 282.12 cv
197.356 282.391 li
197.111 282.753 196.864 283.112 196.578 283.456 cv
196.038 284.157 195.394 284.801 194.727 285.404 cv
193.362 286.588 191.781 287.493 190.212 288.102 cv
188.634 288.713 187.061 289.061 185.554 289.252 cv
182.529 289.63 179.731 289.46 177.08 289.214 cv
174.43 288.952 171.927 288.525 169.542 288.184 cv
164.793 287.496 160.441 286.951 156.978 287.605 cv
155.257 287.915 153.777 288.5 152.654 289.33 cv
151.522 290.147 150.713 291.139 150.145 292.035 cv
149.571 292.939 149.262 293.74 149.035 294.27 cv
148.832 294.845 148.723 295.152 148.723 295.152 cv
148.637 295.396 148.368 295.525 148.124 295.438 cv
147.908 295.362 147.783 295.144 147.815 294.926 cv
cp
f
150.881 296.644 mo
150.881 296.644 150.902 296.546 150.943 296.358 cv
150.993 296.163 151.021 295.906 151.161 295.5 cv
151.403 294.709 151.834 293.571 152.917 292.361 cv
153.991 291.167 155.79 290.131 157.898 289.684 cv
160.003 289.207 162.368 289.139 164.862 289.284 cv
167.359 289.445 169.993 289.827 172.736 290.291 cv
175.48 290.749 178.323 291.323 181.231 291.898 cv
184.139 292.466 187.118 293.027 190.104 293.452 cv
193.079 293.915 196.073 294.249 198.941 294.275 cv
201.797 294.3 204.554 294.025 206.781 293.185 cv
207.894 292.771 208.867 292.241 209.685 291.626 cv
210.115 291.303 210.413 291.042 210.908 290.565 cv
211.323 290.073 li
211.473 289.896 211.627 289.727 211.748 289.551 cv
212.752 288.115 213.064 287.165 213.282 286.072 cv
213.501 284.977 213.3 283.609 212.758 282.421 cv
212.207 281.233 211.396 280.281 210.432 279.652 cv
209.469 279.015 208.251 278.75 207.093 278.799 cv
205.932 278.833 204.885 279.111 204.178 279.336 cv
203.813 279.441 203.539 279.548 203.348 279.616 cv
203.153 279.682 203.052 279.716 203.052 279.716 cv
202.707 279.834 202.331 279.651 202.212 279.306 cv
202.166 279.173 202.166 279.032 202.202 278.907 cv
202.202 278.907 202.328 278.472 202.716 277.703 cv
203.118 276.951 203.767 275.811 205.113 274.638 cv
206.435 273.494 208.625 272.311 211.513 272.243 cv
214.375 272.145 217.679 273.291 220.299 275.666 cv
222.918 278.002 225.003 281.627 225.238 286.015 cv
225.341 288.183 224.947 290.49 224.019 292.558 cv
223.105 294.63 221.725 296.455 220.132 297.851 cv
219.74 298.214 219.332 298.537 218.923 298.858 cv
218.292 299.308 li
217.578 299.778 li
216.865 300.204 215.883 300.773 214.975 301.19 cv
213.114 302.052 211.17 302.633 209.259 302.988 cv
205.421 303.689 201.75 303.573 198.295 303.147 cv
194.835 302.708 191.566 301.939 188.442 301.079 cv
185.328 300.176 182.364 299.168 179.532 298.187 cv
173.871 296.248 168.744 294.274 164.299 293.282 cv
162.089 292.767 160.055 292.485 158.328 292.571 cv
156.599 292.652 155.233 293.139 154.275 293.837 cv
153.329 294.541 152.764 295.417 152.462 295.993 cv
152.294 296.265 152.192 296.566 152.113 296.733 cv
152.037 296.911 151.998 297.002 151.998 297.002 cv
151.87 297.301 151.524 297.44 151.225 297.312 cv
150.96 297.199 150.822 296.914 150.881 296.644 cv
cp
f
164.288 90.7637 mo
164.288 90.7637 163.904 90.6522 163.183 90.4433 cv
162.436 90.1861 161.345 89.8234 160.018 89.1712 cv
158.689 88.5219 157.124 87.5567 155.529 86.1198 cv
153.94 84.6879 152.339 82.736 151.171 80.2412 cv
149.995 77.7606 149.234 74.7606 149.23 71.5298 cv
149.229 68.3059 149.95 64.8669 151.503 61.604 cv
153.019 58.3203 155.506 55.3013 158.638 52.9331 cv
161.778 50.5611 165.603 48.9838 169.53 48.1862 cv
173.46 47.3751 177.526 47.3096 181.262 48.0417 cv
182.648 48.3096 184.022 48.5753 185.381 48.8379 cv
186.713 49.0779 188.003 49.3244 189.247 49.5201 cv
191.728 49.9377 194.031 50.185 195.924 50.1263 cv
197.836 50.0852 199.21 49.7697 200.106 49.37 cv
200.567 49.1615 200.952 48.9005 201.292 48.5265 cv
201.623 48.1542 201.879 47.665 202.018 47.1357 cv
202.307 46.0649 202.142 44.9396 201.755 44.2188 cv
201.399 43.4396 200.694 43.0519 200.081 42.906 cv
199.778 42.8304 199.519 42.8236 199.339 42.8142 cv
199.156 42.8101 199.061 42.8078 199.061 42.8078 cv
198.933 42.805 li
198.552 42.7962 198.249 42.4799 198.258 42.0983 cv
198.262 41.9069 198.346 41.7341 198.474 41.6118 cv
198.474 41.6118 198.561 41.5298 198.729 41.371 cv
198.899 41.2077 199.176 40.9915 199.599 40.7564 cv
200.02 40.5256 200.608 40.2641 201.384 40.1872 cv
202.15 40.1034 203.112 40.1727 204.095 40.5436 cv
206.061 41.2928 207.999 43.1477 208.973 45.8936 cv
209.44 47.2643 209.698 48.8794 209.481 50.6097 cv
209.279 52.3314 208.624 54.1684 207.516 55.7522 cv
206.436 57.3671 204.945 58.6774 203.36 59.7133 cv
201.76 60.7111 200.045 61.4666 198.322 61.9687 cv
194.862 62.9832 191.351 63.2539 187.922 63.0903 cv
186.206 62.9944 184.504 62.7965 182.826 62.4825 cv
181.993 62.3229 181.166 62.1509 180.295 61.9268 cv
179.352 61.7095 178.79 61.5087 177.889 61.2586 cv
175.583 60.45 173.232 59.7138 170.852 59.6498 cv
168.474 59.555 166.156 60.1385 164.077 61.2069 cv
161.992 62.2759 160.201 63.8983 158.775 65.7813 cv
157.354 67.6711 156.394 69.8791 155.959 72.0845 cv
155.487 74.2914 155.531 76.5044 155.99 78.4869 cv
156.452 80.4683 157.277 82.2366 158.266 83.677 cv
159.255 85.1201 160.377 86.2399 161.363 87.1119 cv
162.362 87.9792 163.247 88.557 163.834 88.9521 cv
164.476 89.3369 164.819 89.542 164.819 89.542 cv
165.138 89.7322 165.242 90.1445 165.052 90.463 cv
164.892 90.7306 164.574 90.8463 164.288 90.7637 cv
cp
f
163.979 90.6252 mo
163.979 90.6252 163.579 90.5766 162.83 90.4854 cv
162.065 90.3724 160.912 90.188 159.499 89.8041 cv
158.075 89.4293 156.359 88.8258 154.489 87.8276 cv
152.632 86.8226 150.599 85.4168 148.768 83.4127 cv
146.931 81.4253 145.291 78.8629 144.204 75.8594 cv
143.121 72.8589 142.608 69.4324 142.857 65.8796 cv
142.985 64.1043 143.287 62.293 143.816 60.4985 cv
144.36 58.7104 145.117 56.9387 146.109 55.2505 cv
148.07 51.8699 151.029 48.8246 154.657 46.7385 cv
158.274 44.6509 162.428 43.4255 166.458 43.1877 cv
167.467 43.1175 168.469 43.1002 169.45 43.1549 cv
169.943 43.1742 170.434 43.2032 170.912 43.2636 cv
171.635 43.3428 li
171.815 43.3631 li
171.86 43.3682 li
171.892 43.3728 171.758 43.347 171.831 43.3598 cv
171.903 43.369 li
172.19 43.4071 li
173.563 43.5808 174.919 43.7525 176.254 43.9213 cv
178.837 44.246 181.243 44.5643 183.302 44.5909 cv
185.378 44.6794 187.023 44.4273 188.059 44.1726 cv
188.577 44.0316 188.979 43.9145 189.318 43.7263 cv
189.667 43.5472 189.966 43.2723 190.191 42.896 cv
190.64 42.1283 190.625 41.1248 190.351 40.4697 cv
190.208 40.1476 189.992 39.8298 189.69 39.6508 cv
189.395 39.4642 189.043 39.3689 188.728 39.3177 cv
188.412 39.2738 188.146 39.2931 187.96 39.3024 cv
187.77 39.3171 187.672 39.3247 187.672 39.3247 cv
187.548 39.3343 li
187.162 39.3641 186.826 39.0757 186.796 38.6901 cv
186.782 38.5142 186.836 38.3474 186.933 38.2163 cv
186.933 38.2163 187.006 38.1194 187.147 37.9317 cv
187.29 37.7393 187.531 37.4814 187.914 37.1684 cv
188.298 36.8582 188.852 36.5105 189.646 36.3077 cv
190.427 36.1007 191.476 36.0381 192.566 36.3822 cv
194.761 37.0316 196.961 39.1161 197.727 42.26 cv
198.12 43.8224 198.098 45.6636 197.538 47.4746 cv
196.98 49.2843 195.883 50.9943 194.518 52.3338 cv
193.157 53.6961 191.565 54.7241 189.933 55.4908 cv
188.299 56.2931 186.601 56.782 184.911 57.1814 cv
181.513 57.9006 178.085 58.0535 174.716 57.7154 cv
173.868 57.6228 173.048 57.5212 172.192 57.3707 cv
170.888 57.1313 li
169.754 56.8712 li
169.471 56.806 li
169.168 56.7338 li
168.745 56.6204 li
168.46 56.538 168.179 56.4762 167.897 56.4057 cv
167.331 56.2689 166.766 56.1374 166.202 56.0469 cv
163.95 55.6602 161.636 55.6602 159.535 56.4684 cv
157.426 57.2266 155.514 58.6486 153.997 60.5065 cv
152.5 62.3743 151.377 64.6438 150.759 67.0219 cv
150.134 69.4046 150.071 71.8758 150.413 74.1772 cv
150.752 76.4857 151.562 78.6211 152.659 80.4223 cv
153.761 82.2204 155.087 83.7359 156.458 84.9046 cv
157.832 86.0713 159.202 86.9356 160.377 87.5855 cv
161.563 88.2394 162.532 88.6468 163.213 88.9242 cv
163.92 89.1898 164.296 89.3314 164.296 89.3314 cv
164.643 89.4619 164.819 89.8487 164.688 90.1955 cv
164.577 90.4909 164.279 90.6618 163.979 90.6252 cv
cp
f
194.441 67.0803 mo
194.441 67.0803 194.871 67.0111 195.617 66.9318 cv
195.989 66.894 196.44 66.8482 196.958 66.7955 cv
197.464 66.7275 198.03 66.6251 198.631 66.5596 cv
199.235 66.476 199.893 66.3387 200.574 66.2342 cv
201.255 66.1115 201.958 65.9338 202.679 65.7851 cv
203.386 65.5725 204.125 65.4171 204.834 65.1575 cv
205.189 65.0363 205.546 64.9142 205.905 64.7916 cv
206.947 64.3681 li
207.299 64.2442 207.62 64.0521 207.952 63.8961 cv
208.285 63.7433 208.615 63.5921 208.919 63.4017 cv
209.55 63.0604 210.127 62.6726 210.685 62.3068 cv
211.216 61.9022 211.737 61.5288 212.18 61.1191 cv
212.649 60.7389 213.03 60.3162 213.397 59.945 cv
214.112 59.1838 214.632 58.4883 214.97 57.9857 cv
215.306 57.4801 215.497 57.1913 215.497 57.1913 cv
215.624 57.0002 li
216.49 55.6939 218.251 55.3373 219.557 56.2035 cv
220.845 57.0576 221.208 58.7843 220.388 60.0845 cv
220.388 60.0845 220.129 60.495 219.675 61.2134 cv
219.186 61.9074 218.439 62.8696 217.416 63.9021 cv
216.878 64.3909 216.305 64.93 215.632 65.415 cv
214.992 65.9421 214.23 66.3737 213.462 66.8287 cv
213.064 67.0312 212.66 67.2372 212.252 67.4456 cv
211.837 67.6397 211.399 67.7899 210.969 67.9629 cv
210.109 68.3045 209.202 68.5496 208.299 68.7475 cv
206.943 69.0059 li
206.49 69.0514 206.039 69.0968 205.592 69.1418 cv
204.704 69.2593 203.823 69.1819 202.989 69.2031 cv
202.151 69.1265 201.349 69.0843 200.601 68.9595 cv
199.852 68.8188 199.156 68.7129 198.514 68.5408 cv
197.872 68.3764 197.297 68.183 196.792 68.0345 cv
196.293 67.8742 195.879 67.6974 195.53 67.5506 cv
194.834 67.2665 194.441 67.0803 194.441 67.0803 cv
cp
f
211.315 55.2029 mo
211.315 55.2029 211.424 54.8651 211.65 54.3073 cv
211.78 54.0373 211.886 53.6998 212.03 53.3345 cv
212.176 52.9763 212.328 52.5544 212.497 52.1221 cv
213.161 50.3628 213.834 48.1667 213.999 46.0785 cv
214.196 43.9894 213.874 41.9315 213.419 40.4003 cv
213.197 39.6359 212.94 39.0277 212.763 38.6317 cv
212.589 38.2829 212.489 38.0836 212.489 38.0836 cv
212.331 37.7664 li
211.955 37.0129 212.262 36.0975 213.015 35.7217 cv
213.501 35.4791 214.058 35.5224 214.491 35.7853 cv
214.491 35.7853 214.905 36.0383 215.414 36.5191 cv
215.926 37.0002 216.566 37.7288 217.126 38.7151 cv
217.698 39.6944 218.192 40.9381 218.444 42.3398 cv
218.693 43.7366 218.706 45.2904 218.385 46.7644 cv
218.252 47.507 217.992 48.2154 217.732 48.8944 cv
217.44 49.5634 217.116 50.1967 216.738 50.7633 cv
216.371 51.3349 215.964 51.8448 215.553 52.2949 cv
215.145 52.7487 214.716 53.1301 214.318 53.4685 cv
213.901 53.7928 213.525 54.0742 213.156 54.3 cv
212.782 54.5152 212.464 54.7084 212.197 54.8326 cv
211.648 55.0805 211.315 55.2029 211.315 55.2029 cv
cp
f
261.515 92.3368 mo
281.535 86.9234 290.946 66.1608 277.328 52.6329 cv
264.248 39.6396 277.448 23.006 290.462 41.14 cv
298.259 52.0051 303.047 85.7555 261.515 92.3368 cv
cp
f
297.282 91.2379 mo
309.521 91.2137 314.54 85.5343 316.067 80.8947 cv
317.649 76.0888 326.024 79.1007 324.052 84.6943 cv
321.355 92.3451 306.302 93.6743 297.282 91.2379 cv
cp
f
270.852 92.3774 mo
285.234 91.3786 302.774 82.5632 298.024 71.7313 cv
293.463 61.3275 309.693 53.9917 312.196 67.4646 cv
313.696 75.5369 307.023 94.7069 270.852 92.3774 cv
cp
f
57.8044 197.874 mo
57.8044 197.874 57.6888 197.883 57.4648 197.902 cv
57.2319 197.913 56.9288 197.965 56.454 197.966 cv
55.5156 198.002 54.1812 197.989 52.4451 197.608 cv
50.7261 197.246 48.5911 196.418 46.6065 194.678 cv
44.6417 192.949 42.9255 190.28 42.2698 187.033 cv
41.6116 183.811 41.8562 180.016 43.7573 176.397 cv
44.711 174.607 46.1175 172.872 47.9981 171.564 cv
49.8671 170.251 52.1541 169.408 54.4632 169.119 cv
56.7771 168.832 59.0751 169.049 61.2226 169.55 cv
63.3741 170.052 65.3867 170.84 67.2698 171.79 cv
68.214 172.262 69.1241 172.774 70.014 173.31 cv
70.7187 173.705 71.6387 174.273 72.2705 174.578 cv
73.6677 175.31 75.2029 176.025 76.6882 176.587 cv
79.6731 177.763 82.7688 178.342 85.6163 178.287 cv
88.4739 178.263 91.007 177.632 93.1944 176.885 cv
95.388 176.115 97.3021 175.144 98.9846 173.934 cv
100.626 172.695 101.997 171.218 102.979 169.577 cv
103.947 167.94 104.608 166.162 104.881 164.4 cv
105.162 162.644 105.136 160.918 104.954 159.44 cv
104.773 157.96 104.475 156.726 104.243 155.876 cv
103.999 155.008 103.869 154.545 103.869 154.545 cv
103.867 154.537 li
103.751 154.124 103.991 153.696 104.403 153.58 cv
104.587 153.529 104.774 153.548 104.935 153.622 cv
104.935 153.622 105.403 153.835 106.231 154.35 cv
106.654 154.601 107.142 154.95 107.7 155.401 cv
108.261 155.849 108.893 156.402 109.538 157.1 cv
110.81 158.497 112.225 160.474 113.171 163.175 cv
114.117 165.852 114.588 169.269 113.939 172.935 cv
113.31 176.587 111.593 180.45 108.746 183.701 cv
105.937 186.962 101.999 189.613 97.5721 190.873 cv
93.1559 192.205 88.398 192.126 84.052 191.204 cv
79.6815 190.277 75.6475 188.615 71.9629 186.645 cv
70.1093 185.636 68.4127 184.557 66.6955 183.338 cv
65.7558 182.689 65.1776 182.197 64.3568 181.584 cv
63.7344 181.092 63.1058 180.623 62.4711 180.198 cv
59.9388 178.502 57.3181 177.293 55.0227 177.215 cv
53.8812 177.168 52.8286 177.358 51.8633 177.799 cv
50.9069 178.248 50.0281 178.95 49.3081 179.847 cv
47.8588 181.651 47.1611 184.134 47.2358 186.374 cv
47.2801 188.637 48.0511 190.677 49.2073 192.174 cv
50.3737 193.667 51.8568 194.661 53.2037 195.254 cv
54.5448 195.866 55.7609 196.123 56.5425 196.269 cv
56.9287 196.359 57.2909 196.381 57.5039 196.418 cv
57.7265 196.448 57.8415 196.464 57.8415 196.464 cv
58.2297 196.517 58.5017 196.874 58.4492 197.262 cv
58.4037 197.598 58.1289 197.847 57.8044 197.874 cv
cp
f
41.6306 196.146 mo
41.6306 196.146 41.5539 196.105 41.4052 196.026 cv
41.2557 195.935 41.0383 195.858 40.7454 195.638 cv
40.1295 195.247 39.3774 194.585 38.577 193.569 cv
36.9753 191.554 35.492 188.096 35.025 183.721 cv
34.7848 181.535 34.829 179.118 35.2695 176.581 cv
35.5096 175.317 35.8644 174.032 36.3287 172.74 cv
36.8118 171.455 37.4279 170.177 38.1753 168.932 cv
38.9363 167.696 39.8461 166.507 40.8964 165.417 cv
41.9658 164.316 43.1176 163.387 44.4717 162.469 cv
45.3363 161.915 li
46.3521 161.327 li
47.0422 160.949 47.7059 160.604 48.4181 160.292 cv
49.8258 159.662 51.3033 159.132 52.8271 158.75 cv
55.867 157.947 59.0755 157.703 62.1274 157.943 cv
65.1832 158.188 68.0516 158.966 70.5968 159.92 cv
73.1191 160.834 75.5196 162.119 77.0495 162.488 cv
78.755 162.948 80.1765 162.789 81.206 162.202 cv
82.227 161.61 82.8689 160.499 82.8356 159.487 cv
82.8188 158.488 82.204 157.522 81.3334 156.991 cv
80.4985 156.396 79.5948 156.167 78.9977 155.982 cv
78.3711 155.847 78.0369 155.775 78.0369 155.775 cv
78.0157 155.771 li
77.8209 155.729 77.697 155.537 77.7388 155.342 cv
77.7677 155.208 77.8681 155.108 77.9911 155.072 cv
77.9911 155.072 78.3382 154.971 79.0241 154.822 cv
79.7144 154.717 80.7604 154.561 82.1921 154.87 cv
82.899 155.03 83.7 155.356 84.481 155.945 cv
85.2667 156.523 85.9892 157.426 86.404 158.559 cv
87.299 160.807 86.738 163.923 84.5912 166.065 cv
83.5431 167.141 82.1481 167.938 80.6596 168.382 cv
79.1661 168.827 77.5952 168.917 76.0891 168.773 cv
75.3628 168.704 74.3466 168.509 73.8614 168.389 cv
73.4116 168.287 li
73.2988 168.261 li
73.1196 168.208 li
73.0607 168.193 li
72.8256 168.129 li
72.5163 168.042 72.2053 167.954 71.8926 167.866 cv
70.7088 167.516 69.4994 167.158 68.2695 166.794 cv
65.8915 166.079 63.5605 165.385 61.1965 164.903 cv
58.8383 164.417 56.42 164.233 54.021 164.56 cv
52.8269 164.737 51.6401 165.019 50.4851 165.423 cv
49.91 165.614 49.3247 165.858 48.7838 166.092 cv
47.977 166.462 li
47.0668 166.939 li
46.1095 167.473 45.0607 168.145 44.1929 168.897 cv
43.32 169.668 42.4915 170.487 41.7822 171.399 cv
41.0816 172.315 40.4638 173.287 39.9451 174.298 cv
39.4441 175.316 39.0211 176.359 38.6931 177.412 cv
38.034 179.517 37.7049 181.637 37.6637 183.607 cv
37.5482 187.563 38.5185 190.863 39.6479 192.851 cv
40.2048 193.847 40.8119 194.564 41.2447 194.941 cv
41.4396 195.155 41.6802 195.294 41.8035 195.398 cv
41.9385 195.499 42.0081 195.551 42.0081 195.551 cv
42.1647 195.667 42.1972 195.889 42.0806 196.045 cv
41.9749 196.187 41.7823 196.227 41.6306 196.146 cv
cp
f
32.1832 188.798 mo
32.1832 188.798 32.0517 188.655 31.8052 188.388 cv
31.5633 188.121 31.2129 187.722 30.8169 187.149 cv
30.4276 186.582 29.9673 185.882 29.5273 185.023 cv
29.0911 184.165 28.6515 183.163 28.2817 182.026 cv
27.5255 179.76 27.0321 176.949 27.1486 173.883 cv
27.2112 172.352 27.4383 170.763 27.8455 169.18 cv
28.2313 167.589 28.8822 166.03 29.6566 164.539 cv
30.4484 163.055 31.4413 161.669 32.5721 160.459 cv
33.6723 159.218 34.9654 158.211 36.2485 157.342 cv
36.9143 156.941 37.5419 156.509 38.2202 156.207 cv
38.5511 156.044 38.8785 155.883 39.2021 155.724 cv
39.5347 155.591 39.8635 155.46 40.1878 155.33 cv
40.8334 155.067 41.4743 154.862 42.1001 154.69 cv
42.7204 154.501 43.3264 154.36 43.9134 154.253 cv
45.0752 153.993 46.1629 153.924 47.1066 153.828 cv
48.0632 153.799 48.8892 153.79 49.5671 153.818 cv
50.9278 153.903 51.6907 154.013 51.6907 154.013 cv
51.6907 154.013 50.9674 154.333 49.727 154.786 cv
49.1204 155.036 48.3837 155.338 47.5387 155.685 cv
46.7217 156.081 45.7847 156.443 44.831 156.963 cv
44.3459 157.201 43.8449 157.447 43.3549 157.75 cv
42.8545 158.032 42.3378 158.311 41.8445 158.657 cv
41.5926 158.817 41.3372 158.979 41.0787 159.144 cv
40.8339 159.324 40.586 159.506 40.3355 159.691 cv
39.8257 160.044 39.3516 160.454 38.8609 160.854 cv
37.9142 161.694 36.9856 162.592 36.1763 163.611 cv
35.3652 164.624 34.5995 165.698 34.0018 166.877 cv
33.375 168.036 32.8405 169.255 32.4361 170.514 cv
32.0371 171.773 31.7138 173.049 31.4909 174.319 cv
31.2877 175.59 31.1425 176.844 31.0803 178.051 cv
31.036 179.256 31.0093 180.417 31.0776 181.489 cv
31.12 182.567 31.224 183.559 31.3346 184.446 cv
31.4578 185.328 31.5792 186.114 31.7099 186.753 cv
31.8541 187.378 31.9471 187.91 32.0543 188.255 cv
32.1383 188.609 32.1832 188.798 32.1832 188.798 cv
cp
f
36.2547 412.851 mo
36.2547 412.851 36.4013 412.833 36.6853 412.796 cv
36.9678 412.758 37.3523 412.697 37.8881 412.603 cv
38.9466 412.414 40.4992 412.084 42.4443 411.548 cv
44.3865 411.002 46.7288 410.29 49.3431 409.313 cv
51.9567 408.338 54.8365 407.083 57.8424 405.555 cv
60.8425 404.018 63.9508 402.14 66.9021 399.866 cv
69.8678 397.628 72.6728 394.971 74.9122 391.933 cv
77.1296 388.881 78.8402 385.541 79.7187 381.968 cv
80.158 380.182 80.3986 378.344 80.4669 376.48 cv
80.4851 375.542 80.4772 374.604 80.3934 373.655 cv
80.3658 373.301 li
80.3523 373.124 li
80.3457 373.035 li
80.3424 372.991 li
80.3398 372.824 80.3427 373.17 80.3404 373.113 cv
80.2607 372.234 li
80.2495 372.056 80.2293 372.008 80.2125 371.937 cv
80.165 371.724 li
80.1423 371.601 80.0971 371.403 80.0478 371.223 cv
79.6641 369.774 79.0718 368.594 78.3086 367.731 cv
77.5491 366.866 76.6872 366.252 75.7184 365.816 cv
73.826 364.924 71.4096 364.694 69.7405 364.932 cv
68.9104 365.05 68.3513 365.229 68.0547 365.294 cv
67.7447 365.361 67.563 365.27 67.2336 365.613 cv
66.9122 365.942 66.661 366.782 66.6244 367.895 cv
66.6211 368.104 li
66.6185 368.21 li
66.617 368.263 li
66.6091 368.24 66.6785 368.539 66.6513 368.434 cv
66.6552 368.479 li
66.7193 369.185 li
66.8219 370.214 li
66.855 370.573 66.8539 370.864 66.8689 371.188 cv
66.9052 372.459 66.8595 373.751 66.6968 375.056 cv
66.3432 377.649 65.506 380.355 63.9182 382.616 cv
62.3811 384.896 60.1712 386.574 57.9858 387.423 cv
55.7911 388.295 53.6418 388.442 51.7591 388.167 cv
49.8719 387.881 48.1964 387.173 46.88 386.095 cv
45.5569 385.043 44.6781 383.539 44.4717 382.206 cv
44.2488 380.863 44.5588 379.849 44.8574 379.172 cv
45.1693 378.487 45.487 378.076 45.7083 377.805 cv
45.9384 377.551 46.0571 377.42 46.0571 377.42 cv
46.4063 377.035 47.0016 377.006 47.3868 377.355 cv
47.5819 377.532 47.6857 377.773 47.695 378.017 cv
47.7005 378.171 li
47.7005 378.171 47.7054 378.311 47.715 378.582 cv
47.7498 378.846 47.7568 379.228 47.904 379.635 cv
48.0499 380.038 48.3187 380.432 48.6628 380.594 cv
49.011 380.76 49.3935 380.739 49.8778 380.672 cv
50.359 380.593 50.9783 380.415 51.5648 380.071 cv
52.1536 379.736 52.6872 379.229 52.981 378.677 cv
53.1307 378.403 53.2246 378.122 53.2581 377.835 cv
53.3055 377.562 53.309 377.29 53.2765 376.994 cv
53.2079 376.416 53.0944 375.728 52.7987 374.806 cv
52.667 374.35 52.4905 373.843 52.2654 373.3 cv
52.2061 373.172 52.152 373.005 52.0924 372.911 cv
52.0282 372.796 51.9931 372.728 51.929 372.572 cv
51.6789 371.908 li
51.6632 371.867 li
51.6294 371.733 51.692 372.004 51.6779 371.952 cv
51.6383 371.832 li
51.5593 371.592 li
51.4027 371.107 li
50.578 368.518 50.0835 365.339 50.6916 361.724 cv
51.259 358.132 53.2773 354.288 56.1868 351.588 cv
59.1025 348.87 62.6345 347.242 66.1199 346.517 cv
73.097 345.073 80.2979 346.795 85.9902 351.225 cv
88.8005 353.453 91.1624 356.356 92.7062 359.566 cv
94.2623 362.774 95.048 366.181 95.2186 369.391 cv
95.2371 369.794 95.2709 370.178 95.2769 370.642 cv
95.2904 371.308 li
95.2938 371.529 95.2982 371.773 95.288 371.889 cv
95.2483 372.771 li
95.2474 372.75 95.2498 373.134 95.2461 373.003 cv
95.2407 373.069 li
95.2297 373.2 li
95.2077 373.463 li
95.1629 373.988 li
95.0484 375.386 94.8398 376.786 94.6104 378.175 cv
94.1034 380.952 93.3245 383.687 92.2659 386.276 cv
90.1462 391.465 86.9302 395.996 83.2327 399.458 cv
79.552 402.955 75.5506 405.553 71.6583 407.558 cv
67.7348 409.525 63.9108 410.915 60.3546 411.95 cv
56.8011 412.998 53.4928 413.639 50.5607 414.08 cv
47.6271 414.517 45.0621 414.749 42.9409 414.818 cv
40.8219 414.898 39.1548 414.861 38.0155 414.799 cv
37.4521 414.766 36.9928 414.732 36.7066 414.703 cv
36.4218 414.673 36.2748 414.658 36.2748 414.658 cv
35.7753 414.606 35.4126 414.159 35.4648 413.659 cv
35.5096 413.231 35.8456 412.904 36.2547 412.851 cv
cp
f
89.5007 398.479 mo
89.5007 398.479 89.5813 398.356 89.7325 398.125 cv
89.8881 397.904 90.1165 397.579 90.4072 397.165 cv
90.6867 396.767 91.0261 396.283 91.4154 395.729 cv
91.6144 395.463 91.8139 395.171 92.0186 394.862 cv
92.2326 394.563 92.4509 394.247 92.6652 393.91 cv
93.1164 393.259 93.5579 392.532 94.0208 391.792 cv
94.4585 391.031 94.928 390.261 95.3367 389.437 cv
95.7542 388.621 96.1579 387.782 96.5069 386.92 cv
96.8567 386.058 97.1869 385.188 97.4496 384.299 cv
97.7259 383.415 97.9329 382.516 98.1336 381.629 cv
98.3033 380.735 98.446 379.845 98.5528 378.972 cv
98.6335 378.097 98.7293 377.24 98.7548 376.415 cv
98.7876 375.59 98.8202 374.798 98.8006 374.061 cv
98.8145 373.32 98.7871 372.635 98.7638 372.023 cv
98.7527 371.408 98.7213 370.868 98.6908 370.421 cv
98.6485 369.524 98.6101 369.003 98.6101 369.003 cv
98.6074 368.967 li
98.5058 367.591 99.5386 366.394 100.914 366.292 cv
101.998 366.212 102.972 366.84 103.386 367.781 cv
103.386 367.781 103.619 368.313 103.987 369.272 cv
104.34 370.233 104.787 371.64 105.134 373.403 cv
105.291 374.286 105.429 375.258 105.507 376.299 cv
105.553 377.341 105.601 378.455 105.496 379.609 cv
105.404 380.762 105.246 381.959 104.951 383.154 cv
104.675 384.352 104.263 385.54 103.777 386.691 cv
103.283 387.84 102.672 388.935 101.997 389.949 cv
101.326 390.967 100.566 391.89 99.7763 392.712 cv
98.1978 394.365 96.4863 395.587 94.9491 396.444 cv
93.4085 397.305 92.0435 397.809 91.0581 398.105 cv
90.0801 398.376 89.5007 398.479 89.5007 398.479 cv
cp
f
70.5399 412.723 mo
70.5399 412.723 72.4195 411.785 75.2463 410.686 cv
78.07 409.56 81.8418 408.248 85.4171 406.877 cv
86.2971 406.506 87.1933 406.189 88.0303 405.811 cv
88.8828 405.454 89.6851 405.07 90.465 404.711 cv
91.2278 404.328 91.9644 403.969 92.6287 403.585 cv
93.3161 403.236 93.9064 402.827 94.4825 402.497 cv
95.0238 402.117 95.5513 401.816 95.9745 401.486 cv
96.4009 401.16 96.7958 400.911 97.0899 400.658 cv
97.6945 400.177 98.04 399.902 98.04 399.902 cv
98.1977 399.777 li
99.7089 398.575 101.909 398.825 103.111 400.336 cv
104.3 401.831 104.065 404.001 102.598 405.211 cv
102.598 405.211 102.17 405.564 101.42 406.183 cv
101.054 406.503 100.557 406.828 100.008 407.227 cv
99.4673 407.639 98.7967 408.013 98.0913 408.458 cv
97.3646 408.858 96.5775 409.31 95.7152 409.693 cv
94.8588 410.101 93.9396 410.465 92.9837 410.817 cv
92.0242 411.141 91.032 411.475 90.0143 411.715 cv
88.9998 411.988 87.9728 412.202 86.9399 412.391 cv
85.911 412.565 84.8834 412.733 83.8716 412.829 cv
82.8626 412.962 81.8682 413.012 80.9093 413.082 cv
78.9897 413.183 77.2048 413.197 75.6696 413.143 cv
74.1332 413.09 72.8556 413.003 71.9557 412.894 cv
71.0577 412.804 70.5399 412.723 70.5399 412.723 cv
cp
f
63.5052 387.707 mo
63.5052 387.707 63.6089 388.119 63.7256 388.819 cv
63.7385 389.168 63.7615 389.63 63.7383 390.151 cv
63.7093 390.406 63.6786 390.678 63.6461 390.965 cv
63.595 391.249 63.5177 391.544 63.4425 391.861 cv
63.0978 393.099 62.3791 394.543 61.1784 395.784 cv
60.0016 397.047 58.3762 398.05 56.654 398.627 cv
54.93 399.209 53.1297 399.396 51.4898 399.275 cv
49.8451 399.163 48.3528 398.763 47.1227 398.23 cv
45.8873 397.701 44.9258 397.019 44.262 396.449 cv
43.9317 396.148 43.6886 395.899 43.5165 395.698 cv
43.3507 395.505 43.2622 395.402 43.2622 395.402 cv
42.408 394.41 42.5197 392.913 43.5119 392.059 cv
44.0839 391.567 44.8237 391.395 45.5115 391.529 cv
46.5599 391.738 li
46.5599 391.738 46.7681 391.78 47.1324 391.853 cv
47.5215 391.947 48.1763 392.041 48.9827 392.139 cv
50.6104 392.326 52.8619 392.386 54.9096 392.084 cv
55.4244 392.008 55.9252 391.904 56.4283 391.795 cv
56.9103 391.654 57.4208 391.543 57.8881 391.355 cv
58.1304 391.272 58.3577 391.168 58.6012 391.078 cv
58.8236 390.965 59.0592 390.862 59.2906 390.751 cv
59.7355 390.513 60.1825 390.263 60.5898 389.99 cv
61.4124 389.442 62.13 388.875 62.6469 388.446 cv
63.1695 387.968 63.5052 387.707 63.5052 387.707 cv
cp
f
307.965 155.28 mo
301.457 138.862 280.051 135.796 267.976 149.143 cv
259.859 158.114 259.52 169.461 266.378 168.394 cv
264.307 175.469 271.555 178.92 271.555 175.469 cv
271.555 175.469 272.245 179.438 277.767 180.819 cv
281.871 181.845 285.112 179.521 283.807 178.403 cv
281.547 176.466 281.368 173.187 282.725 170.993 cv
282.73 170.986 282.734 170.979 282.738 170.972 cv
283.558 169.659 284.931 168.739 286.74 168.739 cv
286.74 168.731 286.74 168.723 286.74 168.715 cv
292.478 169.46 297.59 183.396 273.988 191.194 cv
301.926 191.194 313.823 170.056 307.965 155.28 cv
cp
f
265.315 192.965 mo
265.315 192.965 265.553 193.015 266 193.109 cv
266.448 193.209 267.104 193.338 267.929 193.48 cv
268.757 193.616 269.766 193.791 270.923 193.92 cv
272.077 194.067 273.385 194.165 274.802 194.22 cv
276.219 194.278 277.752 194.273 279.358 194.153 cv
280.161 194.09 280.983 194.047 281.817 193.922 cv
282.652 193.82 283.501 193.721 284.355 193.537 cv
285.21 193.381 286.077 193.223 286.938 192.98 cv
287.802 192.755 288.68 192.567 289.542 192.272 cv
291.283 191.77 293.005 191.105 294.691 190.382 cv
295.52 189.977 296.368 189.63 297.17 189.187 cv
297.962 188.726 298.751 188.266 299.533 187.811 cv
300.309 187.35 301.032 186.798 301.787 186.344 cv
302.343 185.99 li
302.622 185.818 li
303.015 185.588 li
303.411 185.349 303.813 185.129 304.209 184.905 cv
304.61 184.691 305.004 184.472 305.405 184.274 cv
305.862 184.065 306.348 183.87 306.815 183.683 cv
307.284 183.491 307.756 183.321 308.217 183.152 cv
308.684 183.027 309.145 182.903 309.6 182.78 cv
311.401 182.277 313.247 182.103 314.928 182.103 cv
316.638 182.17 318.197 182.409 319.517 182.918 cv
320.177 183.117 320.766 183.458 321.294 183.714 cv
321.81 184.047 322.269 184.329 322.647 184.657 cv
323.418 185.269 323.897 185.887 324.187 186.316 cv
324.474 186.742 324.586 187.026 324.586 187.026 cv
324.661 187.214 324.568 187.427 324.38 187.501 cv
324.289 187.537 324.191 187.534 324.107 187.499 cv
324.07 187.484 li
324.07 187.484 323.863 187.398 323.431 187.267 cv
323.002 187.145 322.386 186.979 321.604 186.9 cv
320.834 186.799 319.904 186.802 318.886 186.911 cv
317.875 186.983 316.745 187.287 315.562 187.607 cv
314.368 188.02 313.104 188.463 311.775 189.116 cv
311.444 189.27 311.108 189.426 310.768 189.584 cv
310.443 189.753 310.127 189.942 309.795 190.104 cv
309.464 190.275 309.138 190.431 308.785 190.598 cv
308.399 190.821 307.998 191.029 307.598 191.244 cv
307.192 191.45 306.787 191.663 306.369 191.861 cv
305.963 192.049 305.554 192.238 305.143 192.429 cv
304.24 192.844 303.329 193.257 302.38 193.614 cv
301.428 193.957 300.469 194.303 299.505 194.65 cv
298.531 194.956 297.552 195.263 296.573 195.571 cv
294.609 196.148 292.621 196.648 290.633 196.972 cv
289.649 197.173 288.656 197.287 287.675 197.379 cv
286.7 197.503 285.727 197.537 284.774 197.57 cv
283.824 197.63 282.886 197.604 281.972 197.58 cv
281.059 197.583 280.167 197.499 279.303 197.419 cv
277.577 197.264 275.962 197.003 274.493 196.698 cv
273.024 196.401 271.701 196.035 270.547 195.676 cv
269.387 195.334 268.405 194.967 267.597 194.655 cv
266.787 194.341 266.167 194.085 265.751 193.9 cv
265.331 193.719 265.107 193.623 265.107 193.623 cv
264.931 193.548 264.849 193.344 264.925 193.168 cv
264.991 193.014 265.156 192.932 265.315 192.965 cv
cp
f
308.26 179.239 mo
308.26 179.239 308.445 178.91 308.798 178.377 cv
308.963 178.099 309.2 177.791 309.438 177.429 cv
309.666 177.066 309.895 176.64 310.17 176.23 cv
310.433 175.803 310.694 175.312 310.983 174.834 cv
311.256 174.341 311.516 173.817 311.785 173.295 cv
312.021 172.753 312.289 172.221 312.489 171.66 cv
312.721 171.115 312.883 170.541 313.071 169.994 cv
313.213 169.425 313.38 168.88 313.476 168.32 cv
313.608 167.776 313.671 167.219 313.758 166.693 cv
313.817 166.154 313.881 165.64 313.91 165.134 cv
313.957 164.64 313.96 164.146 313.986 163.704 cv
314.006 162.799 314.01 162.024 314.003 161.471 cv
313.999 160.913 313.996 160.594 313.996 160.594 cv
313.995 160.515 li
313.98 158.614 315.508 157.061 317.41 157.045 cv
319.292 157.03 320.835 158.532 320.879 160.408 cv
320.879 160.408 320.887 160.776 320.902 161.418 cv
320.904 162.066 320.888 163.008 320.791 164.158 cv
320.711 164.74 320.668 165.362 320.523 166.033 cv
320.415 166.7 320.226 167.404 320.028 168.126 cv
319.791 168.844 319.548 169.584 319.204 170.306 cv
318.895 171.036 318.474 171.737 318.055 172.418 cv
317.612 173.09 317.144 173.735 316.615 174.31 cv
316.135 174.92 315.53 175.401 315.014 175.902 cv
314.44 176.349 313.898 176.781 313.348 177.13 cv
312.782 177.465 312.276 177.786 311.757 178.029 cv
311.245 178.282 310.753 178.464 310.341 178.64 cv
309.926 178.801 309.559 178.903 309.245 178.986 cv
308.629 179.162 308.26 179.239 308.26 179.239 cv
cp
f
407.554 170.773 mo
407.129 162.165 414.2 157.35 419.881 164.078 cv
418.606 150.687 399.478 146.383 391.402 157.861 cv
386.736 164.492 385.901 170.804 382.585 176.151 cv
379.532 174.177 377.092 173.183 376.906 169.416 cv
376.583 162.882 381.95 159.228 386.262 164.334 cv
385.294 154.171 370.776 150.904 364.646 159.615 cv
358.517 168.327 361.098 176.312 347.547 181.031 cv
356.203 185.396 365.665 181.191 377.703 181.549 cv
375.513 183.231 372.677 184.751 368.874 186.076 cv
383.801 193.604 400.541 181.772 424.344 189.423 cv
417.331 176.989 407.979 179.381 407.554 170.773 cv
cp
f
418.181 156.267 mo
423.635 163.44 419.597 168.78 423.703 170.102 cv
429.558 171.986 427.957 157.223 418.181 156.267 cv
cp
f
95.4565 87.8641 mo
80.2847 79.4353 69.4958 86.8526 47.2438 88.2013 cv
29.5016 58.8353 86.3897 31.4405 86.4153 62.2804 cv
83.3587 54.6387 71.2351 54.8718 74.553 65.2749 cv
76.9116 72.6697 92.7592 75.7266 95.4565 87.8641 cv
cp
f
42.6365 71.5223 mo
44.0347 56.9517 52.7421 47.6277 64.4468 42.8779 cv
70.4811 40.4291 66.2381 35.0744 61.2196 37.2441 cv
55.7552 39.6068 38.9134 49.1464 42.6365 71.5223 cv
cp
f
59.481 49.7855 mo
70.7969 43.3219 82.0493 44.8684 91.5135 50.9433 cv
96.3928 54.0751 98.1091 48.2398 93.9545 45.7036 cv
89.4305 42.9419 73.8449 35.5896 59.481 49.7855 cv
cp
f
174.178 187.266 mo
174.178 187.266 174.93 187.41 176.341 187.678 cv
177.747 187.941 179.813 188.343 182.404 188.701 cv
184.989 188.997 188.155 189.311 191.434 188.639 cv
192.251 188.479 193.065 188.234 193.872 187.934 cv
194.685 187.652 195.481 187.271 196.265 186.83 cv
197.83 185.941 199.337 184.751 200.762 183.299 cv
202.15 181.838 203.582 180.1 204.762 178.27 cv
205.823 176.585 206.76 174.536 207.285 172.426 cv
207.804 170.294 208.009 168.034 207.814 165.762 cv
207.612 163.491 206.99 161.226 206.008 159.109 cv
205.021 156.991 203.616 155.051 201.9 153.394 cv
201.469 152.982 201.02 152.586 200.552 152.208 cv
199.785 151.628 li
199.571 151.497 199.408 151.37 199.161 151.223 cv
198.198 150.627 197.168 150.141 196.091 149.783 cv
193.936 149.076 191.596 148.854 189.321 149.216 cv
187.052 149.583 184.873 150.481 183.017 151.835 cv
182.094 152.519 181.251 153.313 180.506 154.201 cv
180.229 154.552 li
180.07 154.76 li
179.982 154.89 li
179.869 155.038 179.722 155.279 179.578 155.502 cv
179.312 155.959 179.061 156.425 178.85 156.911 cv
178.02 158.856 177.808 161.073 178.239 163.155 cv
178.649 165.242 179.678 167.183 181.188 168.672 cv
181.279 168.769 181.376 168.859 181.476 168.947 cv
181.623 169.082 li
181.696 169.149 li
181.673 169.132 181.798 169.235 181.655 169.12 cv
181.708 169.163 li
182.126 169.502 li
182.34 169.661 li
182.715 169.932 183.133 170.186 183.559 170.391 cv
184.416 170.806 185.352 171.063 186.307 171.149 cv
188.218 171.303 190.184 170.802 191.742 169.711 cv
192.132 169.439 192.503 169.138 192.844 168.802 cv
193.093 168.544 li
193.156 168.479 li
193.189 168.44 192.971 168.721 193.083 168.578 cv
193.122 168.528 li
193.28 168.331 li
193.594 167.936 li
193.671 167.84 li
193.698 167.791 li
193.757 167.694 li
193.837 167.577 193.939 167.457 194.04 167.244 cv
194.151 167.062 194.248 166.873 194.322 166.673 cv
194.417 166.481 194.485 166.28 194.543 166.074 cv
194.621 165.874 194.658 165.664 194.702 165.454 cv
195.044 163.771 194.659 161.962 193.709 160.556 cv
193.465 160.208 193.199 159.873 192.894 159.571 cv
192.785 159.453 li
193.002 159.618 192.82 159.478 192.857 159.506 cv
192.814 159.47 li
192.727 159.398 li
192.38 159.112 li
192.236 158.987 192.235 159.013 192.163 158.956 cv
191.998 158.829 li
191.352 158.432 190.622 158.162 189.859 158.073 cv
188.321 157.869 186.77 158.441 185.643 159.441 cv
185.06 159.972 184.695 160.469 184.451 161.127 cv
184.215 161.765 184.115 162.465 184.198 163.138 cv
184.333 164.471 185.166 165.733 186.13 166.397 cv
187.13 167.069 188.42 167.17 189.454 166.804 cv
190.477 166.464 191.346 165.672 191.712 164.916 cv
192.117 164.106 192.14 163.248 191.989 162.601 cv
191.674 161.27 190.955 160.759 191.002 160.749 cv
191.002 160.749 191.166 160.846 191.452 161.09 cv
191.733 161.334 192.147 161.745 192.46 162.442 cv
192.774 163.126 192.982 164.121 192.69 165.267 cv
192.618 165.555 192.519 165.833 192.358 166.145 cv
192.278 166.315 192.209 166.415 192.136 166.544 cv
192.08 166.638 li
191.987 166.763 li
191.836 166.963 li
191.417 167.494 190.86 167.987 190.175 168.368 cv
188.822 169.139 186.881 169.419 184.999 168.628 cv
184.767 168.533 184.486 168.378 184.267 168.256 cv
184.004 168.095 li
183.937 168.055 li
183.904 168.035 li
183.869 168.009 183.936 168.064 183.817 167.972 cv
183.666 167.856 li
183.259 167.552 182.865 167.201 182.519 166.79 cv
181.819 165.975 181.263 164.965 180.948 163.83 cv
180.628 162.697 180.581 161.435 180.832 160.173 cv
181.062 158.92 181.727 157.604 182.552 156.617 cv
184.196 154.552 186.947 153.062 189.987 153.029 cv
191.498 153.001 193.078 153.303 194.537 153.995 cv
195.14 154.321 li
195.318 154.423 195.59 154.576 195.679 154.641 cv
196.055 154.888 li
196.149 154.95 li
196.196 154.981 li
196.263 155.032 196.113 154.912 196.357 155.103 cv
196.583 155.288 li
197.197 155.769 197.766 156.323 198.297 156.927 cv
200.417 159.351 201.584 162.791 201.241 166.292 cv
201.198 166.729 201.15 167.168 201.049 167.601 cv
200.967 168.038 200.863 168.472 200.719 168.897 cv
200.596 169.33 200.437 169.752 200.251 170.166 cv
200.094 170.568 199.858 171.023 199.589 171.477 cv
199.392 171.813 li
199.291 171.98 li
199.219 172.087 li
198.934 172.503 li
198.792 172.712 li
198.756 172.765 li
198.843 172.656 198.6 172.969 198.605 172.963 cv
198.502 173.09 li
198.086 173.596 li
197.513 174.261 196.874 174.881 196.184 175.449 cv
193.429 177.742 189.742 179.062 185.962 178.97 cv
184.075 178.927 182.166 178.543 180.369 177.815 cv
179.467 177.45 178.605 177.01 177.768 176.476 cv
177.087 176.009 li
176.641 175.677 li
176.44 175.519 li
176.306 175.408 li
176.038 175.185 li
175.858 175.037 175.681 174.885 175.511 174.725 cv
172.734 172.221 170.669 168.799 169.786 165.048 cv
168.902 161.301 169.163 157.241 170.609 153.577 cv
170.975 152.665 171.401 151.774 171.901 150.925 cv
172.159 150.507 172.405 150.099 172.74 149.635 cv
172.978 149.3 li
173.163 149.056 li
173.587 148.512 li
174.776 147.064 176.144 145.749 177.652 144.615 cv
183.69 140.007 192.021 138.856 199.004 141.375 cv
200.748 142.003 202.406 142.84 203.933 143.846 cv
204.315 144.089 204.742 144.411 205.138 144.696 cv
206.114 145.478 li
206.778 146.043 207.416 146.635 208.027 147.252 cv
210.456 149.737 212.348 152.672 213.64 155.767 cv
216.249 161.977 216.28 168.812 214.348 174.537 cv
213.872 175.973 213.268 177.34 212.583 178.63 cv
211.886 179.942 211.154 181.09 210.22 182.285 cv
209.714 182.954 209.477 183.191 208.924 183.831 cv
208.471 184.304 208.042 184.782 207.571 185.229 cv
206.671 186.147 205.691 186.984 204.707 187.768 cv
202.707 189.311 200.568 190.601 198.341 191.41 cv
196.132 192.247 193.89 192.631 191.844 192.646 cv
187.728 192.696 184.447 191.695 181.896 190.759 cv
179.334 189.824 177.439 188.895 176.144 188.264 cv
175.496 187.952 175.006 187.7 174.678 187.526 cv
174.348 187.355 174.178 187.266 174.178 187.266 cv
cp
f
147.062 195.504 mo
147.062 195.504 147.267 195.28 147.653 194.858 cv
148.05 194.456 148.613 193.833 149.368 193.106 cv
149.771 192.756 150.236 192.384 150.748 191.972 cv
151.259 191.559 151.827 191.105 152.465 190.709 cv
153.101 190.296 153.784 189.855 154.535 189.429 cv
155.301 189.038 156.12 188.632 156.998 188.236 cv
158.783 187.537 160.816 186.861 163.067 186.562 cv
165.309 186.204 167.743 186.178 170.172 186.452 cv
172.607 186.705 175.052 187.243 177.354 187.939 cv
179.675 188.604 181.882 189.422 183.997 190.118 cv
186.097 190.862 188.108 191.482 190.008 191.927 cv
190.958 192.107 191.892 192.293 192.803 192.397 cv
193.264 192.483 193.71 192.469 194.161 192.5 cv
194.387 192.51 194.611 192.523 194.837 192.545 cv
195.503 192.529 li
196.398 192.564 197.264 192.4 198.145 192.341 cv
198.581 192.277 199.011 192.176 199.443 192.1 cv
200.088 191.979 li
200.723 191.805 li
201.15 191.69 201.571 191.578 201.986 191.467 cv
202.404 191.351 202.798 191.166 203.208 191.039 cv
203.617 190.898 204.019 190.759 204.413 190.623 cv
204.8 190.454 205.175 190.277 205.558 190.123 cv
205.94 189.963 206.315 189.807 206.681 189.655 cv
207.048 189.498 207.385 189.298 207.736 189.139 cv
208.436 188.798 209.099 188.475 209.722 188.171 cv
210.938 187.489 212.068 186.943 212.966 186.431 cv
213.856 185.911 214.604 185.538 215.098 185.263 cv
215.609 185.003 215.882 184.864 215.882 184.864 cv
215.882 184.864 215.746 185.137 215.465 185.631 cv
215.177 186.117 214.777 186.859 214.205 187.759 cv
213.642 188.668 212.844 189.678 211.933 190.873 cv
210.943 191.99 209.845 193.303 208.394 194.524 cv
208.044 194.845 207.671 195.153 207.295 195.478 cv
206.891 195.773 206.478 196.074 206.059 196.38 cv
205.633 196.684 205.206 197.001 204.737 197.281 cv
204.258 197.552 203.773 197.828 203.28 198.108 cv
203.03 198.245 202.784 198.395 202.523 198.523 cv
202.255 198.637 201.984 198.753 201.712 198.869 cv
201.163 199.096 200.612 199.345 200.036 199.558 cv
198.863 199.941 197.642 200.297 196.354 200.497 cv
193.797 200.94 191.054 200.956 188.449 200.551 cv
185.833 200.181 183.381 199.424 181.076 198.665 cv
178.786 197.852 176.634 197.026 174.604 196.247 cv
173.602 195.886 172.609 195.529 171.627 195.176 cv
170.661 194.872 169.706 194.56 168.779 194.318 cv
166.914 193.821 165.111 193.459 163.357 193.331 cv
161.601 193.134 159.903 193.204 158.289 193.285 cv
157.484 193.35 156.713 193.476 155.956 193.541 cv
155.204 193.638 154.504 193.809 153.816 193.908 cv
152.453 194.138 151.308 194.473 150.279 194.664 cv
149.277 194.967 148.458 195.154 147.914 195.304 cv
147.358 195.435 147.062 195.504 147.062 195.504 cv
cp
f
193.636 181.611 mo
193.636 181.611 193.944 181.374 194.502 181.019 cv
194.642 180.931 194.797 180.833 194.965 180.727 cv
195.117 180.601 195.286 180.487 195.46 180.356 cv
195.811 180.1 196.193 179.826 196.594 179.473 cv
196.796 179.309 197.006 179.139 197.224 178.962 cv
197.426 178.771 197.635 178.573 197.85 178.37 cv
198.3 177.999 198.678 177.502 199.127 177.071 cv
199.511 176.57 199.955 176.108 200.315 175.561 cv
200.716 175.048 201.04 174.473 201.397 173.92 cv
201.698 173.335 202.034 172.766 202.28 172.163 cv
202.572 171.578 202.755 170.964 202.996 170.381 cv
203.147 169.778 203.389 169.202 203.486 168.627 cv
203.556 168.34 203.623 168.061 203.688 167.79 cv
203.733 167.514 203.776 167.247 203.818 166.99 cv
203.926 166.472 203.972 165.988 204.019 165.551 cv
204.071 165.113 204.117 164.723 204.119 164.402 cv
204.153 163.755 204.203 163.36 204.203 163.36 cv
204.203 163.36 204.406 163.68 204.707 164.286 cv
204.782 164.44 204.864 164.609 204.954 164.794 cv
205.029 164.983 205.088 165.192 205.163 165.417 cv
205.313 165.866 205.486 166.381 205.563 166.963 cv
205.608 167.255 205.656 167.56 205.705 167.875 cv
205.717 168.194 205.729 168.524 205.741 168.863 cv
205.786 169.549 205.667 170.26 205.592 171.009 cv
205.427 171.736 205.297 172.513 204.994 173.244 cv
204.758 174.004 204.363 174.709 204.002 175.428 cv
203.557 176.099 203.141 176.792 202.6 177.374 cv
202.114 177.999 201.508 178.501 200.959 179.004 cv
200.347 179.442 199.789 179.899 199.171 180.202 cv
198.871 180.359 198.579 180.513 198.296 180.661 cv
197.999 180.776 197.711 180.886 197.435 180.993 cv
196.898 181.214 196.349 181.327 195.881 181.423 cv
195.646 181.471 195.433 181.524 195.231 181.552 cv
195.032 181.565 194.85 181.576 194.685 181.586 cv
194.024 181.623 193.636 181.611 193.636 181.611 cv
cp
f
217.123 168.181 mo
217.123 168.181 217.117 167.729 217.106 166.882 cv
217.101 166.458 217.094 165.936 217.086 165.322 cv
217.062 164.71 216.948 164.027 216.87 163.257 cv
216.821 162.873 216.788 162.468 216.721 162.047 cv
216.629 161.627 216.533 161.188 216.434 160.729 cv
216.337 160.273 216.236 159.797 216.131 159.304 cv
215.979 158.823 215.821 158.325 215.658 157.811 cv
215.058 155.74 213.983 153.545 212.656 151.281 cv
211.239 149.062 209.426 146.855 207.213 144.85 cv
204.976 142.873 202.312 141.157 199.356 139.886 cv
196.398 138.629 193.146 137.785 189.792 137.604 cv
189.48 137.571 li
189.387 137.565 189.562 137.573 189.529 137.573 cv
189.487 137.573 li
189.403 137.573 li
189.236 137.572 li
188.567 137.571 li
187.227 137.568 li
186.398 137.633 185.638 137.722 184.834 137.814 cv
184.025 138.001 183.199 138.106 182.406 138.35 cv
181.62 138.617 180.805 138.789 180.055 139.151 cv
176.997 140.415 174.235 142.346 172.089 144.741 cv
169.961 147.156 168.422 149.945 167.456 152.796 cv
166.48 155.627 166.032 158.632 166.171 161.314 cv
166.18 161.943 166.33 162.637 166.393 163.288 cv
166.557 163.927 166.666 164.578 166.866 165.19 cv
167.239 166.424 167.688 167.611 168.29 168.667 cv
169.448 170.807 170.923 172.577 172.459 173.92 cv
173.982 175.283 175.552 176.241 176.92 176.882 cv
177.265 177.045 177.591 177.199 177.898 177.344 cv
178.217 177.463 178.517 177.575 178.795 177.679 cv
179.077 177.784 179.338 177.881 179.577 177.97 cv
179.823 178.04 180.046 178.103 180.246 178.159 cv
181.057 178.387 181.49 178.508 181.49 178.508 cv
181.516 178.515 li
181.649 178.553 181.727 178.692 181.69 178.825 cv
181.659 178.935 181.56 179.007 181.452 179.009 cv
181.452 179.009 180.989 179.016 180.121 179.03 cv
179.902 179.03 179.655 179.042 179.385 179.034 cv
179.117 179.005 178.825 178.975 178.509 178.941 cv
178.189 178.907 177.846 178.869 177.48 178.83 cv
177.116 178.771 176.738 178.672 176.332 178.583 cv
175.507 178.431 174.642 178.112 173.677 177.782 cv
172.755 177.369 171.731 176.932 170.731 176.291 cv
168.717 175.049 166.606 173.256 164.887 170.799 cv
163.165 168.351 161.771 165.304 161.337 161.77 cv
161.241 160.864 161.113 159.854 161.145 159.123 cv
161.147 158.524 li
161.149 158.223 li
161.149 158.072 li
161.15 157.997 li
161.162 157.788 li
161.208 157.345 161.255 156.9 161.302 156.452 cv
161.352 156.004 161.402 155.554 161.453 155.101 cv
161.552 154.656 161.652 154.209 161.752 153.759 cv
161.859 153.311 161.95 152.856 162.074 152.408 cv
162.221 151.967 162.369 151.523 162.518 151.078 cv
163.766 147.537 165.9 144.184 168.709 141.472 cv
171.533 138.779 174.946 136.651 178.654 135.388 cv
179.56 135.013 180.531 134.837 181.469 134.576 cv
182.414 134.338 183.39 134.248 184.345 134.084 cv
185.329 134.008 186.363 133.952 187.32 133.934 cv
188.659 133.999 li
189.327 134.032 li
189.751 134.056 li
190.1 134.107 li
193.849 134.474 197.421 135.64 200.597 137.211 cv
203.769 138.805 206.578 140.827 208.844 143.13 cv
211.091 145.452 212.863 147.94 214.204 150.387 cv
215.454 152.88 216.418 155.254 216.903 157.456 cv
217.036 158.002 217.165 158.53 217.29 159.04 cv
217.365 159.559 217.437 160.059 217.506 160.54 cv
217.573 161.02 217.637 161.48 217.697 161.92 cv
217.734 162.364 217.736 162.793 217.755 163.196 cv
217.775 164.002 217.834 164.725 217.81 165.34 cv
217.77 165.953 217.736 166.475 217.709 166.897 cv
217.654 167.743 217.625 168.194 217.625 168.194 cv
217.616 168.332 217.497 168.437 217.358 168.428 cv
217.227 168.42 217.125 168.31 217.123 168.181 cv
cp
f
301.481 301.675 mo
323.588 299.062 322.384 271.406 307.712 267.185 cv
293.041 262.965 284.801 276.832 291.031 283.063 cv
288.62 278.038 296.659 270.401 303.894 276.832 cv
312.391 284.385 302.487 297.131 291.232 289.896 cv
281.49 283.633 265.508 281.254 255.861 296.327 cv
270.234 282.353 277.304 290.209 285.918 296.463 cv
274.791 292.517 269.966 299.517 264.989 303.506 cv
279.937 295.288 284.212 306.849 296.248 309.022 cv
305.234 310.645 314.468 303.84 317.31 296.987 cv
316.102 298.949 309.03 306.77 296.221 301.496 cv
297.858 301.809 299.6 301.897 301.481 301.675 cv
cp
f
280.116 257.173 mo
270.373 265.078 268.924 272.21 257.066 273.818 cv
262.895 276.229 276.963 276.43 280.581 274.019 cv
280.38 276.631 283.595 282.661 289.223 284.067 cv
284.399 279.847 285.697 265.478 299.706 264 cv
316.671 262.209 319.57 276.832 319.972 277.033 cv
320.575 247.892 290.768 248.531 280.116 257.173 cv
cp
f
260.101 263.66 mo
267.059 265.021 271.597 261.088 274.117 259.032 cv
274.117 259.032 266.454 261.996 259.95 258.819 cv
255.431 256.613 252.127 262.1 260.101 263.66 cv
cp
f
325.469 272.468 mo
321.095 275.949 321.136 280.684 321.083 283.248 cv
321.083 283.248 322.454 278.293 327.975 276.846 cv
332.736 275.598 330.481 268.478 325.469 272.468 cv
cp
f
97.4474 274.999 mo
92.693 274.757 92.4281 266.517 97.2889 266.517 cv
94.861 263.342 93.4897 261.719 90.3565 261.719 cv
84.5743 261.719 81.8167 274.999 77.179 274.999 cv
71.6941 274.999 72.1597 266.517 77.0204 266.517 cv
74.8326 263.656 72.82 261.719 70.066 261.719 cv
64.2838 261.719 61.5263 274.999 56.8885 274.999 cv
51.4037 274.999 51.8693 266.517 56.73 266.517 cv
45.6311 252.003 42.7771 274.999 36.5934 274.999 cv
36.5934 274.999 39.4916 281.623 66.9863 277.907 cv
91.1945 274.635 97.4474 274.999 97.4474 274.999 cv
cp
f
34.8983 275.816 mo
42.4551 282.902 55.2699 281.462 68.9918 279.454 cv
86.3362 276.917 97.2799 275.565 102.769 275.816 cv
94.8485 276.133 78.4849 286.38 69.7307 288.533 cv
53.734 292.468 40.7036 288.489 34.8983 275.816 cv
cp
f
61.8099 293.931 mo
84.215 291.567 103.341 268.718 103.503 289.791 cv
98.2257 283.768 80.0706 296.692 61.8099 293.931 cv
cp
f
141.021 400.405 mo
153.242 381.735 167.776 387.826 181.418 375.964 cv
197.033 362.385 208.915 364.761 214.346 374.606 cv
205.44 367.063 186.17 385.129 219.438 395.313 cv
206.539 403.121 195.083 398.241 183.454 396.332 cv
160.71 392.598 141.021 400.405 141.021 400.405 cv
cp
f
217.101 381.569 mo
216.051 374.082 209.511 372.529 205.906 374.425 cv
205.929 375.071 205.888 375.844 205.749 376.772 cv
205.524 378.282 206.21 379.328 207.111 379.805 cv
206.015 382.289 208.672 384.487 210.413 382.97 cv
210.229 388.563 218.214 389.506 217.101 381.569 cv
cp
f
222.353 386.684 mo
222.524 381.37 219.066 378.484 217.241 376.867 cv
217.241 376.867 220.357 382.182 218.788 387.378 cv
217.698 390.988 222.157 392.774 222.353 386.684 cv
cp
f
221.241 375.975 mo
217.841 376.089 215.992 373.88 214.955 372.714 cv
214.955 372.714 217.546 374.467 220.674 372.958 cv
223.371 371.656 225.137 375.844 221.241 375.975 cv
cp
f
159.905 406.409 mo
159.905 406.409 160.102 406.256 160.471 405.969 cv
160.851 405.7 161.375 405.255 162.105 404.785 cv
162.851 404.337 163.752 403.705 164.859 403.177 cv
165.95 402.6 167.236 402.04 168.691 401.543 cv
170.143 401.028 171.777 400.631 173.532 400.335 cv
175.286 400.074 177.169 399.902 179.091 399.929 cv
181.012 399.94 182.975 400.083 184.917 400.305 cv
186.863 400.511 188.78 400.807 190.661 401.022 cv
192.538 401.268 194.379 401.432 196.169 401.515 cv
197.962 401.591 199.699 401.527 201.383 401.354 cv
203.069 401.2 204.682 400.864 206.221 400.501 cv
207.751 400.104 209.204 399.66 210.532 399.168 cv
211.871 398.699 213.076 398.174 214.167 397.728 cv
215.249 397.242 216.193 396.818 216.971 396.47 cv
218.506 395.71 219.437 395.314 219.437 395.314 cv
219.437 395.314 218.793 396.071 217.573 397.328 cv
216.944 397.932 216.171 398.666 215.237 399.46 cv
214.281 400.225 213.186 401.084 211.894 401.901 cv
210.612 402.733 209.141 403.528 207.511 404.253 cv
205.867 404.936 204.069 405.582 202.132 405.967 cv
200.207 406.371 198.161 406.629 196.112 406.626 cv
194.06 406.659 192.008 406.482 190.014 406.25 cv
188.022 405.99 186.083 405.674 184.223 405.361 cv
182.36 405.061 180.564 404.78 178.833 404.581 cv
177.101 404.378 175.441 404.297 173.852 404.274 cv
173.061 404.28 172.285 404.279 171.537 404.335 cv
170.784 404.353 170.061 404.433 169.362 404.507 cv
168.656 404.552 167.994 404.684 167.35 404.77 cv
166.702 404.841 166.103 404.985 165.527 405.089 cv
164.367 405.286 163.392 405.549 162.549 405.728 cv
160.882 406.177 159.905 406.409 159.905 406.409 cv
cp
f
326.388 395.765 mo
319.183 395.84 327.239 378.216 313.586 373.237 cv
302.747 369.284 299.655 379.58 299.579 383.903 cv
299.503 388.226 305.389 389.738 308.043 387.311 cv
311.684 387.994 307.437 382.229 311.38 381.244 cv
315.324 380.258 315.173 388.297 309.333 393.303 cv
304.564 397.39 295.444 393.658 296.416 387.016 cv
297.535 379.374 293.662 367.089 279.754 368.274 cv
257.368 370.182 264.661 392.999 268.529 393.606 cv
272.397 394.213 275.203 390.876 276.341 389.131 cv
277.327 389.51 280.361 390.117 279.678 383.898 cv
278.995 377.679 286.504 378.892 286.883 387.463 cv
287.262 396.033 275.658 403.314 261.703 396.564 cv
261.703 396.564 268.681 406.044 283.091 403.693 cv
297.501 401.342 301.413 401.218 310.243 402.025 cv
321.528 403.055 326.388 395.765 326.388 395.765 cv
cp
f
256.562 398.681 mo
256.562 398.681 256.77 398.933 257.2 399.29 cv
257.638 399.657 258.341 400.114 259.254 400.643 cv
261.102 401.67 263.866 402.926 267.28 403.898 cv
268.981 404.389 270.844 404.812 272.806 405.042 cv
273.784 405.172 274.789 405.247 275.804 405.25 cv
276.819 405.277 277.843 405.215 278.861 405.087 cv
279.882 404.971 280.887 404.748 281.871 404.453 cv
282.363 404.305 282.844 404.127 283.32 403.935 cv
283.564 403.852 283.79 403.728 284.024 403.622 cv
284.792 403.256 li
287.022 402.131 289.513 401.153 292.079 400.487 cv
294.659 399.827 297.396 399.517 300.074 399.683 cv
302.751 399.846 305.319 400.475 307.576 401.268 cv
309.848 402.039 311.849 402.909 313.693 403.42 cv
315.534 403.948 317.234 404.093 318.852 403.84 cv
320.46 403.584 321.964 403.025 323.246 402.376 cv
324.525 401.721 325.638 401.059 326.523 400.463 cv
327.404 399.861 328.114 399.386 328.578 399.039 cv
329.051 398.7 329.304 398.519 329.304 398.519 cv
329.304 398.519 329.121 398.771 328.779 399.244 cv
328.423 399.705 327.912 400.4 327.176 401.214 cv
326.442 402.029 325.521 403.016 324.285 403.987 cv
323.063 404.965 321.529 405.994 319.561 406.658 cv
317.606 407.339 315.213 407.495 312.928 407.128 cv
310.631 406.784 308.443 406.096 306.301 405.559 cv
304.154 405.02 302.032 404.637 299.869 404.601 cv
297.712 404.569 295.52 404.851 293.344 405.421 cv
291.151 405.984 289.044 406.803 286.914 407.764 cv
286.033 408.144 li
285.714 408.275 285.401 408.422 285.074 408.525 cv
284.105 408.854 li
283.124 409.108 li
281.816 409.406 280.509 409.62 279.231 409.656 cv
276.673 409.766 274.255 409.437 272.072 408.882 cv
269.883 408.328 267.92 407.553 266.187 406.712 cv
264.453 405.872 262.96 404.937 261.7 404.034 cv
260.43 403.146 259.41 402.254 258.624 401.469 cv
257.829 400.692 257.298 399.985 256.974 399.489 cv
256.816 399.227 256.706 399.032 256.653 398.891 cv
256.593 398.752 256.562 398.681 256.562 398.681 cv
cp
f
278.757 413.906 mo
278.757 413.906 278.917 413.85 279.216 413.745 cv
279.507 413.641 279.975 413.522 280.495 413.31 cv
280.752 413.21 281.038 413.098 281.349 412.978 cv
281.657 412.828 281.991 412.692 282.34 412.537 cv
283.039 412.214 283.81 411.83 284.644 411.391 cv
286.312 410.515 288.261 409.376 290.609 408.368 cv
291.794 407.882 293.057 407.399 294.42 407.085 cv
295.768 406.724 297.198 406.55 298.623 406.448 cv
299.695 406.437 li
300.23 406.433 li
300.46 406.437 li
300.581 406.445 li
300.822 406.462 li
301.466 406.498 302.105 406.568 302.74 406.622 cv
303.695 406.713 li
304.037 406.775 304.376 406.837 304.714 406.898 cv
305.384 407.025 306.06 407.134 306.689 407.29 cv
307.914 407.615 309.096 407.956 310.135 408.321 cv
311.162 408.669 312.132 408.998 313.028 409.302 cv
313.898 409.529 314.719 409.83 315.459 409.917 cv
316.201 410.051 316.878 410.224 317.437 410.224 cv
318.562 410.309 319.259 410.408 319.259 410.408 cv
319.259 410.408 318.681 410.727 317.573 411.199 cv
317.024 411.468 316.322 411.648 315.486 411.827 cv
314.646 412.062 313.699 412.078 312.635 412.14 cv
311.616 412.135 310.461 412.074 309.366 411.963 cv
308.28 411.851 307.135 411.734 305.95 411.612 cv
305.396 411.575 304.833 411.537 304.263 411.499 cv
303.982 411.478 303.699 411.457 303.414 411.435 cv
302.469 411.41 li
301.832 411.393 301.188 411.391 300.544 411.355 cv
300.303 411.344 li
300.182 411.339 li
300.167 411.338 li
300.359 411.346 300.212 411.341 300.252 411.342 cv
300.224 411.343 li
300.17 411.345 li
299.735 411.36 li
298.866 411.384 li
297.708 411.446 296.558 411.566 295.418 411.768 cv
294.279 411.949 293.147 412.235 292.026 412.503 cv
290.875 412.81 289.762 413.107 288.706 413.388 cv
287.622 413.671 286.552 413.916 285.55 414.095 cv
284.539 414.266 283.595 414.365 282.755 414.392 cv
282.331 414.391 281.941 414.399 281.58 414.383 cv
281.213 414.347 280.876 414.314 280.572 414.285 cv
279.971 414.251 279.541 414.078 279.228 414.027 cv
278.921 413.948 278.757 413.906 278.757 413.906 cv
cp
f
300.491 368.604 mo
305.763 367.376 309.333 370.254 311.311 371.754 cv
311.311 371.754 306.725 369.817 302.308 373.139 cv
298.499 376.003 294.449 370.011 300.491 368.604 cv
cp
f
257.761 385.772 mo
258.125 380.371 261.92 377.797 263.932 376.342 cv
263.932 376.342 261.908 379.888 262.629 385.358 cv
263.251 390.083 257.344 391.962 257.761 385.772 cv
cp
f
261.765 365.225 mo
269.938 361.509 276.681 365.024 280.388 366.819 cv
280.388 366.819 271.791 365.955 266.199 372.007 cv
260.834 377.812 252.399 369.484 261.765 365.225 cv
cp
f
371.057 291.633 mo
371.057 291.633 371.321 291.508 371.816 291.273 cv
372.319 291.047 373.029 290.683 373.919 290.212 cv
374.357 289.959 374.841 289.68 375.368 289.375 cv
375.874 289.039 376.437 288.701 376.999 288.286 cv
378.139 287.479 379.335 286.456 380.491 285.214 cv
382.823 282.737 384.674 279.147 385.713 275.026 cv
385.859 274.516 385.946 273.981 386.068 273.456 cv
386.189 272.93 386.293 272.395 386.368 271.848 cv
386.447 271.316 386.554 270.734 386.612 270.237 cv
386.67 269.625 386.646 269.22 386.632 268.676 cv
386.526 266.624 385.803 264.621 384.607 263.003 cv
383.435 261.369 381.802 260.119 380.018 259.44 cv
379.57 259.274 379.119 259.127 378.657 259.034 cv
378.43 258.976 378.196 258.946 377.967 258.905 cv
377.619 258.865 li
377.533 258.856 li
377.511 258.853 li
377.553 258.86 377.387 258.836 377.6 258.867 cv
377.547 258.864 li
377.335 258.855 li
377.072 258.85 376.728 258.812 376.535 258.834 cv
376.353 258.859 376.175 258.879 375.999 258.892 cv
375.584 258.968 375.177 259.041 374.788 259.173 cv
373.236 259.689 371.959 260.607 370.996 261.68 cv
370.014 262.735 369.361 264.029 369.048 265.305 cv
368.712 266.483 368.849 267.722 369.178 268.792 cv
369.545 269.853 370.124 270.755 370.741 271.419 cv
371.359 272.083 371.99 272.518 372.438 272.809 cv
372.912 273.079 373.164 273.224 373.164 273.224 cv
373.182 273.234 li
373.311 273.308 373.356 273.473 373.282 273.602 cv
373.238 273.679 373.161 273.726 373.079 273.736 cv
373.079 273.736 372.774 273.772 372.167 273.784 cv
371.574 273.752 370.659 273.678 369.561 273.216 cv
369.013 272.99 368.422 272.67 367.84 272.22 cv
367.234 271.792 366.665 271.208 366.138 270.506 cv
365.083 269.104 364.311 267.097 364.386 264.775 cv
364.454 262.579 365.257 260.176 366.899 258.184 cv
368.505 256.172 371.024 254.744 373.755 254.334 cv
374.437 254.221 375.13 254.194 375.824 254.189 cv
376.964 254.267 li
377.33 254.302 377.542 254.364 377.84 254.412 cv
378.048 254.45 li
378.1 254.46 li
378.331 254.492 378.182 254.473 378.241 254.482 cv
378.272 254.49 li
378.393 254.52 li
378.88 254.641 li
379.201 254.733 379.526 254.817 379.842 254.931 cv
380.48 255.139 381.098 255.414 381.703 255.708 cv
384.12 256.91 386.17 258.843 387.503 261.157 cv
388.83 263.477 389.43 266.156 389.263 268.706 cv
389.219 269.312 389.118 270.053 388.996 270.567 cv
388.869 271.147 388.742 271.724 388.616 272.298 cv
388.501 272.864 388.356 273.421 388.193 273.971 cv
388.03 274.521 387.903 275.072 387.714 275.606 cv
386.345 279.906 384.098 283.667 381.446 286.147 cv
380.131 287.389 378.813 288.393 377.564 289.138 cv
376.95 289.526 376.344 289.833 375.799 290.139 cv
375.237 290.411 374.721 290.661 374.255 290.887 cv
373.303 291.305 372.558 291.62 372.046 291.807 cv
371.535 292.004 371.262 292.11 371.262 292.11 cv
371.128 292.162 370.978 292.096 370.926 291.962 cv
370.876 291.834 370.935 291.691 371.057 291.633 cv
cp
f
393.821 273.86 mo
393.821 273.86 393.755 273.824 393.627 273.754 cv
393.497 273.675 393.315 273.599 393.066 273.402 cv
392.556 273.039 391.878 272.438 391.297 271.383 cv
390.726 270.348 390.272 268.836 390.551 267.052 cv
390.673 266.163 391.006 265.23 391.546 264.345 cv
391.752 264.01 li
391.823 263.925 li
391.834 263.91 li
391.857 263.878 li
391.901 263.816 li
391.991 263.69 li
392.173 263.437 li
392.224 263.358 392.299 263.263 392.408 263.148 cv
392.602 262.935 392.806 262.71 393.015 262.506 cv
393.224 262.329 393.435 262.15 393.648 261.97 cv
395.406 260.593 397.918 259.707 400.598 260.027 cv
401.927 260.184 403.287 260.615 404.503 261.365 cv
404.809 261.547 405.094 261.764 405.39 261.969 cv
405.445 262.009 li
405.473 262.029 li
405.599 262.137 li
405.676 262.202 li
405.83 262.332 li
406.138 262.593 li
406.305 262.724 406.637 263.094 406.887 263.367 cv
407.172 263.667 407.387 263.959 407.593 264.251 cv
408.451 265.421 409.032 266.825 409.33 268.254 cv
409.618 269.691 409.617 271.156 409.381 272.546 cv
409.15 273.937 408.716 275.265 408.126 276.495 cv
407.566 277.706 406.718 278.922 406.082 279.809 cv
404.609 281.851 402.909 283.747 401.064 285.347 cv
399.219 286.967 397.198 288.308 395.143 289.365 cv
391.028 291.508 386.821 292.491 383.249 292.896 cv
379.664 293.299 376.675 293.186 374.609 292.966 cv
372.54 292.75 371.376 292.474 371.376 292.474 cv
371.236 292.441 371.149 292.301 371.181 292.161 cv
371.211 292.032 371.334 291.948 371.462 291.962 cv
371.462 291.962 372.615 292.084 374.647 292.039 cv
376.673 291.981 379.58 291.808 382.936 291.043 cv
386.281 290.283 390.076 288.926 393.596 286.673 cv
395.351 285.543 397.025 284.193 398.544 282.656 cv
400.069 281.103 401.398 279.383 402.521 277.523 cv
402.963 276.763 li
403.184 276.383 li
403.24 276.288 li
403.267 276.24 li
403.256 276.258 403.313 276.167 403.245 276.274 cv
403.255 276.253 li
403.337 276.085 li
403.561 275.64 403.743 275.182 403.912 274.725 cv
404.237 273.807 404.41 272.864 404.451 271.965 cv
404.517 270.151 404.053 268.587 403.191 267.382 cv
403.084 267.222 402.978 267.07 402.883 266.977 cv
402.762 266.853 402.767 266.785 402.516 266.572 cv
402.226 266.29 li
402.082 266.15 li
402.01 266.079 li
401.911 265.993 402.125 266.177 402.099 266.155 cv
402.086 266.145 li
402.06 266.125 li
401.921 266.021 401.796 265.897 401.653 265.8 cv
401.089 265.406 400.468 265.105 399.809 264.946 cv
398.495 264.616 397.077 264.783 395.926 265.363 cv
395.507 265.599 li
395.161 265.805 li
395.071 265.856 li
394.953 265.959 li
394.718 266.165 li
394.602 266.266 li
394.544 266.317 li
394.515 266.342 li
394.5 266.355 li
394.522 266.328 394.431 266.433 394.546 266.298 cv
394.393 266.45 li
393.978 266.853 393.669 267.325 393.423 267.814 cv
393.184 268.307 393.044 268.829 392.997 269.33 cv
392.936 269.83 392.931 270.321 393.013 270.755 cv
393.131 271.637 393.47 272.341 393.709 272.769 cv
393.813 272.996 393.974 273.171 394.046 273.292 cv
394.128 273.413 394.17 273.475 394.17 273.475 cv
394.253 273.597 394.221 273.763 394.099 273.846 cv
394.014 273.905 393.906 273.906 393.821 273.86 cv
cp
f
410.689 279.91 mo
410.689 279.91 410.639 279.857 410.541 279.754 cv
410.443 279.657 410.307 279.501 410.132 279.229 cv
409.812 278.719 409.392 277.879 409.383 276.645 cv
409.363 275.446 409.818 273.807 411.222 272.512 cv
411.39 272.345 411.587 272.21 411.779 272.056 cv
411.853 272 li
412.02 271.912 411.907 271.97 411.948 271.948 cv
411.962 271.939 li
411.989 271.92 li
412.1 271.843 li
412.324 271.688 li
412.447 271.59 412.775 271.442 413.005 271.326 cv
413.273 271.187 413.489 271.134 413.743 271.037 cv
414.73 270.704 415.864 270.565 417.035 270.71 cv
418.201 270.864 419.408 271.285 420.487 272.028 cv
421.57 272.728 422.51 273.896 423.091 275.032 cv
423.155 275.152 423.192 275.21 423.267 275.388 cv
423.481 275.93 li
423.635 276.307 423.71 276.637 423.799 276.984 cv
423.976 277.677 424.016 278.421 423.99 279.156 cv
423.912 280.634 423.399 282.027 422.711 283.172 cv
422.024 284.329 421.175 285.274 420.295 286.127 cv
419.846 286.563 419.41 286.926 418.915 287.351 cv
418.6 287.613 li
418.204 287.918 li
417.933 288.131 417.68 288.3 417.424 288.476 cv
415.361 289.868 413.115 290.805 410.864 291.516 cv
406.349 292.928 401.764 293.401 397.513 293.626 cv
393.255 293.827 389.303 293.676 385.932 293.464 cv
382.562 293.243 379.769 292.943 377.822 292.673 cv
375.874 292.411 374.765 292.216 374.765 292.216 cv
374.624 292.191 374.529 292.056 374.554 291.915 cv
374.577 291.783 374.695 291.692 374.826 291.7 cv
374.826 291.7 375.937 291.77 377.889 291.813 cv
379.84 291.846 382.628 291.893 385.961 291.79 cv
389.294 291.692 393.175 291.432 397.267 290.891 cv
401.349 290.348 405.676 289.479 409.625 287.967 cv
411.585 287.2 413.449 286.255 414.954 285.06 cv
416.435 283.922 417.689 282.252 418.255 280.851 cv
418.801 279.395 418.713 278.463 418.266 277.387 cv
418.123 277.058 li
418.106 277.017 li
418.049 276.907 418.172 277.143 418.158 277.115 cv
418.152 277.105 li
418.129 277.063 li
418.084 276.977 li
418.033 276.857 417.96 276.754 417.891 276.648 cv
417.749 276.439 417.592 276.242 417.414 276.063 cv
417.049 275.718 416.616 275.429 416.139 275.252 cv
415.665 275.065 415.157 274.996 414.659 275.006 cv
414.309 275.026 li
414.165 275.03 li
414.122 275.026 414.068 275.026 413.966 275.064 cv
413.706 275.145 li
413.577 275.185 li
413.545 275.195 li
413.529 275.2 li
413.56 275.183 413.437 275.245 413.595 275.163 cv
413.556 275.176 li
413.456 275.216 413.339 275.235 413.244 275.285 cv
412.847 275.459 412.472 275.696 412.17 275.998 cv
411.871 276.3 411.643 276.65 411.463 277 cv
411.127 277.708 411.058 278.422 411.073 278.893 cv
411.065 279.119 411.096 279.328 411.126 279.47 cv
411.146 279.611 411.157 279.683 411.157 279.683 cv
411.178 279.832 411.075 279.97 410.926 279.992 cv
410.836 280.005 410.748 279.971 410.689 279.91 cv
cp
f
403.316 276.136 mo
400.336 282.521 385.307 282.64 388.771 271.645 cv
388.517 271.824 387.609 259.145 382.847 261.136 cv
391.072 269.448 377.31 286.634 355.056 285.291 cv
367.436 299.149 405.283 297.744 417.424 288.476 cv
420.226 286.337 418.869 282.05 418.691 279.404 cv
417.479 287.11 404.925 283.841 407.629 277.44 cv
406.193 277.289 403.316 276.136 403.316 276.136 cv
cp
f
373.539 272.096 mo
369.599 270.507 369.917 267.155 370.017 265.355 cv
370.017 265.355 371.025 268.581 376.172 268.505 cv
380.61 268.44 378.054 273.917 373.539 272.096 cv
cp
f
396.043 273.344 mo
393.589 272.355 393.787 270.264 393.849 269.142 cv
393.849 269.142 394.477 271.154 397.683 271.104 cv
400.448 271.062 398.856 274.478 396.043 273.344 cv
cp
f
412.137 279.928 mo
411.058 278.549 411.862 277.417 412.268 276.794 cv
412.268 276.794 411.964 278.155 413.817 279.187 cv
415.415 280.078 413.374 281.509 412.137 279.928 cv
cp
f
347.025 293.624 mo
347.025 293.624 347.267 293.671 347.704 293.79 cv
348.151 293.896 348.774 294.026 349.567 294.144 cv
350.366 294.229 351.302 294.331 352.354 294.227 cv
353.403 294.14 354.544 293.936 355.788 293.567 cv
357.034 293.215 358.385 292.696 359.89 292.159 cv
361.394 291.611 363.055 291.031 364.902 290.605 cv
366.76 290.171 368.72 289.911 370.887 290.004 cv
371.589 290.043 li
372.449 290.134 li
372.996 290.212 373.51 290.299 374.023 290.419 cv
375.048 290.645 376.036 290.937 376.978 291.262 cv
378.864 291.932 380.609 292.684 382.283 293.405 cv
383.961 294.12 385.574 294.781 387.164 295.33 cv
390.33 296.443 393.409 297.041 396.132 297.275 cv
397.491 297.392 398.757 297.449 399.882 297.419 cv
401.011 297.429 402.005 297.388 402.821 297.324 cv
403.644 297.29 404.29 297.227 404.732 297.187 cv
405.177 297.154 405.414 297.137 405.414 297.137 cv
405.414 297.137 405.196 297.231 404.786 297.406 cv
404.373 297.573 403.768 297.829 402.977 298.1 cv
402.187 298.373 401.212 298.67 400.072 298.956 cv
398.93 299.237 397.617 299.456 396.163 299.638 cv
393.259 299.967 389.743 299.84 386.131 299.036 cv
384.333 298.634 382.508 298.1 380.734 297.499 cv
378.951 296.917 377.214 296.259 375.526 295.776 cv
374.685 295.519 373.86 295.311 373.054 295.165 cv
372.654 295.082 372.242 295.039 371.869 294.99 cv
371.343 294.936 li
370.66 294.906 li
369.943 294.892 369.067 294.945 368.282 295.006 cv
367.475 295.08 366.674 295.21 365.87 295.338 cv
362.676 295.889 359.418 296.86 356.319 296.994 cv
354.784 297.074 353.323 296.919 352.098 296.596 cv
350.874 296.247 349.873 295.809 349.133 295.327 cv
348.391 294.862 347.852 294.425 347.525 294.112 cv
347.193 293.805 347.025 293.624 347.025 293.624 cv
cp
f
427.631 296.317 mo
427.631 296.317 427.28 296.547 426.654 296.861 cv
426.319 296.969 425.851 297.082 425.281 297.16 cv
424.786 297.176 424.161 297.22 423.556 297.147 cv
422.936 297.088 422.274 296.989 421.62 296.84 cv
420.943 296.697 420.293 296.522 419.611 296.327 cv
418.947 296.144 418.269 295.934 417.618 295.747 cv
416.952 295.538 416.317 295.388 415.677 295.219 cv
415.051 295.084 414.426 294.936 413.832 294.874 cv
413.222 294.745 412.656 294.796 412.068 294.722 cv
411.782 294.731 411.505 294.774 411.219 294.774 cv
410.935 294.782 410.649 294.778 410.381 294.846 cv
410.102 294.892 409.83 294.937 409.568 294.98 cv
409.43 294.998 409.295 295.016 409.163 295.033 cv
409.035 295.07 408.909 295.107 408.786 295.143 cv
408.286 295.285 407.803 295.408 407.353 295.51 cv
406.937 295.671 406.546 295.795 406.222 295.904 cv
405.571 296.12 405.146 296.22 405.146 296.22 cv
405.146 296.22 405.304 295.846 405.672 295.231 cv
405.858 294.926 406.084 294.542 406.38 294.128 cv
406.715 293.759 407.117 293.35 407.583 292.911 cv
408.028 292.443 408.668 292.14 409.306 291.733 cv
409.623 291.517 409.996 291.406 410.373 291.263 cv
410.75 291.121 411.145 290.996 411.551 290.877 cv
411.961 290.799 412.386 290.746 412.818 290.689 cv
413.254 290.609 413.685 290.617 414.121 290.641 cv
415.011 290.626 415.854 290.804 416.702 290.968 cv
417.506 291.201 418.332 291.427 419.044 291.758 cv
419.79 292.057 420.456 292.405 421.096 292.756 cv
421.717 293.093 422.313 293.472 422.84 293.795 cv
423.364 294.131 423.86 294.448 424.318 294.742 cv
424.774 295.055 425.179 295.248 425.568 295.504 cv
425.908 295.662 426.236 295.87 426.555 296.001 cv
427.236 296.17 427.631 296.317 427.631 296.317 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.1.1
%%For: ( ) ()
%%Title: (1512.m00.i125.n002.S.c12.230002453 Wave icons vector.eps)
%%CreationDate: 12/5/2015 11:52 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6H!_6.nj!-Nqn?D"3Q)(iAXVtSm[4)T![3AoU>Wan8-21G'!n*L]mkDOqlejV4d1PA]_D1mi8gK16D]"3]rF.m;_-+!UJbkI
%X>KsjORmM!JamdUj8JMOWMq8Qf@A0#(klS4G?f!,\(])I[F88qesl'P6>lI/WKDO63hT8@KU1LL]>[se>&:X.9AQ,/o,-][1B*aQ
%+]99Wbj]Rqj-W*deS^_nV=&T,e`S$G%1Yb`\QJ)=%-WI#$EZ5YK2lpPL\N8+Cm^^koJtFdF(jq'0[TH15l[;!@Ar6oK0LE+rc/O%
%j>X/6C:i1L[7f=ZZU*&Ba=6t(RQeq1Wr&W!]dpG6os*`$m_'UOG`[:*!i3`9/8^g7s#g%Jr2-2&OSh&<nGb]+l(@IOcM>"9`nB&q
%?jnUm(<8``CY(hB)?>k5Sg=#YVg@-uQb$0\=09`;aj%smK>/\QFF&m*)sTG!F0dbYF0Wt-c+g7q^H((59iV.o<W?7D4fO_se[D6*
%I(R!rq[]7,UE^"mh5aW3D]6#9D4>V]b<\7/<iU:GB"rVr?=KWG==+"70Qp(UK5-_Y[or1Y*#<RWQ[JM$GJ%)T=TsX32os0C[B\2.
%b7gEUFHk6<T96=/>SN[gTM-'^Pd]f_p;]N*BV';cic)>^IUBO!#IVRgCddH$[;r(VhQBlTPTB$o,_'g#F4%dq3;MTH9'bngX,UZT
%9(/oH+5d`LmeJbq?>EM@S&[L=%Xq]_dNjWelHKG*C&]"KN4S5\gfbQ!qk?XkC(5:_a1ks%B@6-J]gj0I\!t(^7Us4/a1nMCQ0)C1
%pU48n2VW>LQ/'Qrn+=f:gbeV@DPpbi;]kXYMDJ>6[I.>K+g&(Vc,lm5Q@DX.c-i1cPiPNQ"+dU4riF\?XauK902%@1ohqR7cLD-R
%LRY\9l&ubI;nksJ<kIfVoh!*MU2Ajq)!=<e(Ea-6P\$f<>2rQu$nJ`tIl5tN33Z#_e<eNb3o*!"G0>Xg]62L#V;n[UpFs'SY;Rl$
%F>)_,r]Xi\"dZ"*ePa(e4(ssaLUD/?V;:GWk'!3<HJ866T;NnCI`<J'A]A;'X6mpML90S1W".eIJ0a'KbnuM-[Q81LqX>toP&/?G
%V+)Zo**0]`BD\kFdJRTn0,$'Xs#f.Ren^i:[.cl-(3**O>d&&Flu]:rACG^i-[4,_%=aW1P6:j50)b38E,>EZ#+5e.m9Zo!mIOr]
%\-2sk[s_@n<I'?4bjBkGAs`/DT\c-.]i:aU:HmQ_]1rF-$Njs(rAh>P^V,-2q1>[YrjbiU_jDj[IpV]n@W)&"a7TXb3(k4;Y3knn
%<>&guKU?\e9.+`%LUDH)?#;9McHU9h3_;QS?eq>V2LRQe4E'LkDLS'9D&`s/rE6/p*7eK)9)%fpZps:^Y\4(JDe?'eF',Ob*-O->
%-:&X%Ej@7Yh\k#8n*s`$cO<JA3P$Lng&;t1=>+%/5-m=4*Z<NeKKZ>8ju7HJqk!Q82u[GS$pOQSrWM)\\pUon8qob9BdVR9`_AjE
%HgNt:,TGk1ja//Q0&;Moo8tT&dG40@aL\m/3??+lT:UauLTj:V3.:V&)SP0tj_j>/9T'fW*gm_5o??=>g+.<G`HLoEO%;-d9Kdqk
%Wl9P&/mhkqg?I.o..%-lUTcascK_,a?`jC/4-p85JN7)Mo-670=PK/oZIu7d9B<Zp30ZVlGZ.bIELuqBdUg34eO$^6]lprt0#</k
%/'>5lOn/smA0#jA19er?RKXX>QVV#':u0GL:-?.n>Kk$l)m:P]4M*?Am"1(,\)/g#BjZA;XE>l(h%fGH16Ci;o^+De==13,`3l)E
%Fq`JFin@+34'IX6ElQ:;XM2uU$3tMtk4nC(a#-P01<![fHh+KtoXgt29di7o864,n7Vm9<$sc6dE$cG@[NLU"IqGqCM#chokbLC'
%!^R^@I][V(]Gr\t>1HN[d*&/^#B32@ZqdZ.CLgOJ\Pt5W6o2`\qP^/m'^]\LPU/7jW`3`3Y04&L53hA0a=IQr.[PM&4V[g+=k!HB
%W0VRo8fV)?1@bfZ_r]&\`ZN_<Q'YorPtVgc1.k]3AJojFK1nb=_].-(9(fqk5;OjGr7c+gS^A)db`Pb*:+^36V[WOkjlk#7rCm5D
%U5]'AQ1Bu=9XY(DUb5??;*3&Kil9@"(S<HiD]P/C?B9+PWsQ+c2(OCGT/F>IP:<XpLd%h]mFBMtaT#bCClF_PGC(XN.t4a0l?,.q
%;Iehd<K4Hr\98J!?Oi<[IHW=/a,IWX/gm@,QbE"Oe.iJks&pOdgn[2iJDnn$Z)#4R!7Js4c4"LXZ`LtbTjs9p%Hf#uLXm#qpGlcH
%\ORkY\YXJOH[&f_B$h`&:ci8Iq8Zf#rgH`q;E?Q8+8o]7jAelAr8QC9Pmm*PCAXZ]boC:!=(X2/+]!."P8s/NSO:\ABkieu:<@(1
%6QVqDM[XVT6`ag]6_<A#J'YDI3FkUJjH(`LjT"$;72B$QM]&YE8`"\cK1KJnF.)*K-[F`DhY<G^J?5QS9bqgdo4A8T<(-Gd>-Bmb
%\pS47>S/<9feQkBc*4dC%7XsCA[(!*qtn'%Fg]mF)k`<^1n8;8192RN..=S<ad^FFQ,Dfq0)NXodlKP#7S5-$MC&q@e3BNma<hM)
%8VHI$<F+&Z=XMV^)MH5V,YWB%+d4V5n*sHp&),QKA!*k2l6>Jqg-KfMcW[Y]m4PiJQ,R@Ie2TBG5)Gnki7)RtBP+YI^L`?_%H*7?
%gdN+3<;KDX\<lGKYnV8t@@BNB4ke.s:P[3mcAAd#Z0@M9PpC\h7b9Z+1'p.'FmoFh?UCW.qmYBF(f<1L"4arIs$B-BFH`tA.lZ4j
%J%*L3qP=AhRnNl:PJG?en1k<_9EHl2^rn"m1'tTuWi6PAOhcm5_JoEa&pP:(%s/G/q3Ab=kd8k4WUh!s!7J;sGcl,kl'ae:EIG"M
%r_ehh&i(B%A@gJ*<b-Jd@,)j*aR\!$jM?`D=Ms49M@hEkH\L;NCWG?-LAQdCoe(_7rBrZ+QZAV/jtoqqPLl?(!QspKh6!q`OP(Ak
%Q-kST=.HGF.o*iuY*0Zl-8.?</3[OGdhfZ/>0N9-K%F.J%DLgZgEItOniBN!Jf3kqqQf\e(L@5#Q9G]YGq'4UJH]6V`QMZ/4W>0.
%k@smIDE(t3i(\sp9:\1l1&:t/ag2dn,m?&C9dP_[Y)H2"B3@S;`Ea@Tk.W1/&t8^pSSAtrd&pD)Q2t5.d3X^_5/QXI7I(h0Z*dqW
%2Ch]#]<G?iQ&c]%!c#/9j]_EAJiB%<*r)/jhNHfVMXE7N2d[Fdb.+%D_F?s*hNd/rCKGuYhl*.tO@I=60GEb[KMnpn=K44X>.n7J
%m:t5^>gGA-r]88FTCD,P4O;s29qM!HgoCB+bEtEVGARH=p)78'nhZ)cX*.W\"Q.Pr]?I1X\LhqET%ggDG0e)^(i.=QR_H7pJ`s9/
%F$%/+T$T^l\XeRSF>]#OM,!WO:LnKuHlPNKP8iT_BHq1'm/E!1gt5tsS(o,.O%XMW)rtM1+X]4ia&bK#DNKpWEh(o-T.%b%%J#"!
%Eh(o-TBO:qWuJ6O"Sog5\]dgLUHI19]1G2(-hD[qa4322h`?ZG8J1je;Rp#3^M)3(plEkk;S#E2^C'Mj1"VPIk'"5b/YAAr)S3N^
%]U`4hdnAF_fHW2B1Ka[:hXO5_d6BFhC(PYiMjj5mA/k88SSGE8rR%Z(b#rU+T"lGug3.f0]j@8lO?luR24O!][>hX@5;#fW)4l&^
%&i*_R4SR`95GaIb=8Um&o>'""f%;LTF_]aCTHrn39*r>XoDBe=)fIHN]r\!pqS^GC^C`Cs*kLo\AB\A87l"[4R&OTq9#g=X16#g)
%0E7+$_iBoWYOEbMf<2RM^S/+eO<aQ)qfD*m!`B=a+?0YY:Dd@(,(a/`S$==u24*FEd8dQO#7i<%D8N?n79A?=^2=#LrI2.[XL1P8
%rtr3Ym[!RPSF2Yu:?l)=]EKt`D:\4:&GCpV8[6kq^V5k?j>mn+>aY,'f:C.:-Y,,M1/le3R&u=S3.tQW>RB8$QPuFn/Dn5sL,=DI
%66Esid9u=9*ku<3?3r\s%V`;9oHa'Kf'..q>J=F9GW>^T]hV0NIntp_DjnMMqXUG3d+?.5d!Zp.i4ejf?O;q4jLsuBhd+.Bht#\&
%Q$&:BhatY&L.-AjdO&&&i4&WRZ6a"mR-QBugXY?HT,@bq.IcqFq\+:i5.Uiu2(I/T=sMKHOR6e`>3Zm/,fg108%#^MX\gZ]GU9V"
%WgB>j1<p,$8$sc!f6Sl=Kla4kWHE">dco+oCanZ51j1+eP02nCEN`]kipRC$O(qg#1tLU]P0mY+3\Fe!0`J"OC!O%?#-/k&$'!(U
%`J$5eAh`56=\SVQQs3JcmH/C(c,=:j>"P^m=6X?%dNXmR>A@e-ScgjEiUM93+JhQp30OXFI=[cdISoF"Al>d-ok5[2iJIbVIkAbr
%$(YBt*?8&.paU"U#plemqO`2:jm/]EK.j"n"i:'+4k'0>Ge4j]NEgZ4o`*jlegMF(QV0%\4SP=j/q[S[h0CWj(//sj_K4o3**=Z^
%K\*:QM)8^?hE11g_1*#SA_;TXWD`%n8STN,UG@?M[0siN=5-CD/J$$bZoXu8DB1Y$c%?ErV2=:1gEiJ_8A5L:0Tg_raZ#?0j"L4-
%i([KP+FhokRD(&jiJi`]ZRt=DRdFmG;T)EaB3&YJ:6nC?7eu1;VF>$pNu;A#N7\AG(Dna#L#J\1@)Qpg_d*RE,Th]UDO0k#CMk[s
%StGku\B8J_s-^Too;Z*+\FR,iYJ[D>=k5:pO%ruEn#u,ndsh7?r<bbE2>ljj$Q6_?]$pVGm2M]%DcAPPq+BtX(('cAPf_N[B-=e-
%f3)GmLL\n[?A:$MGJ@:+R?fSiShmqWR?mB8%*SFlaDHm<Ao7+@eWZ`K^Eq5]p-k+3/VAP]NAF1PFL<3TR!^(?^`*-uX^UdSS-*Po
%Hm.ZD29FKd`Q>Shs5T@(<HNhB-.7-Ob!.61`-I'_j1!<C;@bU0-L-r`3@:R@s'#V9bUo:mG<.+J)Im9Z9hI:u#u!rK-@+8f"+KgS
%@+X'pq`S:tGBM\mEBBTSH?E]VX'Ieom<[UEn?:I"%:q:GBC'D1Z7KJ/.o?5U&WOoeVq3JoOl>0a,bd"OhT_=HBLLGpU60!rPDI62
%qRfmhk9gk$8OR(D:1b-dQp`d68jpS/:(`IZMn(STNGJ#!`AMmsiZAr\i.jJceqT?[NSfe9==\<1L#M)M_LG:(07+mkn65q'eYTm?
%G!;YhfXSrYMNu"0]n0UKj^$b^`<(Bl5Bh8@]aEeB;<#/m+j@q`=2j3iI'^].hjaCf'7Xr[mu?&Yb@"shGCT'"I[Tf8p@pD-<aS.R
%0>je:%c>4`RlGd/LMu2A9cUl]V66$"GKl_K^CD"%R>th;o8SaUBB24(pj)Wn#[I$XI\5E:SlTnMMRY%k[<%$q\1oYbr(T&:j1:Pk
%>CQK&9Cs%8q.Ltl-=Z=#0[$s6YMU%u):u8iK\-6d:N7ECOB`%acJT7=*W@+2GOrE`r!IrHau)kfAYQ8GkOiV]$d=^H^4No2$mtrg
%bm!NHnQrAWiYfS=!0_NeR7ECug-R1QG@HR,bHS8`ebH$qYD)8sb<T*07p>l9=*mEBLt<O8C9*,d7\a/EY1BZ8Cb_^69h)P)I"mm?
%YHRD:P7_T"6ES_:Qcdk=C8:[=e@LemkI<q9AOn4U#uAUb-3*(%rMYI"]R7Qn@hrQ95oaZs3;,B_6VQn4kbnoJ\LJBf._^K-q*dVZ
%]]E@pZP[oSaRTe;=7Voc%"XJ?_tB3d#h/\<C@se/ihlU\H9GJ<;LNWl>-Bf`V$mlOOf)K6hTYQYbQ-q,(=fRnaa3c_8sN#N>Pg5"
%WqrZh>#h?NaKhU^\Tci@+BLe7VubsV/LuHM+'`,-p^:EJjXV=j+4VR[Gt.L83]5*=M1RT?h]p#op8S@cC^l.YZ4k@<%Q:XQK?^YZ
%RJ,C[j"*fYd71O(;Z3fIcO?U<ek`d)c=eR3k"%Xn;PSE*8J'5GXr1Js#?b]C`G;@&^d0JXVb31)Mn(=rMb,5;35oMd;:`8KqR*Io
%;&LS<=0ND#)F$Vj^.u'a=Vc'Y<6l;_7EJq@?BJEU9LLc;[4'WnH'YX4/P;>J9PREO[4)%kg1F6@11n8G,m>^KZPFjN6l^OoFe*8E
%Z7P.<=O^Ec(+%F4N&u5gf34F0FfImPZC%]0om^V?jsns3A3.n@O;alVbH(T\=d^bP-7<g+*iHM/#Ou#21!1A=X&fc+.5Tl&e(+AT
%=ZH4lU0kLoG\,b2WOC,ch5gDEcZT2<aBs:;Ag6I<2aNehbK6s"TZaPC'1"PhF;$r1Jo3'QTtK3h7O8do$o7nN^1]F5W0],Z1ct$]
%.k$Q%r8`og]kHqKOaOT;n'U#Gq=._2W_.?9RTjM#3et9/V+0^"7-_s=L$!X5LH50P[8a?]%YRq(l;"ZgT;TGNjhil<T"gV]Etb9:
%$r?%F/FAu'@0Pi=&>(*`TnAm+4T:!5Zm7$uroqJo=h`_Jmf':h42_TS)U6#8r#8aIq@euYWE8P;+j.X7"Ql*=g2X0"9p**D9Dk&#
%;"3B>&g4CBYIRd"+:N;I>Sr/q)u@CN3:]H5+V"Sn\p!Q6BVCUHIc@i7o[A#9rC&f1H_1-,`QM9\TFYC^)/,*=c"3qDCBD?G<V4BZ
%Hk'0O3A`Yg3OD!K&E"B$6U+fO+RnT-6\"=Wd/NbI%CHuiL%U.KTIp+M,3t^(996d5iWnS#g0bGU<lW/WK*gPPEV4^Z6jWs.H9#t]
%Q0Qn;[jm<jgA?S6_sV7c)]EDCgjh:=<:Xt5Z%8U.`<tN&7uej1UHeac<Bb3IVa#rCJkcOgia>c<rP+nWoWCRGh)b*D)I[sb+e8r<
%q*9G$4X<L>+)J(OpH.3]?fT#J>,OI#H2e$WT;D_TotQ_)U^?h6m@VFGbrWH4rrt@!$0ZXZ\9/RUjW;k0Ki47\H>7Xf!J&/Yl]AM?
%J,rU0N/u<:m"CnopA_12rh`Q<ZN6qH0=7CLG,Odc3kKm-g7?2Um3b6?#F?@@l"iDu^L$`<g8j`Grg.9E#a_uA]@tMMPE0?5Ld!U1
%Mp6>iPORk^nko'X5EKN@T`1KMn\9"\KkBo*DRQmSQ1ct4M.7H,:3YcSs6E![iQpk"!P%/UjB-'*fBG2Sa$BS$<YA^%P[KqHLQ\=P
%:9"70I'\7s%A3[dq-5RRmd0s2#5!<I,^H:o.pjAQ*Z-Ohs12C6?a/N`?d6Q2k^PVEeQ>t_n*/h'%")"*kgt"RatBffPL7E]4gS9$
%ldA<O:Z1E'/;XMS9!`fjHM3e51+G2_qq[V+>)#NlGVZ09NK*nPJl0DPr&nZP@6fo\)iJt]=1b:9=]U$iAE*W71:J_c4HbQ`#-`lZ
%cUtlSXah2E%Wm/WeU5\a'<\]WF,>!^TQ7BqFs,ZhrO,=`8q/C#UZ588kTm6/YB<UG>Gp$<p8=M>aQ7d)B'sf@e#g&os/DSthY]j5
%laBHG:92ma*REM,]2m$rqM7TG3Z:79[C^e1;S/)BUJNtKF*mkNX)mf+:-?:b<%ckS>clJn)ar1UQ%K=>Z/])ie>frk@f0J.;FGkL
%O%0Y"URSqL/Z79;3F$?YDpD^I,33K2A!\CK;_S)Ie:B3_F?BBU?A^d'?"NuU:Q^k!heK.\B;r5n5>=#B?!H]2VqV-VRbOh@]:3$*
%e@MKi>.rK]</BfM:Y9ALO\Gd]/%8Yr*:ui.e_F33Q#<iu.!WG^gago^='N@aBBZ],)!<abMF#N*rck?o)Z6hcW+XAP86"!=2MabG
%;;L"mQmh>;]D0%m3D?u7.4P#&9(^a$ShWqrGhMDkLleo#iMj#bOufkTA1.'<2R041q)9he8rXKfCV*c";X2]1WLIXLUX7t\cdm%a
%mUie1WadE2YQln+i6,Qm'4M7uGC,31J(6'#/omH35HFHFLoP,`bmamRNq+..?G2pMc.ctPB2>.k_5oQ(T,q.7dB2MDJ5RT89U+u.
%(3S'*QLXV$3f0_>8DCP%GDCikg8R$X.<.Qn\'&oN[POY$]'\WWooqijlnGp)CUJu(3k9Hi2%inBs/`Y5Lr<Xa@j^e@;_H[;/`LZd
%+T>)ei.*`SXN:l/BdG=c9IA7L9lYdpg.]PnJ+AT5*:[^!05iqhTI#hlm7Od,##XOF?SoC4T-k7aP<-rMn[).Q4lnZTB_H)+X#5-e
%mTZQBQp*[:<bf>.!RCO^Di!LtNc`r#Cd(*i:jaCd4NOP+;[2uYHX+O]YIZlHII<[_mRp%tgI$)BSVOZ&VnC@bn3:k[SBSa5@osU0
%#'C"AjiO:2I'ZdiD/9$ch,8m"*QY-J):fO]Ep<FUn]oef6+US3:3:ct0jR8ErJd66]*@laRsT457O@rpi2!#0M+^H"I4);7HRH'Z
%8%$nhXlS[Y4Po:"4V=OR:U,U'N==9OP@/9PW_G,/a>S4IqLK3CZO4LC:Rc\MNW!I,5W9*-(f'0D%_M'eVE]M&'e8E`m^$j%Q,c2j
%l]<]H&:!bgaBW1e#75`r,rgr8%s/"Q%jH2.osorjI<jr=rg_dtclLtn'6!tiX)^m;]\^^nMcSrf?7"Iba#r\?8KTt*$cW@5)`Q/D
%Z'k3+U9%,L%L0/35g@:2@LgA0]^r@Ba$d^aF]-rH0Y>S1VKiMlHXI0scW9N]G`YHnU-k#J.$^?SO`07!^E>uEf*m*aG>8\d))SAW
%?S.(*BrD?`+]lm]EJ@%G7+*Fni-_WL2d\U]\u3@slg?%T.6:opFqcSA7$VMbG0h(JdI]kJB[6iS0'ncVS,9ViAPu>m>A(.j4YF,p
%Q*%seEI,b"p=sZF5X,dUgh`)9mDA8)BH9?4/Kdq'jeI`qgQf<]]1*Rr$"*F#b^Ip!LX#OBqEEQ"BP_UXiN\mopgEN!$?Sg1L(Y5D
%kFh@G3,*;t,5ul08iu-8^&7I'E@4<=7d!*A-DW9i\V#HfF&kj;<\Lj9CkkBjBE>5fj.j/"!tNq:@NB,&<#8h2^l0W"It07+^a4m,
%f"-8FRa^Cm@0p2e(bjlCaJ-#=\d+#b18JqPQ0[Vm^so?Ga`/1>*$b%(0&m?X(LHfAWSP,K!;jq^0mL73)T(nPY3Rk(6$6bb76`E4
%O#eY#Oo`0ZP75Nb1HCASp)Dhu9)TCe-V1B5Ie0quGnR=0gIlh?5O5[;[+p+HiCm1I1UgG<=aADgGNKgoK2VPBqmfhu5N0mp6:4!`
%e^M%(\%4nUV0%9$b;hoU*1"Z2Y?nS?^oDS:YW$6ErV\^^^Ct;>=gJ(bXgqk!^E8M#J_"_2$u7;5%dLkZe8l1lH5qaXS9;8g7#A`b
%Jk?C=i_^:b.Ll8$k?p2PjbkAo@rs=aI`A>Y/hhGSUZ8(=Ij''$1+HNPXbP(rR%+#[an8BQ@),5@]`HlPIm21IU2_h@EQIh?A5GjV
%[bkkb0;:p%EY4(k,0uhuj-CUC1fJApg8-Dsq0:7[S*mpq?cd/dX]cHD40+,<PUDp-g4MlV=[ttQE!?,Y^2kW_K]1(o5;0D0qO#Oq
%@C:La.L]:]A'a/Ab;@J*UQ[tc%,mg-I##<%FfL.-R7#eC7h>/^bOa]uVB<V2Wr9P5hl=-ZX"!27-QZ5OJ"D><eo@/fbt<tQ$i?RO
%aT4\u[+[q+.c6OmS/439C3V:d:]9ildO`:L"1u!IqQp$g4S`0]?Ho*uhHUh>3K(mlNMCft99Qd9kajcRNQ+g*`TMm:2smE+(;U)#
%3=O]VTrgWn(1so'Q,qa"jS!;/0DA@.)N6t:Z.I;hSj5@fBlu2:^>2>n]_RgrZLn(glGc;($FK^<h`.#2*l#AZl+tf[LNaP-mq86g
%G@&Rt/@X5l%i5]o2kCe'bY6o"Xd/$0\*]Y4C\H>rnsf;Bc\'7GS"K.5?Z,V\@<#"+O/>kfh"&*QiHsNk`k/pspiZ$(o$U44ZeTi'
%k@p=F`Q]@h"RBcGjl"7]c/kdp]"M9opo%GbS%F#dC95\&#9#9I'W2_`O6bW=pFe&5a4ZmYEHAHR#MqUknAsJO'aqkFG:VS:GMge%
%KmiFShO2(5%cdNWmAj$To/j!oDpKMJ&9$ONo$UD*bORu4meB(VAu\q&?E`_E0YCc3Dn@ZLL&E[n_Njt<rVaV4b$fMe0`7l(G3%DK
%6<S1)=C-<$pRQCoPO>N$4o!a,TC2V*CfE<1XNX/kDs+TBD`)&<mn8oe%245`ISa?$Roe(>LV`E<;LZd'o3g\!bdRi#X*<G8=0'%3
%O5<(6FgtO+Q]CQ6mD7NUk+N3c]_PIXY20)c;#C*rZ;R<@I!<$ti,^Qd\UEWG(3"2;n`c`C_q;r;?^C;Co%i=2&"bN#LW?#/f"uC?
%Zg[)3jULn@BL/J#Q4$JMDe\CO]@HDAmo:-<X7IVuAG,lZo^#7oV&jLpb8NQ\:+`Ye/DYW]2A7$7$7]k>ZF:m/X3IgYQJPY+/a0lP
%?b"u`N@A&Z,CBG+NocIQB4!O#<KC1@mb(`5TPl?MT)*KnH""FoFJjBD_8eHgZ2!6-pVJ=8N44"P,N)oM4=VtoT9e?94VRbDRC-t]
%S,T'>Lk=N2%j!l;S'cr1#7k*1miF)5<kc?Db,:ZQR/20?@Zk.*CZT7kKeNBRW9K)@JQ3-rAo=[aG'U\-e^!3jI^J"Uq45Cs#DN-P
%B0Xs>V7X3<m,"4592>o,O7GAfj_fP5G56E48,FE[I/)g@/S\8\\G#pVj'K;i6G,\8qXpfE>?%515=l@P6aO#3]iO)DV1))3*^%$A
%peFQj4ju*#]B[5eQ/MViic;YZpa0*frpDM5;IjNZ9.+t6k.sYGrd&TDLR137ouU7ViM%h@B(<^ThK6#!="E-+ZTs#BHSt'OOkje*
%0CEq#k'*D?H`))Z`+]]tI<,2QgG],eJP>qq=3I5kWo!'O>+E=U]!m!!?[l>8o9Se\WpTM==5A24R*J*C,i+L*p&+5V`AG%\qlL-i
%I5Y0Zp`>`k'Tc7Q[XT8]bJ3tdo";KDs"s;rZb8tN[;u1r-0Z<1YeF#E&)[%A\)#;a+'5'#gj43S&i:$AU\_:#IPb'$Z!K"Jf_F>&
%_Rnspq4>MTdn_dUp"%C$3.A(K]K!/DM]63bXO]EibG'(Oe!@^lCZA!9?&R6e43,:gYO@%`Sj.Jpo]+D2e:Z'mdsV"6C@hFNGIMU_
%hu<>V0OK/d?'Gimmln#PS`e7MjgR;jV;b\Nl9,T_oY=].SF/p`D5R+q([p"1pN5o<GccAcj%_?21J5>+@f"BJ]:1&r+5Y8WY.*g0
%ik6g)+]3JC#[\\1T?BIrYhbs\"seMHYe.O]hKcZCq-uo(WK@"$$N'Y2?\_UtlXFl.hMjm/#RTEYPuu5rSbP#b!?`?kBqBn<pIVKi
%2qMYbaq&22?bI["It.@3UPIF`:\3<sbDk%Um8X=J])e.e_R!lNArB;tjrT#pX#[]I&H&*^b>TqaVqrE=lVjEQ(SB@S9>U2R^%lX5
%abSLClO?_a_aj]s)n5G6l*4=G.m=Hfm+.32GPc`<5NTXrj'_gC%0Q)Ls$D^X@_\bnqc[0chXX>0\rDs-U0goZ^D7,6>I<.SH4,59
%U0bR:WqFoe4>hJlU1U9(1%YNnH'>.7BPu.?!++_=e":.fStJbmHh5W8q-[h2jYH[\_ulaC8),&pg?'!q:R;oPL&o/$M"Sg15'ZD!
%"gg3M(hO]pH,[\bh+r6Q2!O`i4pK45Go7j>m-di`Oir[bI=okU2r5MFj(RRd\oWpqYmN-p+Z)NW#OIM4U"B,cn3"6Mg2)V#aZ05]
%-LkV[^E,T(+!6Po^UWZ3+!i(]'C.`(EB*2Wr`!P;'B:_B9BQcjG44*<oke1Ur$"d+WK926AhI@AVo)&HSgF-IGR4[?I%5Aag0Z?>
%KDBC>C4E=Yk!E8MeXSqi1AsD%53fITZ5TU0!Hu>:aK_Ndqb''"B9<*N3t`qODt7CEF%WaDbS-m=5VI"MDKCS;a<i/8/UIeU8u_=X
%/N@\IYHbs@PSf]bZ1HV1J5"oQW_/]Hd?#XFM?@Y0kpJ(<%V)eK]SF/;E]0E1r0cF?fIHB*qSVqS.&D_i4<9S(SO.f:cQdHR99Eqo
%aZFo3(CEndk]./>)lCkGGlT:XYieI'fJV[Kj8Itd:N.'KRRi!VcU.MPDP+;ZGG"O`L/Ds)Oak&on;L'!B<;gc/\goN=bD#t8*a+>
%]0m6Cg("rr]iS-*`SKt-rT-Idlc+Rb\*oq7Wcn)ZhrK@K0jqV`FR03/fo6R_Mi<;o"2:RgahN/1@dfJ:HLK<chB*3Edg?mUDAMjC
%dI!ju[gXqS!BW,8o;NP/c-GY\KkHHr"G=UnlrN_])r#<%gYIkL[0N2me&.g/Bpdn#4Om':T\&r7%\nuenS./VroNFf<b_aY&+'gO
%bqKogf/d:NKo>%OYLt/qr:G-jC&@n=Zhhb4-XSe&cecA3kiVSNl=dm&ZJ'IKlD@i1bMr+ulKQN`jlsRd8M0_=Sdp&S_`(r&cO0QQ
%3ns86X\V?]CHkk=2t6Lb:FDYk2P>g&[nP(O6E%1LM$puB^FU/7^Y<%rICJg+qo;V?A;T2FZmUpKJN^p&PpRh;gGe2`c+RE_Ek8a[
%`XeePZFWC&M]]lMPKah7r#g>NNFP(#*6d8d/0hgu++5A\o&\]X_Zq8akA-,"0"CMII=bDMhl7j_l%g0aY1WL+LN[S$#p02-lJFqT
%@oEZj&a7#(`!)lD:4#9N*XTg[=^gVfrGCFr)0T!aN\ir"5$Oj0<?;jhm66C8lQ="BQ(r\A)DY$j#L?3>qs)27cY%N'af+*'(&$NI
%@&ZlSTX#oGaPJe]@4W&XldD=KD?9Gnc!k,Ol^.LXMJJ4.2a%lt7n`tW1UlO37:CK5l,p'/AQm?6itj=#dJGV_J+[:JD6\&`P'kWS
%q;r\."F\eSg[[7pmBuf)rQ0#8rciO#p$hR4Ka3[iGBX_sqD(QR3;77NkkP>O6al^cbe&BJdFXX.rU:#@O:ZLP_XJ<ja)qomjotJV
%j8"h+?Q%S.;("lKE9Mt->B?th4FUN2Oc6LX/h]EcE0EE@_]-MZK(dE,Y?/HeffX*:jYo-Xr]**2mcc2,DdP\QI+[]R8]S#*^="^2
%E9gFaS[I:>g07m2F*DLE`huQ0k2Li.l[+*D:$D`o_:%%(h(*q\p1ZulAlDi\1ADL6Mp;4ljK_DJ;DoT_$4_D@:A4QgnIdb22LhX/
%(K@m@Cs9cY9MQXr$on(@;t8^FIBcm.+8(7V+26Mph;ngV$,el1Ht&c+blLRGg"\_a[e+:;0_`.6]=dXmqbaB"G3mI_A(:`AM$.Hq
%5FT!sr;4IpA4uCN@@[/2lITt,eW--WHJtP2VsbZF."ApNr:5sfZ:/(&.kc8K8)!:\S[A^smJ]BKYtoe@-@>X@NsO_4Km,arMu-<D
%%[Ipf(T.I`'9s\+LNnk[psR@kqh.$Q;!&86RpIV7DOJf>j'n_9HF_-%L:t":HipT*4PP.1ZTj05D1-J\Pi(NUCV*p594<=JYeN*F
%I,<&9jnu$anlG_G#qO.%<tD0g8@lf"_p81<\+uT>AM@W<0Bo!qrmLFZHT(<R[pIC1=f?b.p?CMmh&eJ!6odE#-_f;,:H$DZ2oXUl
%_tfLkl:4(!l'N!!@+0Qe/m%qBiQ-?@BWlP4Vk1PlEA0H<B]o)Mg#@*0^3AQ=[C<]?q]2L/(,LCo]2ClepA&N2*.>2T(1)Gl?>RUG
%o\pi?j+Ym]k5C38(+PT_+"'m<Da)G^]_LOCibI!bj`_%X[8N''7@p+H;-R@Oq5Wj2a9e>7[)C(PLZS9&Lj9?Ro<3A(J".Vm)<Ot4
%[J'*8B6g11<O.\Qqt8JUX)B)XQD5[_V-<[n@AEaHCF+5'];JF(l`D,%8\A-Dl)0S$j!UIW?"Y1UiU2JB6uL?;ij7D8rPHCQ01!+p
%RTh("WHS;@Du8'3#k-6j^"ZJt+S)A:^%m_kiFIj?/D@XUHb6e7lOH$k>3(=^CL=i#b8a&9^%(FE[Cqk&dgOJDpn.+=4*PQNdECR0
%[,4Ro@ro#^.Dd<8c.gD(EsUmLXl=*p$^m(!)t/]=R2qJ\4_;@t;1<@0+3(Jpio&S60eIIc3t$a:Fi&`F.)D7]2qs_Q8^4]!5.OOO
%O-Z+R[GJ%8)r@,AqP^P:h<dC3#sR-loAnlni9j``FfQB`Y-\._3guZ;]M^uJGX9'c>'#c+m;`m:nL<J*;oH]T/TMps`r-A_<-7.(
%eCqSH>M]4`&#qChaUb#WW"^`%n]]A8VFg!d4?D\!@hHi-DhhqTA^aV;aPI.TRbq8F`D>fR^&,4:Gk5-dWL0kJDK8_N"Pn$GEoG"&
%r9(r'B1qi*_!+qTZc+f05@%O8^V6*Ul+:Y-"?Z5K@57dq`D3fLB;8)lWDh6D^3,Jpkf[`If"&Z(NLQsrfP"ur\+QH)ludO:i#@$^
%)u!tZq71Fj,1a[ur\n<+a&1a"@Gg8IoK@1Z_k$:4P)rn>3^[:-(8j*OoC:f&(Uo9UXlnHXWE)9)k$@XffjFOloU4-q7RGIMdu..g
%q/H5^C7bDe=^IPf]6D7K5e44]R.k5[=n>F1g9%,t0YR$hD7[(J"Th+%AT;9e?>&CFT*$h<m"]Y:g"ou]p\&g@O&LYimaDL_lY$%U
%iQM,b>,;?bbdAg#p&\hJUAd!/n;.es3%nPcD6JGDj"[t@,pKo\l4)Zq2iD%!"I<u4M;j]%G56DlmcEEU!:`7Y1X4qXHS^s]UL8sA
%NTE4!:`$0Pq5m:?g8AkDS\h(>`FE1YS@Np"X++<6[jq9ol"B>Pi%[%$^A<3b+4SuRh.uD9:T<a+K9bJddJ!YDCACHEZ!q(tn1a>/
%V,FhulK)&q]D"de[QmNuY]3q6O:kbXL/V2<WnZOBk>UpH<l)t5V:Vco/"=#n54c_>LuRQEH#9b\AG-.4au=auSNH;SXHgM:gfujg
%E9@Y#SJic7?bE;sXppUASER!!I2M+rEhQn7GNgZNh#BYUq8S<n8c$,KpO2R,Y>nj7H7S'8O@)4i\hhM!F@>,1DQUYDrVP/d@AEB#
%O!#40:/;[giSBT#=MA*&ArCB*HY;A.1A$uXmH.QkXg<!$[jn&bRJa,_]4FOseafs`'[BL$?#ScPqU/N:6"Wc8BAph]]jC6`=+(KL
%o@$TgO+YsSYe&8$7`-q#b@XFn8"W=X]UphCheCoPh.PQ!`SLCGr4k"oY;6E*,+\Vi_Uf%I88p^OGrGZ8L/19*:s'#eml"\KmMR"*
%I'hbpU,%=:]oCJ;jj(R62[ds'Iecj>/q(DnFD0P5db4LLOsH[_mD@`'4'C<q!VJ#k#OKQribnM6CiT8gF_<\SfJh1jVdYLjp%%HX
%6j(`9YCDLS5-OA@jPL[^bahpEP4^-R$'QSK>p?]3Z)mJPE+X7cnC,gH@X`+'[ICiXCCZ+4Xo4sQf7id1l)8R92I?r\r3bhDa8LuT
%O?aH,A?9Y-rTtfY<@K$7cJ:nHA6jl@,J3V'h"gYS^0'U\3SXCfb`KHCKjl;,S2BNV]p5A3V-.H;%/%ZGc3'5RgV'.M^H?)+hcDa<
%be<$6>%OCH0H`F4V`VBC2S8@'PCMEDr+7&L\9HH#%?B+LVcW:=D6D-2=h-iCol34&bPO^8q/_O!hLA_]HXD1qD"m/8qM3nX2\qc0
%)kF>.Y%33nN!h7%,`+]h]Ofj$Sie?hkV3D1B0TE$rV]gH>u9(7IBuqA-^K0:;k-b7jB]NH4]?TOA)BA-gk,7,Dh%-:=\0=*2T(7?
%3q!gPHou'Vp7#D1E1lI>^pfO*.hP+j46sSjf%9i+O8#@l&jVSsh6h:lk1AhY'7VD'B:^^kGA#bb$k8SI['S=GV8igfq6kTg=M0QV
%4qD^H+"b*rDuStEUPS#CiCiRUXb$(97DZjidbEs`oaa(;YK/DH?G*m6<I=jrPPS#76+sln=*XT"Q5L[RhS$U'hOCL[X*O&>a#EJF
%oQO`_/I_m)^P'dg?Y=`]S^h\G4OXX_iUaCSjiBCPeRF#[dZHbb?X-q8nn'1aD!\+;Q\-qP^Kk3<:O47rYuMr:X=_hOLJ64*igobe
%<kn3?m`(e7[2da]XW?&bfaf1tg5XdNq85[uF?;[2f;A@-_>=KgC:/6Fe(qD:pWGc.hX/u#X*etuotDW"iV4`[")mna&T4.;rr7>p
%02!:f&1m<\17@U$C0WE7jbr@<;_(rE%$rg52X9rVh^iKMF)j#)G?e$/Z[<QXQWo1'DZ=.($]8p;jAgD\+lC$'`l_-8.ta,$Q_X"S
%G]+rqI9f!\N`+jFW&sD#EE:ksdQr#NIj=0IXjB>hmZr[Qg6IRn"/%!+bF/*4F6H*?"fG49[TE<LN@m9&PKuahe$#&X/%&Osf&nEo
%(/(4d]B\8->4o(M40J#>!7A80!6Ef]JU=J1pd0NS#5q2tHlMc)G6HW.EHe!n#[/p3RA;D/*m^QWbXp\SIb8;00Q<?tn?\D"^^7oK
%S!_gjg@UQ18icU3\9*b8e0U;44Ou[)GC0]A#R3>1Q\"sbbNCgJF4Z'#0(OrEE'f'40EU>o-b8VQP$N1!&L>F"+tN/Gq]X(pAM9H/
%`_MDue*jBcrR6o.L(61'd,Zr=2t7,d,]F!)#0C7"f<5;nWc8\G8*<mn]Q++D*qU7-LrpCkp%[rO1JQ$g\`'%1BtrmU,Y+,CjUKFc
%0K'i'W_=)8Qhf9Y4c->W^G_d@P6X->:P3<&LO9]a%j"D:VW$4`2o)?U6)0K+T@cf6d(+33;Bf$HeP<Y\CCOTb\3R3Q'We.7>%i?8
%4gQ:l=D7]aOOnS5E:Z9.fDP6793o=%&C-\&d`ra-e7FLnYJR)%R4lAmgWa5+W.-\Z8(mPhNOmiY;<V=Zb0VnhJLb)F2tor#c-jpQ
%W]trLY'i`en`d-a90Y'hSD_9OIGScs007bo)\8!Wl=bY<A[k]0VN4p&RlE&RHfQD[)0lGqYAZ;0>B4_"T^Ap'epp2/O\t.nfk?UA
%jO-e?2=%XXYJ1U>;u)NpX7eLM=fl]6]-G3$?#;JLr*7$,KbdqJY?gq+9[_L3!cE%MRddLtdE7:bCmg]0@%BT\/NUN27GA2B5+gZU
%3>Q27\*)&I4.Q6q\d[Tkm.\fNiS@/`<'0D$pRm"&ZQ+Em0XHEL3"0XVV19RqP^to+(Uq1F-Q66#J\UGKq-)h(i1gnLbZiT=#i!$U
%cuZP@I>r<jZ?Y_TWE\1=llGOP9!rsm"7`"V`.9MPcqf`*h&1J31Q+1=Y9Lf.gH"T)e['Ge[Ck&Zo>S]CO=tqkn<X:/,nF7NF@>!q
%5,E>"e^U_CgGYB\3d!oMbej71%5Vt#B3t',L%kPk^A*2?d`<nD0%,iL(S2I2"!.[',c0O'/[aYNdTUeO^+m#-*PRts=\anWWHmLs
%E3%JZ?^XH.j5do%4TDo[>Be)>FD"psc.D:9<Qnn0X'8>STa&5&m)8WU:#R%`0Y]gV^,:eM62=hBjhA_CItr#=kpXSZZ^!=sDXRJn
%YN\*Pn)ZGH*"\m5Sb:G1RuKaP+d_+Z<6a/Dj>Z>0NL8cZ^)W*H4mi2TQpAB._=t<Jrdm#[QMf,*0bF/Y:$H[s5"pGs526+t?TjuQ
%Mna`m:go%G9(R2,FY(GUWR(hm^6Qnf5=CWg98hL!Z's-J*9LkTZ'mI7BJDK>MEEYF"t%LgYr<ItVZP6X)4YVr8"Bf\,Z(<=6*rhb
%[.IMBJA>(n&m1?%V1qi0(E:7$c!6(b!_>hM6,?e;=b\?bo9ajL`]B3Y&^A5uJC9rEoaJc(o-/!-B=2AteAr#,J1NmC\1Og5#\iN+
%`T(\)P99*N!]+:>Vo)=EaIb8[jmN%,?P,G@gL/;-2(_Li*$@-H"@Bk2n^OUr\UR&SUs?KHR56m_"WGA@`<0X\g2$tIZ"6H?#,-Zo
%7S-NO#8'%rYr'It5\Z@3K5,.m5lEZ_:o.*`NY<7!VX6(2_[:L](dr`=Akf2j-UZA1-;]c#k5'uujdKuN`RI#?o-2M3PiCd:eW@*=
%&=nr+)]6jh<XXj7&-GFD1jL;gM_CM$..lVSLgmd"dPRd'K(<UWA4#<A5(+2khONaX#LU93b5aA,HF.&`/U1-+@g>o'+cmm_O<m^N
%60+K_6.c;G)@\f'];a2I+TeP@0uuh5j?Si?V.kH)<t8t.$qpIh`0X/b%Q3a[Ib?[+6qf._dTD3uZQRgW8$k1PnATuQ[5_:JF&Lju
%kWK^8#0a[MMWp(5Ij$@BK_7<B0nK!2.*W6C$#/TG#]]nKOg5$t7"?i&Kou2W,O1J4@bQd.\^I,A6At(>lc)45XK.T3&EA&Mn@,^G
%:R]9EZNl/>_&/WLep:G&85/CGQJ4lKKOH+L6mk^2c_EtJ.,)pJ#9NAjft@s[W%;d,mhG;2BS;3D76_$)i'NcDl[d)iQU)(8LkQ<`
%"Rdgj^u0ZfOIf7'8l.lK(E00CJ9_Jl)Yr)B#K7a_(;7X`,a+&I5c`lc6,+tK@P;bP8?n,[Zn>hR=\OZC0GGBp/IfW#TE^nE8+^eW
%*<h6I0#s\H#aBsTiEA9)I!;FfM18*e=VAtfA7a8PIa(0]`RmjL4IdC[Z4rMU&JJ@5KGiM%-iaSUDG%jJN5Hhl('Z'7`trqTd.:pl
%!:c_6GtT@Hp4G_jXE?d&&q^"EmQseS,[$dA/8HO`:ob^M^^V'"$_Y:E#RcJ/LB>nG`3Kf5QCJ+!:IOh"S"_,.q*a#NGoe!/S?!_<
%o77+J[G57W7g8Q#dC<WK$clDNDBS$M'*)_Rbh;5,mISU:rIhli0hC%8CMld$#dg3;/`Jk/$R2\c%7.)@'M=&;LI+k\=Fng:LhP9]
%.qSR6fJuJjULhP<Zu&-"T/"'/F;CF#.L90JWK<r!N>.74`d4^qJOG/05oX<\65/rQ'TnW',0DSq`fL3r1=@^BNtVC0*>moe;YSD.
%5&DLc^-H-&@)`IZJ?!-Z!r>_]bj]]iL@L'.XGDR4"dVI.A#W'iKCQi-BreT_LfB4i-]C_#cl!HGJtU(VHnQ7LA4YiT>M)Gs(9#fH
%9\DJ[6i93lJO.;]H6\MO`[#D8COC\r4lq>F3&6:X4;)qEDJ"od`,pSSk*qkP/5M)?[?"#`d05*I_OA!`G^aZW5p6"8X,\<f8.o%d
%5g"bo-m:Tk;?npWlBG9g"]h9n'XL[F4g@ckcGhUfn5CUYg8$1"e-M;rS.QbZ`=>;+%>a\q4s>^gj$^NU3cnkbedA-afT)/m+m\F?
%=U55%(akP`S3l;YLf3u4:8Y)pT0Ze^Ot$:RIY=+#H>X7fR$f0qJ^]`9L&d$oNS?LcP-[L7OGOFn8;U=Kdj4SA/sEZ,emWS77#DHg
%L^?VF+ASioBq5`DFj_KPHJ1Y.V&Y^X_Y'Qe*"H^X1*m)F@qO:XJf)O_5r=nn;%kT.<a$1nUVP/TSqmlN,_p&udVN1.^3/b"8-gM>
%a7G6765!C0dONs]!C\_ILH`g/g"D/kb]hV]=Ti39_qGCkUkiXmgH6a"BbnF-%9f-)_esSI*538X%gK,V`]q+jR(&C635?=SZNVFC
%>787`,].%(PL/;5DG);bnVDu3ca-(DY899W6>At;f"VPjYJtdB-et=)lr@Jacr7*r^s`(>h9:Ko9FMcHV`hOAcFjP+\8ct[Vq`PG
%8.J0d1,u?dOP![j)e3GqP#G,_MD#Wt,&:j]dan1EQ"_%+[u"$PHH/UF(oF@g*,?cLLLT6sj9:^<Ff(mfXqJ'/NfK,_0K(3]V&bCH
%rIEmlmjB+5$\)pS4HP)F2=9I[mp)1j//O/q!^Z@\JS:3s`.jeP#JD82,S[Q=.LfJ"ZFKO9fdbF[Ynr9#<H?%I5I>3!guN1I9!fE0
%%[#pJ[UTTs`s<H<hN%`*]$_4SM,bhc0->'HbMJWB'2mlqK0dl(!>@;,X:INS=`)C>;@KZG)X!$sJS7q#o)ZZGB*XK"MNho!EFGY2
%%EG_,^1QFFVlV,\Xt*(a&YLgZXeQ8#\RHL^KSY^2a`h)#!Y>-c?"U@[@4a`M,c4/WneYajJ<5RR3.J2`/2J8FH,M$fUh_0NC"Hh5
%3Z!qr7O_Q>+d37L'<t<k[DYO"3Y[`$[;Ung"c+-5g\?V&6[F@bn2b)l0fVVAK[/2`8Hp;C_dYn8c9btN%JD&5Fm-H*OP/kSU'f]\
%7'X*uZ*2rgaCi_^>t`KhlaJS-!O@ioYK5]1)<?_kJ8cp>/QoC!5m'1C\kG.UHW6G\Uj^j2@'DbkPD=)_0js?A2I`))pI/5#"f*?\
%"%!8%TbT<d@hU4oW^UR+,>Qr5TZCc\O$GU2"-qA`^lel(I2k6LQ-P0l4D%5QCthdm@01a3RZEcU_bhhAT@/6+#n9-\_]1%#kQhV:
%%L#:5Z10h(!KrM-8.WmS`sCa:@uptJ066ClZJHae^t(Z9.e](iLD!6)@C=_o03PE/(TgePO[bBORmrN7'I,%O[Q[!!b\K0SG-)u+
%d.!%1\XN1d_uZsXW/7&VJ]SL]..EbC9<7Q0Z)Pjj@tC=>/l!2YiifT6)o4$,-l2QJ:-K..7#Vk6brjZ.5U4H'8Yi07>k8OHMa_>n
%ncKatY,l]PM.M=8WRcXlac/'iS"?Q.6mt.u"hrXB)E(6Ua>4Hs:6cZ0CGt,QM(c)3*qJ/"lSpC;,%i2VVNc+!?AGdR^kb"!!R^n'
%9gSK8CDpuZfFLh?K^k#bn]7+%T%Ll\Sg2RL'LA6k>]>4qZRX$?d1TtHIU]d=k6/^]*TDnXD$/hb%,qq5H5OtF]8(H<dmGjP5n^.b
%6]qTGfJXp%gQ3$q:#_c`$Md%%;e9)H6GX"toj$u#HRC^EdZ@]e`I`fg-0FV,DJpe$&6\(F6VM).MMOW<E2Ull)CuLCk1*ZGPCW+0
%ll6D_2b[E5"jOoPCd0-a"628'&2-=4fcG`7m+T?]P'A=)LaiShW%C>\fS*!*)Ho%%,KMQ@U,X4O3mDHnkQ`MDhN+`DA_5L*1c'`d
%,^h3djnLS629KX>;$#pF(oPfW&uZ>K_4ZTo5QpYN1O+)3<Aa5fU]Qb*3FH>I6?q*QgX&EMq2Kt%"=Rkf5p.pWCsnVSYXkGJ&Ba",
%fJl:ij/$TD=qG^S>8MTN@">0A]AO(B_[db9+ENQ/^(N0]K>u?:m"Rt@SWTRJEMs1SaTZ'KA:4^R&[5LT9h#7o"KHjI0)^;(9E]eQ
%'n_kj).[k0-Z(*UWs#7`(`*ct)&Fj>ZsjWU%RhGeNWk8k\$=Rm*^YJ<*Pm8L&s[>6'H"fl!tq@XC?2r!#k9kkSX5s*k:IsbMjuIJ
%H*7B\FW-M6*5NacVB"*KAL8FL\ugT'&;Ys.b&^Alkn36,hZOEWe8H0l,/cI&B7hJD7(hY/UccT1T]a:n":.=s=r<f\&gIn+IG32j
%XQEN4%&GM-%(lG)S+6duJ$M+u]Lno%EU45G0*9X5Ou"9E3_gl]JTaE!4q+Lu(+ZFi5%N7B7.#QocCO$#QrjeUN#gTU*bX>n!!hZ)
%UQW@\[%kee:i957b<'l(:&N'o:Z=ZcJYR\`*"._@\tG5t@01d^S-OW_Ri!jKH3K?M>a=s5B11X$V[dC=SH,=($j6p86p!RZ[2pYk
%V3;tAG)R'42SrGp7aMIk31n+(K*^-A+qma4q1q!;S*D&M4!93MQP0JX,gJuS?!CZf8k=aU5(&Hcmp^D?ig?mN+0b3pn2#F8/Fo'a
%S/]d512\Y*Es88%1aV2#MP3N#lEfA5"<!'PkD@GSa'rOkWCGGB^EXTJ9G;E1``Z\,MST:n)hCNb<@18]IF$mK?s*^l4r^&/SN:[4
%K"VGOLH#md;b9NZK]:H'X7<\KH-XR]!Xa@3!m!;r,1P!+b-;hrG7MbU$B\S5,Tr+j$J.fk)mnG1c;ifl@ONnlD@V29#aW"?^1nWK
%&3J"7iY4eSX@"3EUW#/I^'c@<0uOLk&kM)a<-VQB[6QaQb486Cp-(6)!R&0<NtNQj[7t$-CF)db'-GqbW5Z.R3@@>*<ue/05\-BH
%Xi"iaf9WLdC+Iu9"Ap%.5(oMMj$ogE,t<qt<TG@fUsjl#$eKUY"[3"E8BCYM@F;O,S?4G!,?^OT,rabghW<+rZ2nSj/5h!,1<R^a
%bJ=g^lof2.k9!%:mAUo<D<'ECj<WZ@48DNG1,T,a7L0HE3^`cN(#Zl5P/F,<#V+4%,S45s8`?m_a`:boKhOMgApE$'M6gZW#I9Lh
%CY,,\P$NUF$t=dNJ*Z9&ZJ$IJ0snZKZQeH8T>jGiCiu!39W14S(+J1o,l'.?kE@^'9-hRt$"qWt.hi+?<5X/38;Ls?XLJ^q6<HYL
%,Nn6RNck.DqH9%6ikYX/Rth]2"'J08&=X.LM_k/bX[-6t!T!MAM4A\Ikd0Boe/T;Q>uYk,m&`c1S.`0+$A0\d0J!:?lnX>M1;+sG
%U/bs+kV.%+\M:2<@F2MhU?GM-,,/CR"</A<K*@6X*I9Dj,[i(j&EF4A^nB$T_B^Z?-<H^iJ.HFs$RE55%h_uJ$k/mU(H<V%=%QW<
%FKn>S;;`!0J0$[H(d"]b5-4AQ:#o9%#[c5*8Kse?Ho=_df2h]uJ7<N?"0'"RK$W%?[**cPIRVD0m<,ph^+3Mt;p=J?nd.^O`bb?g
%daf)ZXK2d@YWM.rF6&Lr+9s+l%..")C(rde7$/,rMf."`\UAuh!s%p_\/HL5L]k"CHWD*F\3YZmSd:u%O$e"`pCVgN^6-eu'e?m$
%2_3CWl"'so![q/_EJuF)%Tl;%'Cf5d<.<c2YlZf.mu#$(+o9JM,?*5H,%;p$]X*&clhiOK:]_9!"MtLsOWnFO\4A4S"-+/7>(Id1
%.8\nURDK=%PtI_'8nJWX]+%];1Dm7D,:$+C3Z$+sXu6GI7h@ZO-O?iUa#@H:,6;OjH[K0^:h6>CVS6*V[>]_:i1Y/.KN?cJ(o]s>
%0P"l''Iqg\'.*6P-W%+rSC^=>1JXT2!7(*CN:T_Nl^GaZoh?iVle;Q<A%!(BT#JEb4Gc=TKU*;/%RQ(*'_[TXN>fX/?p@-U'S]QE
%Vp&b$0/5o/81]uj*#2uq6\u.baW%N#lZ@<gKbD[peY/6f,J!,sBl#%38Oqi2<Q[s5j+31'Y;Pf<N6k^_@Va"XNsK8ge.SFi`K1]+
%nqF7Y3`+fk7=jVQpW-j$N_G!8P`P1+:>5Qih=APD"GjBpdN&`_QC4^f&8P>s#3d$5iF4]2lIM*78oT'pOVe]dL@mth;pWS>4IliP
%aLV8")O5W%'#\Bq*2QKR'`k>oFDM8S"6_hDiR!VRS/.9E;VXR1\jQ0NKu?`$S:JJpq1jkI-)Y=%n[Z407nspJ)XJET3(Ye<B6TpJ
%Jf'W[a(1@EV?Y$V#:'2C2qni_n::sYZKK1Uq4q`kGnNsbV.L3:Nd<,*Q@,)cTZTY8Zk*'[ii6K)Gn7PA@6'n4X4l/8c[$QlV`n#8
%'QY"!7?6CfLZsC9Z&,$U+jmG=-5%\hKnP<$>Tt19M4p^Z%e5e1#nUm31pp)%`&a.XMFk\+;&K#e1>9jp!7`Ctnsukk-t<sQ8OReC
%o\3!$5WlA$G=E]NEg:SBpfEuT^6a3HNiPH;F-@/*e;_YoI*#V3q"+t_^]\h3@IH?e8:Z:0R%soe*\0Jd`Yo^6`.*;Vm1.R,#,*F.
%;A5c%8[d4n#S4]#+MnF71e:PRf*kRQE'$pK8:*b',^E?ubQhBF@h:t7_]@5-8&^!o>l@P;j+Ik(6I."8LW?Yb!a<L=']N:-r]jDr
%S4Uft??Ba@Q.ff>C7u5>(lLgm\F.IX\VNXDLk7HNikR9P''R5ZI)@Qr1lj1AKYZX]<XUG3&C3big.!@tf5_`=Kh4Pbj8=KpJJ)3b
%<,"g*+LKWX.4d.Y(1U!/W(LVskUYm^7L9e+44)R`_:10@lNt+hOan?Y(Sj=LVT2C#;Daa5-r-NN`:Kb2W5k)jqhV4k>n2GgZH$56
%Vbs=JXWmd$e?5gt+I.`dEYYG0njKWBQjq\hO1;'J<udl(b"iBO,A?Mu+@N$FE%t`3=b1gR"T]70-?hAPfL8ArBOh;!Do/rVk(Fi]
%efQ#@6sY3P1s>P^!@gELq/l\"G@5?H"/6VHWYGjfJ:sTQ+ig5a!\6]<AMf$&JQPqQ+m`]N(0.0!QXi[D!2*=?M[goS>WXTH-9t!b
%(ioAE`iQtQ#e.PP)R>i[rX.1CQ=gq"^&\iM0a"d)\ZJq&E]9H2A!WUWH#+#BBAqZ&ks?-,h?6.i8rH0Y^A>hTD>Dfp<)^f,))8;Z
%PD`,fDDEW]2!J-^E$q"K@_3<UD]fu,)\:FF-!A%R;(:dd/!>^I7Go.SX[J?ok;qP_Ha.+nUrj%++A-]p+kKQ-Q.:FbiM[k3#`4(n
%F&%J?]LCW5Pl['2i3D[&G_%MnSfm$9fHTAi&Di!i[U=<CL94QN=O]0\'(/^)#X]ejSj[39c>Z';Ou>q6'OuDQiVMg^dA4(?+_p7I
%D6.3&2D.^\fEr%]=Vd>Xbdi$9=p^@V>qQCJAe]mQM@8`i]i?=Cj:WV.7Jqjq#8iJYYk?!V.ArAK\fT<*>R6-M_d9$1h*^!#"FR:\
%&c".jn(^`4=V[tF,``8)@B-P$M4s>H9%i1ETR8O9:l2jdT]%(-d!/rPL:D]mKBT5SYi7sb$IlS:pS^N?Oa-O:&o^\d\oK5UK)(or
%js"q-pP/,Upd1^F^H&,%=!]Y73;l0jJO3u4S7;RlM)QoM\F'uEJO9Nq6D3]9Xj_LL-W6pK^i*&=%6d/X1ma</r.Y+\@E5u1#R:*D
%\FQSMdE'lU"F:YEYda_m\_:1]32(T::C\B7(1n(ZMlAmoNJKX!#gP*NJ:`0@79,k#_%YglO9N7-=$q&9a)]-5R#5#PpEnMu!>X;%
%NX^DSa@UTp3]=F?0U3!8SYhM]@gG[mS?K_b>d0fEY(:Z:0d+?R*40=1h4bN[oa@Y-KEC\[fLXC/l+i)k*Cqn2>V)0n+Yk#uWTPFn
%%iM<o:9d<l8/oNgM!o?R-o)+8I.\_+3f"b^N]PV,aBFX,T!9kc3RpU6#H4mAi=`-2<KsfrWFTZ*jB5TJ0Sil!6lN(`+;*4/,#m_,
%T3P:_LI1,X&k-%eDZ_.tniRUR3,6MiaK[f0[aL30'tc13iNZ4n#K$?\BEhtkEhnoQ3h<1ZbQIbOpCGE"%b*2$JUW:W@W*)]*0uCZ
%?A^T`KJqGCC*Qa5fL(;IdVoMc4IN".FocVE&Ha9/PpB0ml])4VHL#Yhf,><aCehs\.uGA#o>#m$*!5;t"2D%OfL?)N)3eSYNaOhY
%e6G3Hh13`VIAuLULWpDLUft=i?[382"N6roO3>t^TEr!$P+W_lbB!8$HjE+F3$'*G80G5.Yscpo7H1It5J9CY]g-0AUBCY<TEJ^H
%9-UM?$rNK?nfYBd7=o$F+k6jsftZH-#B(d`E0NIQI'^i6hP`,&,K*+UneR+4Nri0S364E3YU9RQ"9sb[!S/)Od4AAg6-\u>&0p2S
%"7JQ2BeD6J>b`R%O81PQ]`hl[b68r#/WP5a.,iT:V;sfN>7ZOCU/*0ZkbSj!,?>eY>)!2,CH\+XA=Q@&OW#YrM`jJA@FB2H!ou3a
%1*EO0_PTDDKsV=e!<SWS#).bW#YIQp!8PR)K'&h#!Pet`aFKB.)DWT!rIf3M"^p8SYnBC9,*:+&O(ClK#o_^d33@"e&s>RoRP*d)
%!iaI1%C6W`\U5$^f>t_OEh8lLhmt@r%k^=^P\XU@E."c?;QfF%k6':*e29e&0-M_q@\D^9.#<BHK]*;i@WC&O0U"q7V)sB=foP'9
%1m.u$)tjc(KSh$+Y;u<,Jf*:7EmCbCGl(o+qbel9:_X4ljh`0/7UVbf?u6gEVTHj[1nI+a4;JOm#u1u^Yd'\>2\;0h0,`be;I&L<
%$<f&i$e\W`I-iRrK#\]h9!A!n0uQ*eR,XiUP_1Kq<L1nN;!&"=Df'e,K2Y-.$US1)frF0.Li$AWQJ=K^n`h)OU)(0\ckZF4\<:;!
%fU[t%Hr2$Ii%W4-h)u#SklV\cZ%P.5g6"&/LC4_kIkgMcJ8!i?eA:1P#Gd#]UYg+r3j;tR)M"-<3j4W`=/B*KLM])qnLn7SQLnW:
%]5A13"GF[F3/0E'.Y]F?=:R2T1^al/,lib;<l:^%pdu)+k4C8Fr#m9o26%Vs0sN)2Y<^b_">+0;L2[h4X=j8*4MJ]8dj/>)'aZ'k
%ctpcU8rPI'k2'RgQEn,n`fULdh"fs;`b[rI=Oj.8I4goG`,6D=%5m_jcH+Vc^W5I5>_WiJ_S\4_`W@g1,R/qjZlqnTSDtT_=F-:.
%duh6sKAq9;a]Sk1M6a;*&.*>f6f&m-#K`eZ3_HhFjCfF*D`/Bk`e;]:.'W3og`^s[=r<s83&tmfV:qST^1)h+8).j1\E&eQ`<<+7
%ngg&)#(E9p""rMg?qtb42=`[;Q[i2Pq4`u7F7&nt-:l3<BCsJHF/8)_BZ:I^kK,#MM;'-XOZIb!fSg#e&V\:\+r$]fM!rg4;JHHc
%'9P`F!dYi6K8Co%@]="JXK!FaiSegZ;s_dRE-X'2Y?AoNE(d`Rcj8fg@Nm&nj<u:6P%$=oPIs/JEG3BmO&.BhBRttIc),j+g#_iY
%)[B\'.uh,F^>5Z?(6%H]lU'$^QDh"1YD^&GfjM39&E,#i*)fa!D>D2U@A"^X<J'4]3+e!?";8gJ^uRH6F[=-UR=XoKUrikX,Qi>9
%l0+=g/Q$`nDX_]%`8D!"ds#>O71<.O&'7N_0$Xaa?E-qKj?.+4_JiYfFb*NqCI33jGoo&WNI0QcGb0)Jh2f@_$oPnWm*c+h&eo+:
%^-)u4YFNq`QRcg,%9Z7aj1HUfW$%=nN0lV]+<GWRP,mXV+92Kr<C/g&CBY8U1K$gYC/1u<n:R:RaAJXuVr9(#mbat!e,"$(i1J&H
%F@8LVV\aoCG1/-c],E,6-(uq#.DaR7+jU0d(n66t8^mkOj;W#BM@[0OJD96[Pr/;)RNX03-Afr[cH?A>d>CBWfmpth)Ds5m1V:\/
%&HbdSVDm$,/cd7@hehD*$7R:KaST__YS_H?Js*c/2akY$Y&f+e0Q%Api5O^fT0fP<&BgU4;?a"M%r@tR@pBlU:aoGO7`eA+K_5CI
%ZQ>I?'#aR-8^si>,dEEg[P)hrP[(=)O8FR&78e/\$Z38aFbt<r;SWLO8//*Pp$tM:8o@/=L+>5kX3jFKdBlrS;8>YKb8KP?,ue>9
%L7gk"$gHY_7Th"Fj[*Ya/c"6GW`;@lV/ju\>B`#g\I8Mj`(L:R1YW(R<KX^l8Q7M2hm61/.,5\E^+[f5S'S?7NRAq7<9,7;8RXW$
%&r11@rQiEpbJ],f)N*/ST*4=C&]\l;\9rRX,I0jDE$Q?E3;hn@Oqt.g:o8i>0fWd9^(T?-SckcTXtIWr)WThW;ZDSd(1;gu&G442
%Z3_`V_KQeJ&kGfQo;Q!Z*CrseF?Bf716tLV;LCb,aHuX\bL*nK\#`"'8P'uO=NgfMaHVpo77_q2&kF1@.r>O0$XN6-L4XH_1LuCc
%>"43dKKa0:^0]g06]Jc9E>^J+"gIs-9C$TS2aH>Pn+((^K7qN;iA)AGI06Fl:gu[5!igjl<?_e=@#1nE[*.gO=5Z.g(_Q3?YY2eu
%RXj9@LfmbKHosq--l6QMG7qs%7M66*kWH!`L<?_q4'9$rc]3oT,,/>eM%/JhD$7S3d%?%Fq&nD3E8c3V9<pm!Ugi"j`O?UCrZ"IB
%+5s9+Zm22EVA`nYnm$t`#am)%G=o3D-L!O>rMB)*^[+4S:7dC>Dr,;-85sQ:5iZ`/K`86/##J]X.U6O`X@$BV;;Wf!i+)pWq7$EY
%":%>9R@':N<PT_!Gt\:MqaIR6<4lhf2]R63jI-dBqr+2BKrdrJX'?mC)9F*OMA%u%0$UdA6pQX;3+dr=48]s]@_Nqb@E3\c)\oYX
%1EtmCY7)<U?C43!#0_KnLiZf:W*u1+)qE*hap[PRNQMBeB*s*tiQdPX7hA@^,a>J-(5GFDKr@#`A*D939OA[OSdYmV%^b[s,0GIe
%4G\&8[1M1#An^7AnOA36D)aqdK1&r!Q]dc0OAW$J'M+\q4Z_YW8e-rM?anFm"@JV]+XCQ.<Hq,(8OGm`PS'RD`s)O,aqnnla@.Z`
%$^(rA5E_L^$k6[$a>)[K#DIc]W9[DF'gRucKns+,m._,(6]`]1_dKi-:a:+^fQ=G.6AWklaIqCQ5pd#hokTSa!9t_LUA3.rP7FZr
%KJTj'0gD%u3E5"Z'.h6/\:=dnJYj!1k3EEUOc=ot+f]0X$P8<\k)@IUcljkR!YKl"1CDjqcCs6fO)]#2kg#-N5*:K;OL#;a/2jnH
%cEn^EfUS+i\JQL2N#r,L*!R_N"%^MqSa9[](aNO)hIRFu'^E_Z5WCV70I!J:/KiVC*s>G6CZOtVh^Bb3=i^YTi1gAgEq"uQ9("_q
%Pjdd->=Prhm:?94o)Rd'K[:FU(gY<-Lg3T,LGJqY<d$YnVG=H[1=cX*Zihs*k/^)H"UocgKh3M#&gHfkZG`g`,mTGq/0M2'$fhO%
%K+Jd(%+8VP]A3i`r#j8pU,"E7@\,<h@A'"&M=?(LnctN*<1MToeY;l,8a.Y#0('/d2Eqgd#rkY]=`,(sC=!_Y#jR)*EE-CAG.03/
%K)_l<^78YCEh9mMU_%D7Kk"LFP<l";NK*E`DZ>53iO"9d(:bu9JH1\i5Wd+We6Co*4m-O`V-M<`T[7a-jBg(D?p]qj8SA<Jrg78L
%9gIDl.atY4B-]X8aO-qd]Jb"0^8&@Y23@kNeV6hl\Yq)Ufc]GYBE[K?TZH_&=U:FK5]#NBV&+h_dZh]b_ND?iNdW[!\SJoqO#Q&b
%c6?F>c993IYZiYO(61dPHoqV@A#p^Q,W'Ir!G<ocM>/Pq7@.T5"_@eFPU-q]A""XC2J2Im"L?Sq_1tk@HEOiLeX'lCA&h7LaJ(X`
%31e/Z!F_(o5fB8"k1a%QcT3ZaPuF%g;H]],-]n=U3$LC\O.>cPBS=I#1+:08[&Dmo=/>of?jEs2%Ke-rJQDL71TU<_YI6]ElUWjY
%$t0dR0jmG,i)V,FjMVn^>S@3QN.MLh4P>6%DI26p$S-`eE\e2%;T>^?a[43DYoa*=$6ZD1C,h\49^]E!&$La_)GXoH'Z45^8>4<s
%YZs;O/LeDD$ttH[*Ism*3fnoXG_Qq[p)\B#')BcudW@=d%OuQH-.69&`5;8I#f;8Ob.`3"O:/6GjGcDUQM!BjT+T(ED"u.^E%=0n
%$^a@T3eSVaM[HY/Yhak&A`Q8of9idV(NFUu-)BI?N!/hlUN)E).&ThG0jm<4EV9aH&\.T]kYuO.",MajQf:XQ$!m@#=0RN@Q4K)J
%,^lIJ,qYphZ,<i&btr'n77PER#KFJL5d7>W;t41Zn#2a>E5`Q?$/qZA;PB,6AMA(.\6a0Z/kB.q80Htnpa1rcP&36f.?X9,UtfNB
%Kt>(@G:^gu>bPsq:A>Ma=(/;CKGHZkK[(EgL!6M'Q4M'/!i0BtO_6u<6Lf3k7(*6''QjH!pM0g%OX:9c?Rc+F+cX8KIVoLEMM8?O
%)2_H&3?ue&W/Sos%0RN*4W'5QT,CFjJN!j:EH4(@geV=VBKn+s<G@5^T,>rf3_H%b2[2+'bF8K$>l(5kL8?7rO%"?P^`j"SE-ta6
%b>8k`5r_\srnr]Rffhe^P=G])Ct%D3'=m$0$+5C&e<C;22@%Pe#Z:0Q.\Z1S[>W!LB4o8mMaSp80bL5k4YE!'<$?"o1Cb&2'7qTB
%:SbT&.AZU'8-/L[ZXQrt&M/%]WA0%+C.psOKfsef,A#[R2kMa^63euNkWk=]&2f3B4SWJ"5E6O>FW)O')7Z0jXEn$kJrLcsi(b<J
%_2.P[=TN72@[r=cJ4I5[\F6LEcfiAFC_t#fdOZkPGps,90dBNr"jU$d\Bn!7>;cl!o[Rf/EqSmO.VAkYEq'uO0"*h\"!dj\e$(MA
%Q\.>]_$/e8q]Za:0utp^"fI[0Od+YDO6)<7S,VmdrP0Emqkf8.)e-]$"q2OgK_dr/M(?p5,[ji1I/h^-EH/f\aUMkFrGct6CE"bb
%<oP@XX!IH([Nu%k]G3i4=(1eN0JF/_@P5Vjp%)-VjD6RbpNOFa`(bhm@Ikmf"fO*Y%IUaa,fuZhb7/?P;9=qj&aq7%__@J_m]fR4
%FtjtJ^)&=!,SGelQ!mOALV%4Lk3>s$i:]63*NgH_aP!B3GLd@XgTak\>QbS76rgHN=Ssu`D(4n;$DHEi2J;14)Hi0K)-@Z9L`Zne
%;hLB$!m20baq+*rUo>+&ZV4]\QUpc\pB[UhiY3HWD_Fj)H6+SLO?$Y@`7uPD-kE"]phK`rNW_GJeWF&c0(E+X#_p\eRf]E-,LJP9
%MB*QA,.ECY19rFSFTOli$#c%D29BD2_LMLG=QHR'=NTB3L2-$n8V9D[e9)YL^.D]:NtAR:jID*LkpKcBf+0DsG$%?a,Pt_4$CHm1
%L$MNS8eY#rC+-ejloVgG.2KO?e0WNE$B3LAFa22.`YAd+,fkd[h#N,D3,o6!4;N!m*ua7<r4H>]<fb(/.Qfa:_4-6RfelELIQECH
%.-7EVOh-iG_LRf[/XCp"AJGKY_kTP7b63BHZq8tdA8?RDEWm0s,naMCgY3oX32Y"R>qlsc*&]^#<9-4XQ]Nt:iEcKk=iFt"DSE9n
%#JN_W0b[l\'g%DIKAtu;O2lg&0Q^@/oh=X\B[4q<^6NTSTa4$Ok.tuL_M#:$Xb@)Y^8!N<cpb3*Y;2pkVX,;WXpXpk!Dt&(n?AFH
%;og7E4FYu#Z8nuI]O72g\M/Or?gM>`>B/r!Ybl#GKU]7e7YH+V+;hK.MP#DtjJ=TU=>@:5)`^=(^)1>Dr#uk@!Q(OAZ0CA5&@Z4X
%#sn)P3tSHo1].::.%o^fMaB88guNN/PT;G4ln'gn4-qL+Z\!+FL9ZD+]HdX"WH$gOAZqpt`1b-#=*urlQf:"-#>#TTGE)pCncVeM
%-iT88\LgKglPqV98nM"ArDO=Z<_+NU&17*U<*7?cj'E61qMs?^,-9f"Np?Em*!bM?k\*F/)%AWdXQ'C'"_i)-2ib.p_"e,YqIalt
%QWOO.V1s87D)*mU?6o(]rLkD8b0H>u(jm\hop'm6"HY$tdUagb`A.R&([_@1?;mQhbrd$]9,;@T2paNO'd%LJ-2X,N-%hGF(e;gC
%m@pgoM3N&g8gm'e/pT!FqZ,/d;,/?1`cnK9;hUjGnPj;"gk#"ed+jqj&1O#gL_t[9,)MjE8E8^!p/hL?C98^Oc,GdaEM\^D+97SV
%oDnH$XV7@p*u2b4ElgDP<U#OLNQj'VTR?Kb:C'-?+CsFW!<SM'!>P*'*rrhfS$dhXcq^t=]CHjT7olE;DX]WIPY=>gH(g$p5`M[H
%!$d5uAAgHNR`%NKaU"#M!<`(HU6Z-`s8Qa!hcd0U[Nn$*^7kQog^#1hOSjK&?V-s7!.c$imAm,Z)Oc6d$&VVHrHg,Cb^@CT*RS"o
%d#_de0lkN_br)Ern8Y[@js-sMScN)^5)u,R3d<-7GBB'FO3[$YNcfEY(N*C2\^SM>1!b:G@4RC."B.jj=qM\9ocs[3cjN'N,_>k5
%N!iS?4/Jb0S]Wim'm`3+TfILgAmuC9`e18.!mWBq'Ig(ceK'j$@_DtQ6q`EKKd?Ye5,c8<k8,3tMIl(W_"](#S;p:Fk-&p$Bn,p+
%\lQPUC1[<YdjJo(?Y^t&s/J\W9047u&n/2=\</fcJShs%hsrkoIY$56@B"4P;VO9ugJ_7i-gY(9jL(tSr"?$'XeXLVg<6@>/VcdQ
%EjU-JUM%t1=;rcg=4?*V^.I=Qggk2@7FsKh8SYo`RU#1UC!aQ&VXA7"QLR-dP"`"HSB`V$F/]?gn`W0kobHcim<H.eU62-/LfQ*E
%]#jP(K12Dr,OlFgI$Ro6_qQN[!_dL@G#uU=+C_8+WbMf-H_Qd).nHPoIB4O`n?om%G?Ztr\T=m93$6gW(H]>s/K`lEMD9J4WfW9-
%@A->IMe[Au<]ER"R_Du&RR(A%?Q9=,g>oXs0JBZ,*,u)O&#k0u<$W*LD;#h[(Nea)n,=9's+^g?C'0@EKjdVk-]R_!e-\Z/<C[DO
%$86_>F__aq!T[L)%@@?s;%FRt\Q'e^G!c-`+)?J<CG`Q(\?N0.a&3)/<*VCEH'fqNcMj.$O%[+eR4C[VLLZ9eR!bJGeS"Z\F@NX!
%NU+Y;k7q%,9AJfVOPB'!4/kF<FqT2If/!H8R3Jc'5EVXD&itc'dH7oD!4h@j`XVm35NbRbYua`.18r'h?-CV+5AJV9#)u*$Bg.ec
%SO+SbC.pXee7e4/>M`uGU-Y]KJEU>>/<]`aaJt?,buT't*4D%/#t-O&[-X(F;X'61@EU`"h/&?A'\9f9b-qk9\,R$(rUO$b]=]i%
%?4'\5!^`%Biu)5SClP;=,Z_39,Q=0>lQH%$6unT_<uo!e+s`&MlIm=al:s[CL(u+BdYDoe5A>KKCH8@pBXioh'4IqK)bcruiId5!
%?!]l'?(iOH-iTnX"`\7jE%#fI#23s;7gSG2]jpEgCSC"+;)gT)_WE#/j$=jfP\18_6W":SG0edAQ[gcEfU9A;'Z]i]+CitNY@7[,
%!Ta1dHG:JC%A#"*RBXP0\pUZl#T9?sDDEg3;].nm5d`W2lP&ugCF`4W_XGR?1'&OGoHU#;l@*I+)V]`n*ueW)+34=l]ET2Z;Ogf0
%?==0E/YlGk-nVJ(TZ_:'ZGDD(7]W=I;BH0A20Seb43[5g?X67_VpKK>]QU#E#B2tD%NTfr@Gkqk(N/bH[fTEtn%`Re:g6WAX&1&(
%T.KD]N8pLg4Dt>BTO6L*2^Vi_&>6&Q<YdL@$^e:@6^7G_Tmc&27J!mGM^phkLd":)O]R[9?2YbZ8X_3>_=Ds^JfOblH13-!8G-F@
%IM9Lp?Kl*@Su3F:MMjsQ>Z[@&e#'Y,Ci`]n)I(9FbT.oME[a<SX`NTB/d#Cc>0.',]u!HJIGkD(F&+J#6N`6uWB^Z9%'X8kieK1'
%b^^(28S_53-Y@makcE9E!&6MC\QgV8jML.cbMJIp2c*MS:)RYSroK0B'ipWjNX==]r55kO2aGU_6<Y,l:"#k4P=K!(Cul-WYNM9u
%94q^\0>#M7=QK]+)4I<o_<3/&0'9]"<\lJ'q%7bI=41L\$sEY7g5lXK08![8g<9/Kq&qIij&=&+RFO/mnq[mJO"aAN3:#Dh\cuO:
%%(Ob@kO@th's:lP0WSL/roP%#X.JkK.dlQa>c+mh^rUX0N$ob(h:3V]0Ce@R^KjDDM@h)Wbu45dbKm]c?*>(o^KNe<pfTM7i2-Uh
%'X.d`KdoF66_`\V:=fhAKW_pH+4.&*p.`HlQt\l!LEV&q'h3$(=fB=o4]Y^NAZ..s5n`!d$Od.eOc0XrOoqYTiQ)=]LgF(.]AN7g
%C',-05r^R6&t![a&+9M:3&?jX*r^dt;)-?]RCmeKi983MN3Y8'ftt3r&I#672/RsH;ja'E=_8`b*6OWuW$dTZ<Bl59lmV-o%Ej!F
%mSFCc^n?u`+HM)\1607'_JhEMa[`$lblS!4(nJ4]\;ZUj'm>@>%C$JR[9Z]1fi1_))`@YZEp?UtKV0KKA:Uqt:@KTJBK_0^cahG[
%/S_Cp^g-Wh$P[G0\?2<p"H\RO8QCCKp8kHnl!?(Ja(8Z2!S)6r!r\UXba$):*[LiOn6GOPPU%\*$,0I]4c'j8L]@2oF1D]G0E1gt
%d)sZ?h['JUVhcq44U#[B:C>g?9dZ$mUk^o$Oo"$lq,u>Vk'3"n&YGeV?%Zs>MO3HfZ/#G\1tX5am7M,(;h2mHh`9CJ198k:UA:tq
%6dQD.JqVAW;*TchcLAi"(kH.*B>)APQY2rtFY\$f^,V-G'gOQ1_SlO%ogmXghEa,X7N_au:qD\XWtYq(AZq.P@rN9(e]l0UckFeP
%aaV;C3ML5N#fpEHV]#YJg/Q[Y;jXJ$7RkgK(EN&dmB9]P/uarVWT4Lr9A"M)LOQ,U*L),l1NH%J#bh<=Q1[1'@DYGDFj7.Tlq@qo
%5?KG)*Plm?e$TTbN#'/_AnE\;D%H]'7Ee)(@iB4fc(-C8i[X:7YZ/g:Kq5qaZ]$/[iom2<3uH/JjT6$V,n'h>+>!;u2"@:(Z!V?)
%i(h:'8jA9)/f7C])K/n!(f@<G+oKRjak/fq\Q4,'9WdJn)<p1")+C2jb0Ag6Lu;?ie!^)0GIJQ2*k1\I\j]';l"i2K"q5#?Fc$_*
%hgf"R6+8#k6PuRnY8^0^JE5[<o5]'j"q8N>B/21obFn4&n='/MblR3J#FPOW0.c,=P3$`4%k.J6_=,U'%D(n5A-gY(r'FR4LLES8
%_'[Mq25DT#ibLB:OJHZ27bKg<VQMc@6=&LNLYd\HA)7)9CnBja-Y(fN]r'O!"kF!M`1nrkS9LTrbY;"eC\U*:YV_"KKG0D`G51CV
%a#obU+P*alK.H;D-L90iXUZVR<@d]:!\mNl*l^8?RQn6(b;X1Wno+N[1rlH>0i7gFXC(FK$cpOI[tlS(UB0FMf8P9t;_d*_nX'L-
%PTF)^9hhPY4KpsE5gscOn2D,hOt0+!*uq;EY'EK4iD`VN=,`X:QgW^hILNja_HSVUi-6pdYuqo@JC`blP,"3nSV#k_[EN>:rgE_5
%gVYKWbKu*'&?=9_gcMX2mOStC$*@EYn_Z74l-=l]8].paW_9O]rpk6@OaR6..a(_g]&m=CZ*rRI$\;O"3s0rZmc1K,IQ4L.plp/p
%D239N(5B;EK'/f4<.(.XXC7%<-<3#L@l8];R(AN^'GfMFrpH2CSL_l[aGO`HUs28mZ`,;&3VA;XRATK-k.6b[.1BtW'UC,H:e3-E
%\8+.)WnYqiRVK7j.tu$&AN$bC%):KDGPZ1a6r-!I`I.B[4oQ3!##&L"e`:O33,=s.5IO0WF&F'cLNg`,RQX?[J/AN=:(mpp%\HA?
%1*Pmu+S<t8Z"248#$oQa2B78js4$j54On0>4Ve,#$-*F2+_M0Cg#?u"EO=lc=VPNCh!%pj^u#C/H,;&:*8T2.ChQY'KWUr:kTiJF
%<#P.I`5(`FNc_#F:Je=3_l,q>JeoaT&f$ap6(j)j*$uDB<->oP^n%jVbR@BnAmb=KeN=%'idfOXn4aH,W3etar$:?@XhW:!jY3EH
%:c[NN'-^(XfN(MlYrXa*,V.Jn2Q&@(94t=Fgs0ROSdWV#+AGX2cSN=G&<'`iN1B!PLN\!$>S!*7Yo(!_a1Q=`rF/'5l/8lh7ST+h
%I"V$*@$R@'Fc<?sQQu4a$P.)OI7B*a7(^V7&r]U!&:,=a!TBP7orS#(rcQGU=Ssq-A'1I=<q,QLD>,hei.8`W6WBd-A0k-2?NR[P
%AY[;>7`k.L!kOW>!m8/89'317EBI\E2?O0iBasYse"me[R0[dis$.&[PRIZBG-0u`mS@soWRT:^/7EjO[$T^[RHoCG1oSS._=Q33
%=*8%>]M)f1qSbeJXUt>F>&coLK0M8/C(()KPt'"_3[XO\Ntp1GARQ'7P<"m0h6_e!ceqR`\(#G,C=gtkZ7:As*K@5=)n_@<&Ka!h
%-Cm@)#PBCc.sK=@pBj1uI8`GIL-IS7F#WPg?=:5PGmZ6hiC"D4'[P5+<ah=$On?B>R4_q?ZHhcW[i0"Y/*%rBlYaU>"\^N/\l3mQ
%omZek$S"Zs?\FoGSZN[_cfjVrL8AZ4)j[?U?]1&U.9ffc=dEV+aCBL5GJd%5U6E0$<FL6Ck%tAl,g3t:_@L8\!#ZTS<NqX74RKnn
%#rdZ9jF.9,U4kNd&d=u,eTX`CNji)5VhT%=d<*fDe"0Bcd:&oX/tM2%9Lkq*("XmT@AS?B`]!YaO;L;0QS,Hi,gS"='\`Cm8%X4=
%8)to[.Ls388:0stQdoJGF7L<V(b_r/g3GU%Ip)C#7rQ4jD4mSf,W6;lJVbqM*b`"n_],th?QZQRX_,^K#RnCpE_j$*g!ZfW^gE1H
%I'"/'UW=[.E+9Eqb-Y0E!IeJ*VelXb?\7&]Y:Dq\*aaE$bX(dqQtPYrcMY/.[2J)H2*P'bF\RjX$r"Z4D,MN$h^PgD25[e5YHO^e
%c6!^_B\:ra/_"[p=$Cf-C[]k]j-h:X>IDE\C3X1?FnLm3&'ET0@*3#A/^3B.5Aog"@&YX8)S4V*BSTEa-6hA>,j#1e=oHs`b"&ab
%S9&AMNkmcG(?<hj:WdC<&CFLf6[l0$FGGfm)'V,j%miJ=2$NKB^9E0)rmR!?.UV$l'9"D,83lG6i+Tbr<K7gh7lVE.I!3>+Ie/=Q
%`$_#.n/`<D(S4sP`7M`F:.NR]rd9YEehXMoh4Sj2n7":c(M/Hp5fKOJ)t&W?:VcL45`TW%lI'>o=-eb[=8uj(5J.n4RnAQ\W,gi,
%gOm-X40*CmfGn0sjpSBC,!HrV?LI-J79kL-Wm_@-ZW\!Q*d:uM]!nr$`0)3aXFDL0_e!aW2;Un@OmBdW\R)j78qC`[%CQ&<H59`A
%ifkX2X\9<1LGU^qeS+Wf$b<.c#l"Pm9p,0E;ZluSj,%lX;DYq_@HgR!H+3WuX".hJ<4d$n[CQ)0gYE^W_qN<Bn%kN$N4`9e3%\H\
%fT/)N:gZ]6+J.-3np2SU4<TDJ]2Z=;$+N:&1eg]mDXj@aSB.^`/WU55pi)QfKa?Lc9+?jYc[f[%1dfT;Q\kb7H@DKRPhuSTTd'$M
%qP)m`WecpXLYOuD#_hqD)gGIMM.+j:WAC[>q6SHPpRRaLgrQu?MX"c?eQUmciciIkU+Bff"jK/4W2FQW!^]1;cVV$UGSriuVL>Lc
%LLb^'.u-P"i-Z"bGI'5r4OMICm<_U0EL\]tFTMO/2?&aU>XP9MAL]g?0X#LLb%)r<5\7*r//?%,I*P`scZoX@gquc5%]r[9oO]oE
%N'Z;'BLSg-!ZGd`G?>`B!'S9B+_6<-l[mPe;]GFR+cu\FQ]C)*X8hpDpHSS2s7ehWq]Gk.huE0FgV<Urs7rSm?FKl;,X7n8])=QP
%rHJ:Fs7d]8rVuTkrTV)r+90C]iQ%#Zj7iT8J,bT0:7qK'IenQXPQ+GW0AV4l'Xd]mO/Vc_pkKOob1kfgFOTDe$:B$IXf6nM(Zd#E
%=n2NLV>^"4](QbXo12B/EC>K+kY\%,+;ThmN(*jpTaHN,Cc2.6qN6C8TpS7<L,Dgmg\sumqJSQR%PR,1ao0[a_QBs)HVgo'jWHZ]
%pQp%DD;^jZr&UP/C#h&?7k4*[L#LQs5;^Eo>q&RI(YZNIXsQ`OQa>_?+Vlc'@4F2#%nu&S$Ir2M5DG$Crd:dHKf("dTsOdP-h.`E
%7(G*Y.1R&N_GRju,6Xbk;NouLb8&"KDg]b<7#[a.UZOmif3KO2aOeHg\E?TF6I+A=*hQf>4tuJ44sihSAG!4^Z;TD?gV^oB_SC=B
%-GPEAOfeTr,Ie's'QpM@C8eL6#>BidX(Y.s'f@:dVDp-A6:"D:JAPpRO+@;B<K.DSA<c>)-AE4_;j:@3W5@d8Wa2FXA/eQe:q)-F
%\E[?i?<2#kMM-q#kO]T>]j[.s:XsNb@%f#kPttekSeh9UC7[)-TF+uS$WOo&9'7Qjhd!+*6"Lj_8jMq)b$d=Pq6m"D-amE[or,Y4
%"A'0FA't.f`mgcd55\p+oaoCE051NJTC`BeM/GbGcW(nT8&eiS/VckI`g1%MC]-OA<#(B!r1QYS;$Tr'q\)KgpjJ`YdD:GPVG7rI
%_OR&;m*`G@mF+reXi9Q>-=6<&da`kZg*:$TG6d!/)l(gkZuEMS&ucP71MdtA0`<gc(#cp1GQ$4`T^,eSI7"&Y6jj"te,DL_Ko5Vo
%n"Rp<m[pL.TWXo5ds,J)3W]*[mr,+q.'g%m#F-Mg,#Uo",;eZhBW(p4$h%D<`BckjXMIe8)$&(p=Tg)Jff`HR=G46S!h@)VE2gi=
%Gm2@.Q[7PPPc'cWMam<IILZUr924gBN$B-jjDJaqHqm*<=pJV-PQL7s)c]#:W!M`sCu#Bhb$%)WnHZV@DNPNK"^4rpVDe/Zht)L1
%$`fA3rYZprjrX2:.7s'],THQs:MN.)0'a*p9eE<Yk4ZCWGSSRn'fLDVDooE;Z86VV'>b_EH)r+36:iCs=Y&kE*g]>T1sA3FN3]@%
%go@\"Fu!H`-#MC?U=-&*lqe*j't6+a0,4-&h\;;0@0EBHS#!8dFhrR0BusMGk$)PU`9Yj@NS:IO`22hfrjJ@q4^lCQ)W`&rn4EHk
%>BGeucs>'u?j^<#=crFq=nII[$Fg$A#4;s'PIu"Q^be:NF.2S0MrfKub_E.3ruhZ15o#geFU*k$i:,:+'LWsaH"Pg<@F_*+[=G]A
%,%l8)>$/!!('5a5g3\,_-mX:cT?<\>FQfr`5ACejEM,jdr5uQrVSVlu]D\ND%?kD2=<`HnnfIUJL&Y62<K1tt-+SoZQ;Ve[#E1W#
%1W#nb>(?NglASb:V4RItV?%n.3=,YiUedaSmGf"rR%mUC0X&^mXP>LS!1'@lWTbLlh-/-%8u4ipK')N#l/M=.Kn_.eW8MNrV&;!@
%0VSN3,mhQS[Ef\QLuB(Qpbsk4kkd[sUjF(Y>4q/FeZ=iY3h:7He\Z@JKhC'u>cN"VPcRXjnrl&l'3$+Hj,Y>.l0Ao&3AqqdW1hPS
%!Sq=H;mhVsJYQb]DU3l])]OM\[SQ0FBnYWcY1B%F?jos[Gk"A>4Xt!;``ORfNR-UHD8@eP]J(V2\[BO0O6,S<b8!iU,$Oh&qB&s$
%nfn`&rs:`EP7UL%7":4%*ITCM!_^N$()lC\N,u^?:^b\OC6CGYOSab@=St1)ZnU<rl>5A(Fi*)c0/79Gr<]33Z?kZ(8;67g,3H#P
%K-9W4$hcn?p8`_F`p2o6!7Z*iQ/GNT\Vog0-HkD4R\AG`KRLEm:&O'<#\85N<c+YYA_&uLa3/T,=Prf2'/?Y)YrFplZ7S^@AK3**
%4MK.ZUodC;_#laro%2i%h$=&h7>c:))YPULbBJ+OqFb'9S]t/_k0F+`V)ek!DB2Q;_q@]1Ug!7rraaO'nsRkd@L%!9gL7p#L+pFj
%j)<EI[Da^&9QAV&hCS,MQr.W*+U$$>O=3.+d/F<i1upoA$B*<NrBfD]]a9(bnP[;)I/I\^ne9+&QZgY7f6)4:'!NhsdJ>0WSMk<S
%'aRLdI*1b"cSsJ9"'me2cb6Cn8/t;kT+/13$<t'5)nncr1SD%L4%BZEGoWBjM?;%8O_s=DAfb>NkEq*a%C'h2cW;Z%4@0=4k7=8D
%X]SQ#q">A-,*[Z2jlBhoC+]mX&Cm4\/_<iFG!I1m+ZPbY&?*W`[(a<5iWdeY!0I^0]@\OY$ZeS/BMtP;FH>*qTIF.Y=%'b%#[T^`
%kUSI1`2kd5s2N)MRURg=G!Ma!hC#^(2?d\3aHC]0ph3T)7dK@FfBr6KV!4,k?Wnh$;+2_D@B56]..@#kS*g1lmA-di=e*7*p=/S8
%bQP5.<MB7?;Ge.0'#R['prfGMAUtf:cZ@uFWWFaoP?Sji>8._=-LYn)V+S\s3Yj$\-[\*C<L_mukC!)Q^Oj8[G<1rL!3aLb3(c"<
%2+$cp.hn=Z'NftJ)Tm*D>]T?kVI<3KKH9WZ-Phi#.Fa_kfZ1oTNhYfB0@+IIW<jq4r^gTo'SgQiZ9o\FVi0[q$Gn5M(r/JD.&$qs
%6H[CD\X08J''J.+>oP!.[,K+KUH&5<gR7Mo`T$Ng:QW,deY2PmN%MOfN6S^?0W(uIfclkmAYNbUa\"N+i1CZr/[P8I6caI+;Unn$
%qpLO+NC!!\%UkdF_]J"qpq^_X$<U#-)J><dr:AHRWa>Q.Q-!<p5_kGrEt.a".lh;Bn"q+bpdVZ"/furq:?RJOok]I,_E//E=AE^b
%b)KspnME6jRoYg,6Z?^1(Sm7iDJ)bZ=jm1JFb?fqf"U9!E\obN"*8F!%ZsrmE&IgJ,&I5<SLGfqk`FJI(1"HD"J\X&A1c;W5*)8t
%.2]!aap8A1Vea%C(?`"b=\t'hlE:;@jq%`$.jAQ4Uf4s@2e"R%9`cF-@a:7bE03WqU%m'd1O(2N&:csGRF,KN&b0^TJEnUnBje16
%:e+Rk[\&LLAA#_$=T_/jY[fFXgd*DZ1JM0fpo'=1M@>OiU,,Uh:mc591bHWU"[1MHh!psEUHc\#<EZgu5,>QA^9hdO,4CB/qVA>E
%G5I,9BT,K'2\,]7+;C=Y[3c?g-O<rgE[M68&?'p85WC#T-L0_Xr:aK!:lqY#NSeQ]V)?1;r\6HVeCrY=k69Ab%KDHnJ?C#QckLq!
%Cc`a)6F_r(+)k&cYp'_J#cRi>2G)0YdB6U:La&3?9fo>VOGcj&et!NG0R=4KGV!:@Dq@&Dc@LZ2CV%3J.(/?"2fo_Cp#baI(G]ke
%]u7?EV2YgoQ6u:M`pKVnFAA8T8cbLW22?3hS*tu86u0%V/TBdFJYnAJ$SGH>)lLQ2FtE&q-Qkfo'9[O8jtoGtVanX<5-1K1cu`-R
%f0kot>%bO^Un9X^k>PZ7JsKNCWKR+7bqF,?@*^@g%E_!Nq?8D!1R./QB-9,1fiU+S.WjR59<l]lG@^RklW%CFek&m9qc0s48cbqZ
%eebgV$N]_0fEHEXC[FhtHUO[r0s2>;oFa;!"dC6?KD_NgjS$8S&i/)o.3,>#_I[2Aq?A827,]"b/7$F"3-L@Z770@iG0e[FY0'FY
%`@cYa8-gUq0>,3U^B50B\^r?dD&pR[@jY0;7@J",@d[4R:A'=@(UTaeg/U:1B+QY'p_SXiqjTgYp:Gh!Yn,o.CtOm\qMfQqk'&>u
%R[c_lORlD9YegnKGsr(kr5IsO_Wkqe?KnoB-r-5M\!$obSsOq.=olO@+fm:%`.dq+,F5$2#/'uB^k(H'FHG$\A>Rb%kc*N4mTWQs
%1huWE2=kE[8o)O>[-9Gc#X'giMGU;toC^Cj1>t0TR:,BMlIPaf8VSoVWA]Wfr1%QYnkQ^D?LbM'>chhs3>"?XZWE0f+,W#?L^mYI
%gMC<ZO<s6TPKQYaY6g-#=)*es7_;8iiCrI@'Rt<1X#Dc[dYM!A=_LOVE-=&Ae@:kU#`>WM?#jU)?E/kNXD:(KV7/0(\]BGO=t\=.
%5Mh1;\"=+'5$3Q_1l>+nDbG]V2'AQ2ltZ+"e,c@MdArB]<5(tb@N#'K?Z*sOW0-"A@WC`]959'Qpl2W/1kU5SPU#DBJm18?V@$t,
%<r__f0ueOs2C?TSWeJ>bc0_eA/W%dAKpNM+s"mZ::-Y*?O!*)ELN&YO1GiH'=D-d;@G&G%UXRbk`I[4JV`u94IkBBf1,pYp&#c[o
%`JKa,7eP[8MG0p!>Eh1`fqC3i2'/_k=,F6E@o7)>3)O07d3fY,&2Fqd*`QYY'ra,r$Ml"43[1J#X3"nXn`_!cC8/Wd(ZGI'2%SeW
%YNUNT^")1u97Xn-0HX5XDn:(8J9jk!UkhQog)^>g6CEPd'%(_2,6_hGrf^4>N!/I/Inj'9k<3:Kj2G-h7J@@XJfpn^Ir,1W=HG(P
%5;>jM\;/.]_]?!j0O,At5O*<)R)iAS@0-Sg+ruuQl"8+3\Y+8?6mp^OG!tN;J3g*Pp@/[;<&.T$3-aG<o.gcsE6R8K#L_4[c)XCR
%T46A@rP.S<)_uM)rFhFp:i\l(!PT-lJ^'^51,@\AXZ'(k7YYI'`m?W)Oo@Wo1[HC`*Ra4jAo7OZjAo)7p8s_K\g(K77fJ]FeR^9W
%qpMja4dJE@h(#0iC,beX*_9SAD':D,\#O.A2L7SMP%$tLl@m@cAV!]\QJguWl%#.*)C/MfKW5t^^.<le.c/e3.D2Rd9uQ3p!($2%
%aD?]IKYApSAYJNbmrcOIJ`9[802"gh5aigW-ZFDkQDJ<tOpj%gJ3nB9JW`=@+8bt#Q1tHAlmA)q<Gq/*?L_oKP%31toaV`d;EcCC
%/D/FCO0!)Q3:.S:IA:$PI@HKD9L]%hh;GX<AAGH)(8QVjpdNA.4e8Bh_`_AeN\*i+CusgEQE@dm]6%d5C-AtdNWaBOV2Vb"-ub(D
%g4nDcOY>8"D+''OB?ALcSJWS->T3f/^D10S/4WYr]]F4JGj7<XCG2ZKf'?.tM$q"odsS"J[>q_70q_T%@GnOkhcX,P!nhoa9`+GQ
%&fI,tplm+30!>;T/b4#&>q'r19pGfoPFU!!#JsS]r/=6VVFcJscPJp<44M)LOBlra&1P9a>ROFub?N4@7+ZpI[MR@XCY/]._GF=k
%2c-ZJZ5D/T#F7_.nd`l:*r^IEn`RB'hPms;AMK0ii[!c^C&4"d(Xg^(;++'iLFkC=DAq26p)FrN+&'3!^dK:Bn>H/WTAic.:lj]U
%Va;!3;5aAISmS1F,fM_Gk[c;%A[[XY>7`t44geWR4Jl.A<m'Ue[QQ/d;NbNsWr^3E\7Ks-W8P:"Y1oeka;b,F(_&H)/GrXUKD@5@
%B!h&<)g9UiQTe&.QFZPpRsL+A;s"[pFJrW;\_#0AF;M!(:,,HN9=c#ck.I>^MBQH:X1%EWKVi*P5VghS+mcubg*&edh`g)5mr*Vt
%*<H>U$mNF3J]KOpaE;(+q%([SIg%PVSW7r$s1\:BP4[:c?q"k^5g?A9'S=lSA>"X3r,Hm8b`d73[\9nr^]^i;4pt$?.14>2c81Y6
%+l*(2YEf%rEuk4R)Zg<j=26)_d%o9o<+N?gPNq>4fXbZlQqAlK.RLfVRC["UfUck^_)l]FJ(unWWT?Z(4Haa"a*EgT);BuMgN"^H
%@.bEGpF%qZCW"pKs&:V^T/XF:<PR7tm+&+m-"DV'Mpki8;=`B5cM1.YH!(_TIk1^4'=:[JoV7E+5;q\aEF/7[6Wr[SUoKL7:DNq-
%4uS)=JW,CBWH7Rhd)EQtZrrR@N.Lh0blO_;(JQa"=k0+>dbN?E;J4&)>^(8;L_ceM3(<)FG4S&S&rY[lJr@I+V*@/nL3@-/08IAU
%.L_lPV;7\<IGRMm[fPl3LM(EegsrZZQuItTTAWu9rBfnUIM.>R9IjD:XSk.A\:dGS=bZ(^5p)`a<TV/W)!^[kg!f5tn.!)c8RaE[
%m#i"pU^!,"bK@'5%K)]^_pn4[1%k`Z;qa35:6s2V#qX9A7nt>KDmYhC2L"urZ*CX<+m-[_'DGNn<jB<nOdQ5dji+kU[(\=m!NT4e
%retglap=Na7b<-#]]VCeTjjo/hDJ`XI#%0%\JugsL#Y-T]7ECpR$J"BG=CdAqIs?s3\Zm-\X-$?IF>PH`*b#sa\[`W!t90qn3IHF
%o;e_RMB&PBT.#,g^(0X=83-Wa:Cj9I\IuJME"bBOU`ZKl,D^ljEUG0""lbc0o^3'W]ng'^;ntHrJ'l&O9pQ*M;sRJ7pn,rh<^ZqS
%)KZ*#LIh+p[Um!(IWitTc_JIbBppjDEG]t)Zr%J"@8qR/,HYC46K*BfRD>H+-c1Vl;"*i\L>*:qbCs/!-sbP.cAr,sm]V"!@/#k)
%8^t5E=S=:lKP8K._qS[#ZX84j'Sp;!W]nP1`d9]:>"_'#$/(D[<V(G^8V[Q?ca<gUp;M7Y.+:5\QPoqJk603[QN&KM88tFX[@))*
%Za\Eh:gTI&7Ke@mmY7`?E.515A>+#%V7Ai18:YmL6k_E,6RQV;BQ@(1[W7I8SVV/FM0dfA/aAIS?UWDen1DfbCZ'op%DIQ.;<bq5
%`lV!E7SZfh\N's1=ak8Y+s=_(Z?#o'b#A[^0+l"Np-T2PB*j#"[m@2+'<$`WY0TBCCVc9sQF%cp&:*lH@YE_E%71UPqARgolISA?
%Y$cTJCf7APJ)T'UY67lU/,MI>E*4C%_6sh54n%tdD0TOJUi^lk\Flm1eUk'pkZ.sY7N;AMkiOe^D6),NBP*g]Bk[PtE@<d=.ArA_
%itI'cAWT"1-Kecg\\FO*j%uG#]*Y.(H]l@d*"J$UY1lbj;![%,LN\;ZTresjjks@OPa19#2;aMr$11LfTnG-nOdmu'VfGX<HPc,G
%@YZ*Sc],4\aS^.__>eLk)'P*Pcj3;eLf<)W85,6fOX6b\1):?I`6]:4Hl!AkcJ4COXLR]0O'D]W`!g!lVTH99?kYbX"''<Ko>.;q
%WKGKgq,dip=!kE6hquHV2R<=EKWFAB()V@nNZt.&#D%2.rMI(n%e;RK[A#E2*<CWW3W<EFs2?rtaOPPr:%nW+\D:,fR[1$KZ`Lh8
%Q<lAuX<TTu5QcpC1K"(;_d>KqI4B4ciM$Eo4E>aceIoA*=0tqW;atYD[W?9;X`Nn!4L''&LI/B[,OM+$c/Ug$E-+YE?3`Bo2WlRE
%e\B6D]p%Pf@!#_BpHB4k^\BDSjtiLp:$$NDAHtW51Ok!.P)N=Z>h\5lU3EM%g#Zk#E]j>g#jX[hKI6AOP9%PH#E@Z+':7N4HS5U2
%hHZ?k:k:`rPFkM4B#TU2BnA]=HA6o593eo+l(l3Y<RG]XH`XMD]nlpV)f7pHmW`.\f;V?h'2pH5Xc@Zd$W'tq%j2ke)+ErVJLV#<
%cNn6c.M>"^XZ:ep4+"&/;9c*.h,(QA37l#ER0P#>ACICKXmhk^[8`E8Fl"QtF>MP0:sYg!O^4W<k_O`DYYH!rM_`N:=C%U?CbJ>@
%X3ZC?g_p[;NX/7!O;sUlRmH:&-&VA[<QS;-*/FT;J!$8daAS+TX:jOWdbjRT!E'tK'i2u#CdnNQ;LjZAf_l@oO%u]IiR`R]R&!,K
%8&M%\(%]l2hC;2]M:.0Lg9k/gb@9luQ]X]Aa..o$Wh[O2%$LPI4kSC6r$pgl1)2cp.-j5o,`R"-NqAKJ`H//C')ibI[=ZNp6>U8m
%n]VnbEKBQt_*o%QWFcp2>!Oj.E*nG]-5_'VOmL$&9.a&4&be.5MU:aP)#:kd<B1-2<a,^DRSD-B7\g6#,<?p#k[7Hsin&Dl7hpc+
%&*EU:1Gm=V?l>CJ6hq;==lpT\ACRKb!5/*O<C/#`M.,VMT[*JH2S2"LPJ9EfJWLlTU``5\SKjMIa=H-HmWR;V9j^`CZWC9B7M))?
%Oq-QrCP('VKE*^4]uX20;;1W"-dT`<RiJo),dscHCe1+/JljHZ7+Vbnb);Lbp)n2J02AYpQoZDPqtp9e'@7-4HjoBSWXn\icdr7'
%>75(.UVbnQ4$#I=Kb@T_"K-56GDs`"ie7,#'+:DW50*:R^L`@TX`>P.-a25F,tIr/AU6PhI;IF&n&rdNlGVV=^Mblo%`mN:Z/t>=
%o-SlAZ(N@]D&QB=TmBdA'B"``A[Hgh\=p)V3J-n,6`$Pr+#k/=;"\)ChWI?#a!WGG0@X4eGm%G@p"8H#3Z"FE+LW_3",_tg=b__7
%?\;[lb'6\/7@#JepS8[SnsLmZUM`*@o;bL;<R#W95q(s6.mjVF>"c^]^^:gK9+@3@o`]0VSI6l/#SGo*)mERkWs5=aha;\$?\I?q
%#Kog#UkZR4+#!tmVf7^s"T;e&!^F'b$j[du#QIV]GpmG%@o,0]Q#cirRZsWsY5CRO]c:Z[BFcZ:kHNR]dT*MQ[2pe85,7]5%k?FW
%hH[Po&G[-[6'ak@3$ft)fA9il1>Aip:IZC>Ru5^.S0/`[[imkiG&ke),F%>JE,$W]c[R"@TU>'DW31)*lbVto9-_$E^G4N$P#562
%#mnIah1#>M^e\kjj_s1E-#P:hC?Ya@ITbN,O(Rfurl\i\LObU>Q2Es>(q#aogHJWts$EX!(.W8PID?2\de\9:;+&)WFHPBM`?n6i
%-(il4i^GqFSj>*Ll@#kqj"77-p77j,C]l.*1Oc><Rl?!a;?Pq9j*h+GA>!q]7?'%Z>ZGoF677>7j*u5jIgoHj*RgGXH8Vf:`ot6C
%#aPK@7MHZ:Qpp.I;KqEdTHrK?2lIW<QA1+5V1sDqJNHF%I'-I<',j.`I?eD'W-;"0e32V`;%[m_0Z9Oui4]OSZcB5uht]?,5,0XU
%Erg2(q&HmtN1nQ?)6Wj$R3pm']F8>6J;;UZk/OZ@/"iVA4=mT%6[kJ9B-=l#1hLE3$5L<e<$BJh59Y@iaC9-4MG%OR+AHjr%o_rC
%[,8:i%E[C2F"Pb+m`,RA*/[9Q.3<J)lB[djd-^9qH7lXdB<?[[+A<CIqGS9&6UG<&d<LZ=CQ):3XjbgM5T0/1V^k0EHR\0T(l/*l
%@L"lpjfoN-[/XV&r@iMWCAr@gRJ(4?A`V-63C8r<\e+ru$db[g/RgH7#aZ!@5h;fC$+3>qN=ZF273JXt)M_#H(sjT=b)F!.5qNim
%e^+=(hJOohA2tTB_Afen/A\WOq,KC*?57QV8)VKh*im[KCAChe!f-E.>.r7nhsuJ=_PSrL5\ha>qW,S?`?k.>I'4ZM1>,rC)IB=-
%oBMV`o8f?j7_p7;c)%Z#jO_P`2H&q)%j;MV9DBfPr]F&c+tVU4q*)4O7,p`RaqE-lr'G4b_mWZA(8A\"IZpp5+]Sp?[teDd!tl!F
%`jCHF"k4u=2[,$SRsKSJ+q`a#RN$r/(nJ0Hq-,.3aRCeAb1'R*I9UB`_L<?L$4%\VAhs_u)l9JGTQOIDX1D+<ZL!dg)U>8)WSE$[
%]D++C%YCD3XL5ojM:_d/2\J/64YOg8mO<4$PsAUtJ^f)CZq)TGp-`<?o2qPTemW3hfcn8u^,fa=CA3e@kt:/sLQeD_arVU[KiZi$
%"FsFV?&Xs\(nb:T0H=5)gDEXfXYkXkM<a)>U(!g]\cmCj3n0=\$ofgUC/)P<GaJNM\Bk_(EB6ff/1NL+$l.:FJkVO-%=#o<8O$Vk
%bDd@8i._Z.5S.E>VL5LqWKOCCVkfTdEE:<t4IR9g[NQi_g\_^q1/L>K1<XW2=nuKf0QDh=O:Gqedh2E&9uE_b;YE3QaosQf[/u3j
%n0i`'YX+lCX:ENe4Z"@.`4V#*IacENkR%]/>(J`OCE?knpHU>=J.[$o:2ZJ=)QoQE6344/l7S=&6#C[N1d2`8!LU9]>:*'Sa!H*X
%XhG>.p(Xjtm50A)92&8;i.nLQk%B6=H2H=\h2FoJ>a`aWVa*<*g&cmNecY@W5L,X6D*W96*W_?&mSA5d^\NN$A&\p>N6;n$B*M:\
%@F8cjXEgO/E2$%<MD;AcT8Y`Po[^4,*0F">j_JS#j%Zqq9mq!l*M_.rQ.slqg)a_N%B>fM`H)b9ZqUY?[DV@uT)KIg]%1cD%>k0g
%M]PJN4QM([\UKnDn->57Z$'j'a#&IVn$Tf"6on079GP5j)o:6Oo56b\W\I!1[=(44XMTd?p)SS#&`;C9_qCqJ,s\V,[eN%I`+IkS
%h]B7o%s('s&&L1;7YG6#k4rq:,c%4cA%`ppY@__:-uZ7V.:=<<<*lFId6WhOd")6h,p._4M-qUl<U7]^0YhB+:@1c0W0:5%Mufh/
%&Q%MPS/Yq7^@-J)8+nobYlle*im,p?=?b9IWa_JYT&e@_2fcVVjB(ogbAjrG5\AeC',r@&TnC6*;m8;&SE5-RN?gMUOd++LjOlF5
%f^_-04PqfZ5Zi`tY>^\GT-:"hi%on<)K>u6Kuh",)lD=G'l5D3n6!V=(KV<V9jL+*e(G@RHL(B%l7Rs.cC)6:ZW.OP&&Ina?a]3,
%*6f;G%UeC6'h[kt0F\V;=9J/C_g";J_A;O(^SlR4hY;ES;,CP`_Xi2:Bk7`(-7l9SblCkU17DM6@hq=q;e7JChl-=S'8QqSEH[]P
%\q%<u=E=]4>n]3FVcnp<=&`UZJ\L?TlWccDI6F/-3*[E@*p$,K4]t];3%lTm7M@*DZ=@&Fp&=+GmCpn@:%-2E:p;-9e>uM'O>^HC
%<M0&K91'kr5XqQNckNZ"4)3pD0+nA2b_ZV^1kOkpI^a/&1D0kMMc[GNZlWL+n2GjdXr_>=U;Nco]NW%>+N;18kWAD\UBQ(=3q.0u
%V\)b6o/3]k=^kVaT`KmL\AErgF_%LMg%cV<ilkh3He%HKEqk0Aj*#INo-QQ)VDIjC7pmWj5)tSaifS1K($C_l;-KqSjh0DGP93KY
%KV3$B+%Z(SlrE%4(8HLSXH(8&X`\UXGZg^)r9h&/fg=e_HM92fo+K?DQBb.Jd^p\7H$`*Db0CF_hTOf]FpTf9i$XpNmJ%$;\(>h@
%EZSb^\c]QcC8`B@NHR9'4^G0Bl1\tskCnX\M6UUN&%N&VB4]q<QhO^>iMG[#\D3T$*D5N,i7mk$1)N"1Hhi;99[$>`Ec:^B9*!oJ
%g\[Ya[oH\%W+9</.5Kl[l&HY(Ri5i.=M]aNl^3E8YDQ>K%nBdAO-teN,?e#*'20Ihd`bZN@6d6,+KQDa4\(oXajANKV#E<&mQ,d#
%/CO>CQ\M3/kVX"T44_l5%SJh54@2>[Y%)$tUHMMXa@N2]HC.#k`#iP2D]!ooU"1:$a=,!(UA!7X_QI`fY?Y`;?D8pg&]g#tZ0!4p
%Jc@\eS/t'HELo1S2IfXKd*MQ8b\%5`,#e$*9],Lh,?pi?d*'i-PGsR$agE:1;;U9uM,CG(?T(g,n>/u!m8fMQV,++&-)OR7![hUS
%]&(;PXD_B%Ejgjl,?VJ8h:#(Kjf+\54MqKC&nI+!'Ggu84`qV%Na,H:a/VeYPDrZ"CPNa07FW(h9qWnuQ',]^iG"LF]q,BBE*>n8
%\_VWY;;ZIKe)9km1/3KohrDFJ^%tOfa'TTTNN=(;KQt+C/o,;_A95Pc":T(BK]&TR-E&lGYu-b/I(?9&AiM6Z%>+EY<\52ic76HV
%SH]#Jd6?.$K+;C&`,Gug.gQ92mnauRoDpQY>/'ZH6Zo2\bo\W+`j676s!`(a`PM[HQ]N[``i^tK)lRBc1DXiK7X=UK_Q*caI!=.g
%!rp0*9.#$NGPJ^1*[BMS_C]3jjDR3?HbIAjX`?`#0krto,8`,)c!IZ,K+#7P_g3)CQbJd-kOrKm+\7db?R(bkBJFYQO>iZ'_Zd'>
%[ZhJpMPoBrp.DGt:V_Z`k/i!M!;"E*Vh4gJUr&q-%`o?,KFL_S;W,qi$TD7dQ`Cg&8q,J/]L6PZnl$q^WnR._Mt'<iXH'!j*r8nX
%;QI/2[Q/D6%Co:eam$0><DQI+kTK1o5IHmYH8HlK[Ts\>hItXmM$JcXhgb0u^\lV';Nm%t^1q0sjndesAIL"d\edA_GXg3";s$3u
%qJ.=EJZ[GB.5:!__AY1DH$?jEbh[c?h[*0i6+KD^WZfc\R)Ail)D:>P78$/3'>TNrPD`D(*agueg%n%rDQ2bhfi#G9aaaP`qHs7R
%s*/8:0bk"8\sZYoZs!75l=PmR!KLn+XFOrmW:L41#)u[lCB"CKc<ur/PF[YnM568'Q_<Pp2JrW0e+KpL@5XLKDQBaKYQ^`n\3(cN
%?KFE,i@k3H+YTYXT<S4jZ])Qd2H@JOFT-L5b)i/Jb[9=W.W@&Af-sFeM^Ho[<0UkQ+(/V?854?=KnpH.#q<R3Srk?%L=,'YB01Y&
%7*8W!j(]p4&VBa+n[3kZ_12(>CV0#Ba$9Oos'bHpJ*_7NX6p6ap:IH9QP=\!Wd?pf90NX?YJ;l5<A88G_$os2kfu.;c)(gO8Fb)6
%8[LktdSk_k4LVc#5rTWGk"Oa2f-`'!HiDeUZ@Y,-(crSgPP@G)^*Q3e($8%+9kL)glTKh-&crt#\?.3g:[OP@ITtQS/[FlL@b.0U
%[:XbX$JSWbL38i,InmLU=a7-9.WN)`Wu>:"brBBW/As*:ffU*3]iN;/X!UAf&bm.mj.Ne$5!8AHX'i;,N_RbTTm1Y"^(nPn-[`Rd
%4i*2fM\+0Zj7*nZYVse+4`j&<V84>)P)8ekVfam@mr9@B2eid7nh:@ZP:UF!W]o;]Y6Wm8#)[MVT;20IWP;b+%,7C<NJ^F_/MW16
%XNOnLRE?42n@^,J,j(Fgh@D]'5:@Y[LPl^sG*42bLPUq#)Wg%44YkIOI>33u0@?;2cE!&*D(F)/SVO0O=[Ab"e6hRt+BeeP/K9TZ
%%'V!D8hU'<VuTr^VK`lKArY6&lITYG)[,oV`LZCl#j7,cA>s1?cuKInXSeD&P:%c>ApMNqq$KjK/9a2ikn+ot>"5G4`Q@b.'J%Y6
%>%.XI;q\A*7_U4jd8?aa+P*dZ5o(YLSEB1*CiE_rd:BqN8'Ek)o+Oas-*ca>mTfA5.r/f(O[4(P96g&G^m.=XDX$K^7G*qeboK8<
%VPDd>KK#rYQm7s#@9t[^9*L6.d/#k61"?tobfkFIe/GENT+lb7,S5Y!=sgU`S>YUfLMpYJ,]k/4Ep[VF$is;XYH`D)+G+\3f=LjS
%#"$:06/-hDn0X+*.:1'l</\ZB#Kom#>VgmuIjfU*25Ds-&*TMLX5%@D-mqh\d5V4k+qSaIAl?PL'lXidorecJ`+eh>!0W+9fP=51
%AYY0=Ml*:%FdtZ1'Z8rPG"V&nDTD;!&:j]V3qLUs04(7`O&.;XUh'Y=3V@A49_&H69mI`Hl;^:(M,V?(;RClK[KAg-,63iLWfLdU
%c]&DLB&$Mf66R6PM)+60T!c,$Gc%-I/LtRb*L0(uDsjV!o)89-8'4R<P/b(VGr0e=7%a-9H9l;"Z0o0n(RE?s=:aF<YY1qqBqLZ*
%ekhRU4aS.%)#^"uFhXSO5p_R0R?Pe5JX0Q;h8`L&_G>tU;0A6Zppl&,_(X,68j5Ih>E*^ra)\T*hl_UDKd.,j?'gd]/GUcGC8e/0
%'Jj>hXI64I]tY-SSD1XK5,qUN"##JOT3TO-F1jLi$k,F&*Vhh67;n4!_f6mM-P[B4Mfo.A7HS7&3`P(^@kX[52olM*nCEc;2\]el
%BPtRL=IoS%H`+57\DiG>2/U=dmlo(OpC/'=XnDQo0P"!!C&5l9OkV=M2qQ9*k"gCI"LR,N?<1M7YI64`J9;.:BXQceiZEfL3p,5/
%6r!Ri@H6cf%[D]_!Sj77*CNug!ZsQSp_Ykp9``2W0>7]0>6j80./Ap<_Wk!ie[F%M8t<4ipR9ZBX`^Efb4$CJqZt\dItGS<+LKWm
%#.hX>jd]J)TU+O:Eg;QFSFo%nCNgdsHcD5g_f&iD$mOV%&I^JC/h1eO_:au'K>+]6qH2^>B-n[$=<ALDXn*JZHesbiB$%[PAptAq
%JE:$C*%j?\H!Z_6kCn6;SoBJVeTs0P)j1Yk6uJ',hmIV&(jqM?1cjqaOB#W_bo_&bDo%U+q\qWig+=!Z*R+>XJ&cf*ROR=q&.57Y
%?PjIO[J%>Z]N[SWfD;'MDN=hY)ZJNn0+KtA0XH>m=5RH1n"+DDP1&+8_.\;qqg=jT7"397T:0-%fds79Q`(<84328LUhu`f:eWgs
%0"=5]`]>+2aZj.(Qh\C7SG57WCpeLWMT'\uZeJ5jh]qV[\_;H'<7S-OM=3OSLnD$?pNj68WA.!<ep/WP(I&!@bNt-r@%$>-D/m`s
%\V:I=";Nt1SrQF2AduU\hN;'Sfrm^+XHNanPj?urR^@N0P.,qHDTp7CptEO!H.L+?'2r*6@%1LU=WDsb_DrZA61I"`Zero(7L-G8
%lSS8p6/Y@n5^Qf,ndWF=qSDnF>;(%tC6-%=cEr(cic6-[Hj/l+]%_Yj>1Rc"0OtjJICZf*Q-9\5-O?s:eG&T0ek8DlT0t1Ef@b4g
%$R=W-M+m;t4Zj]U9F`UD165J?X$4WcmG&Lq_o1%C[-]MV:oj4i)ga^k=WG[1gs_f3h&O;r[$R=Jd-AcEXH4)Uf/SUnJBI&]e9mn]
%rSW%fpS0>'g&,c:j!%HI9T>:cX<4[1IlpC>[/ZgJS0k02eRa8W^RX$u2KqBqPW0?q?ZMn@8@$[f2Q48'7QR0m8CnT]6&]`S:0i*9
%n%.5i&Ef7p</(+T(9PS(P7-6jRM+](j"9`_cLnShI<Q[Z^#ecq'%BsO56(Ar`6h[2e%R>MU?cLQ8+`'G@10Il;_n]!6aAT,[H5->
%n6CW)f+UkR!E?6K62(\]=kY6Bc&dZ?KXL9?B2j43gk&VTi\T.Uqd7X+B0@%1_)fb\U?]@ge$[`^H:IZ'AQ:lWehc*O&NEcXW>[G[
%Ip^_Sq!U!31U[&D#1LBASXH2L\`,;VG<aM,VWkLea]G<EQBlJ9#=Tff(uPLkFZ+.7`hpI5Q/N?hV6bC51al>*QIaRa`\D%cf:8S:
%Tp3pi=+!8c5c-[AOg=51=T`B!FOlKCbbfBEY$2LJ_-0Y_"Y3d@^URHL:;@.3S<OWh9JAQ2[_GC9\1BjgeoRIc>G$WKiVm#=Bg*jC
%FRn]TH5AIT/QMfHH&RrC8bnE3rNP+Pe?d!.kH-ZT&o7"i.jldL]*Qfbe?]cjP`Z5K3PL,m75Pu1:;#%0CSJi1c^E$_Jk/[I$CF!8
%'f8)]6Q%J"Lo`Lo.RpZ)PZ36P"NbeaFkRd(PF`tk$*$F%UELi]ZC<"oe__<Gd^ire**@Kfr?VKE?d8DS:4n!@$)^(C?X5:-9Eb$u
%9!<"!)3h$+\9bZ@H8u$@UK>]KTbCV=4Z)3,)ur$me?m8$Y1:'R-t:d+1r^8JiX0,1mcXW]Q]"=S6EH@1FeJjHg!D\p1c_RSUmtM/
%A_RW*Ub6E#eHd,Mm@@U\nQK5JS"<-+]('r09+5208ZQlHc"NO/F]!9u.o3.h(-PPM^8=N4Xg$P$5'^`i>V_r1OQX9u8Q+MUc<@hA
%b,&r>G5bDb#MU8[m-&fp@WBe*'Unmd46iPW4V=H,WTa$oXP2\4.HVfTC`d^%16a*MGt9BX)d>F$?l\cp(912uIXXU*$O%d(f]rR:
%DtT=*D5;W0HJj=*;!emcE>O4j7loA)]cYk2V[G1k\sf&=[WVtOSb,8;2i.Q#=7i.c3_0ol-Z%A610mO6&j@V>;5b97BqGI_m8Vg"
%:J6#%$-Kd%Z!9=Lf0^`sG2_dFqU>&82.#&hg5Z'4C-[N+2IEcXE4n!k1X(3:5>%pR+_$kl_cL&Ell_%phA1MKPGlLga-&^2"I1`&
%d.1Spkc(8aph^qoAdkjT@"CU2chnU(-"@hZ-`j&<'(B;-L4-<JU@>LL5>FmhaNW<kfo/UE7?+;MBf]4]PA/R+arJ67[%[?M61NL@
%@G#05\am8Nk:W[R.V9`E(G&Uam7hX(f@74*p^4YMF9f3t'?i9$Ti=pSC[3.'GKDqom&AgLON-i=OEbD/5Tu7&!$q>/<nh9lUr'HD
%C>Pjt2`,!l3*TQpm]r?>`*,sa60^T;`;s#k.C`d6pTb$&%,<;,C!q<NlN\Procf']:aq!RU2)L;7G;XF:O:J7j,^N[H!X5,*)4>T
%L?@g?2>n+;SrH"oDpO`CpcbuY=.r&,G>lh7-Ip4EA/c[+b"8n_LM#3DFX#@1FH]5,nl1r08i_0(pXOpFCqS$d\rOgg1YTE!<O#ID
%n@IKsg+(cZJkBU3e"%lR9I"7#-s0m:W]iE9^#p+ec$8UG6a;=AZ;c?JUe0THBk80=;:meoN@;43c$m6F2?oN3JJo0f06S6M\I\_#
%=!0Y7F@q,%Vs`:eFls_c?VGaUGCLk8o>amO:ri*rWAKTiN*'*=^L%LPSES2`a(g>2\q1EU+XRTPR,`U*o*H[nCVJ\G^I;'t1Nl(=
%QS8lEnX.jIF@A"Eo6l'dZ^h`8F;RdOZI]mCm!J??iAR`]Uu))g4,:q"WCZ?[[;XOfNfn7+!P4U49l7=dfet--'kVm.K2R6@P:6g6
%U1DFESjjusC%q9I`-Uq=3[i66%m)`mPifr+s+@MO06_8)\NkrD%FM[t<`",Z54Z@;O<H#4`!\)E@"a6'Lr/.mVKQqBZ!>U@nCds.
%jTb_6QFY=P1j(Ho?"MkJS`jttL[dC@roO`/X03P<ZXsr!=6EG?r+t31fLPQA6?Z>i#uT`I%WeZNj5,?pkC#R)NL!L_/Tg<HQ,n<J
%25l&GJt^c=r8[#Z789boppm$`[I,qR@r,]:6po6_n#R@,WVnGK#gN*LEuHfA8Vc2*c:ds.Jt$7i#>li7m[ef6H^F_'GFRFq!j[Vn
%^*W'o6ph!*mR<3M?"]-,&FU$[6o-gm/sXA/SL[\smlms_R%QlV6Y;hkBADC)/1u[X7P]KM[!*?:QF[4CGee%BD!gNn=scM^VX/:>
%_\Va1Z><<6hdapc=$H0HQ(4>"mcC?I1j_VB5A_kV#HjKMiZO;%q4b4C\YP&l\:uD[!+2FSUqE6"a^*d6P3N_u3U#s-=qt-f.kj2k
%_Q.YcYCS_Tb@%G=W%`F/W6,:YcM@5^?&t\4Bl*80VHo3g%uGJU$U`C_WnBNK2?]tn36,5mGbQ"m#@"]/3-Z?II!)Z;5#lef<$]U4
%iuT["OscTaR?4CN-ju@&1HhZ1q?k:trN!rr@MD"qB+SrP4OM5U7]1ZXU"L6(,FYKOKe*GId'Z8e-!kXTXX3\Cgo`UUgf(q+Bf%$5
%?$cd2LOPQj#r>L(F6)F*L,\\>V$_mP@G[V<K`I7HFFMgn=\XbchkX4O,6/QQH/mCA/qpgb3(p&GF&FMYcNs<MJ;[moOfaG8'OgSj
%XBKbu'%E.ZVWZEd)B/#=Ma72u2ZE`-46qE@5&U.f`LVECB7<T3:tMO'lZZS%PMto/HEg:/P't.E(i%&e=g1f5]/=FX-.gC?OG4VT
%dr+K4JolG%$VO>+#mNC@&d`)\3_;GN?-I#N92GKn!'>X-M:o[DAQM8h9-*kHds1gcLpL->ELk)Q5'7#i><<i^5c__gh\U`K##f@a
%?btR.:TFPfgq9IoDm3\6@q[JV>=i/]Lt=N,r<dg$EhT&X/)lh4^KRt[-2?gUll"*o/O-(iJm$21-&,:m/DNEA*BtkZSZ8h[s$YOK
%BRW^2me=-d=6WZ7Fl..7mp+P;PT(00T+3kN<9RN!^SAS-EoBGIQZ\1q<NtFQEEVMf/JRLOk6.fI78uTu>V,0CCTM=..[e;%@mI*^
%n$Sejh"suTL(L[S5i!oEp8rC6QerrciIpPPc:ShcLTJf-$PdZKMLUW+Hcu0-]^9hEa0,E%]-#T),2i[5WCjmG"RE4qf%M)Ef<c0G
%WMjXEl")#jSnkA_E'Yl6FJ5N+"lYLq,74S#A`\R1P]&u::$EG55-1%UfD"pehiLIGZqB?J$WT8I(eQC?$M1gOR%u:Y5P3\_EJU(S
%4f2(Tng`oi[61Qeg>u.[UkThjBL;Ofk'$0-q\poJLC%a;VL[`PQS.:jX_d_5(1Yke?+[lC!i#5%dU&DS[[p,J)$J(+2hQ?4Aki0X
%I-oY(<4,^GZ@+Kqf2*p"js=?/^oA6r+LJcF<6UdiIZ=*L?s]3AGX(eqqbRQ.2;+PB5:RSQW03VJBW(g60m9'Ui2kXF21:"'X*=<D
%\=-"iHdoNkCBf?uHdJRCId#?c\*pl<22]9<q4@#GjsEN>Y.Ds$=O#51,sH8!*$Ck<rpA4*G;LEp8[,aHKM:<eDWK'4+00iroX-gH
%@FjeT$!?(d*5+?PH(XQX\pq(%O&K-QO+AN1lBHRVhRHP4=,CW:X/&7#m)R5\SkjFa[H9n]pLtE)5agar<G6mE@%D'MC3>801-*bD
%F*7GTc[F@\IJ#ae(Q\>eVtkfkFD)*Jhn&e?LCX?>dOU;8of1X)VV(@B##M1SWR<iGoH&fXQ)!7-3HnB^5#I6>RPO0EI,$=Y-(3&2
%oCV0&Ji2s:9$^,'rOVs##qDJS17e),f$$@9oZ&6abp`AlKd\nu>8li&>0qkgatSUKXNS:PKt(k?b;;BL/khI">@e_dB2iqbRSDAi
%=7B%'PIG="j!fIrnXh^ooP.cG]pLNGl17Ug*mQM'fuF_a!c9AJ;qCAb,4nq2,=q=e_tHFWe<irf1-s=ZE!9[\gT$G%WNWGN3lfPH
%pNt^8BIf(-UTBLjfT\+H\\,gWW`sRB)Lsr\PE,L'RRU:+!stQoGU`-QDiE7qAI%];FJ#TBP*"3F&7&<$^3t?WMWF,-B+$6bnm?6V
%SR'5=6KC>9$pN:@9as$ne+`=!FpDOSrk79sf%0f$boYQh!/6KeMV]?W5GJ4"4mNI?kjZK2UPn&u$4:]N5J./"GM\Z6FJ=$h4e<]t
%.A6=_\RE>HA!e,I+.S?s1"%0=R:XI/Sp#7;q=r%t8m%'IGIe(CISEC:JIl^F0L7eB?!SG3bbO$]>Q6\DTlsbHJjM%nk?*CiWk/Z,
%i6mr[QaIqFGP0O#-Bq.u3\nZ:/LB=`?JM1XRmBCL*O\T@KfoqQUTr>.1"8itLuIqAJWK`:*l[5YM3(t(k73)7-O+OpogZ_EBIc`2
%ID_Yproe?mkN1q*#R#2)d/&n4VDZ(pQOo#34K(!+-7p/!oabpp"C*V]`XB*2"nDNFr]qgS,#BID0V+Pd"or^"]&kDiH!W;"JE?mR
%bnN.>JU%nO!42o[E50*.O]6Q-&g'>Lg:&#Y0TE5d'n[R=MP(KNY]cD@d;%Es<$@G4W0nRlE9PaYbkjSGGPUq\:2<-k'HuUAZkb6Y
%1.MXsU:IT\dgT[fSr]H4i=5iha7r<n<$;(-5DI7iX]k2nP3k('ljn/g_1BS2DDa7eSX1%^k+PdN#Ma^1$-!8P?6o2]A3T:pU?]].
%,M0(+-aJW5LK$7W%FXD<][>X7=9<o4<Kh<BF0*h?PLSGP1AWm$Ibl;DL<`l,^NK9XN68#-aV/utOZ6$qf._S!X]MAam)&K'Z</Vf
%s7'4J]%p5%8=nX>Uup.fOb0\Mm\IUcXO(7Z^<7H>(KE0>[.059[;oifL/_2V)m;Q94lrQk/F>.sl.%lU!^G4Kij6FZs,5h^aX,$6
%otq?To5@X]+W-c+:4/3Yh\\U#]UU3+atD(Q+LZ1%d-d[NL\P^qNh,u%+Ma`tRQ)e7&:`4/5k$6aaYFpm]ggW1<o`I9G'ngK4TV99
%mA@)[#3dP-cp*KJK=HfVT68\;*sb*Lg>(OPRX4fhU8)H;Spt.tUhNtlGF*_ACXK4-W(]^o'9o^Q`odUNpg-POCL\.E74VQ2!B)h:
%Sp6Rs:q'J3/i?e@-aS^!mcMPJ!366U]4W%"Pb<:Z7I8dZn:K6(\<L(Wf;@P<1k@0^c%JOZXb-L:-nq)%r&U/`,$O:r+h'NgBOf(Y
%=(-SSNp;&+iiadEHDD;/1nFi:l>SS_E2:Z84Z?9>:/p!`@;M:8a#Ys"Zt"n:&@7HuhSO*$'UJU"VA"1cPO%jLJ_:a`];Z@g2V*hc
%Jf[EVRa76\&lc\td104@4.0JQ^PqoIDe.IE_YSVmIB=YAOu3O*>Fp:g([QU3n%=Y3I##>Z7D7Zi^I&#XN@qb'_.KaOgS3;SP7oLI
%d/I9Nclj_sD0rKC1JItOlh^bLiWbN19,`&OV.K#VT_Z</2_;HoLn,1)&&1lA7uB@M2pBsQ$M\`:Em7[YHMS&o8m,)"g%]5RPD#?s
%#[_OfC?N>$PCC7a='oko"f-iG,E>>-U'_$G)sW/lL5Q0"DLk6A7^f0*f?$iH]db@-2JC9F>Y`l;@:Qapn<Z7L$\a?#ilX)"I0#Ls
%n(O>4<[l;NEV`6%CH#T<Y!b;*nTWk/S#CH"Ps&!79&c5nJ6A*H^-?aO?3C8,1YC5U8#l;@:)3SQl&9#Rdc5F((+n$Q;\-:>,34ho
%<RQY1m74kh%O@YDk@u($5:#F,r"k4kn8i8:i1DS*Pb6)os6K^Js8ILPY:/lN"7>3Js7u9$(^U&Lgqr4R/-B0)PR?c@P4m'`Nk!g>
%:]Kaq$bbAI\m*_K%5iYa(t%RE=i>JP&6`!daqm!eREL8V0]^%7X1"1_R?6u)>2*e08;K%h5cZ5X>sSAuN.PeS@ZDt>Ko]9&&a_oZ
%9,/r+SE67P'-$;20W.g\q#7fGB#!T/._q7K6WnecK)uj2ZLYQQermq,-1;+Cp;7;\g2OWi,rZ@R0r(M'$"?m`kHt$;c]H\S2N$(H
%>_LbtqLiZ[8hiFU5pXT-YOs8*]tSTicikZ=U^,dB^^.YL^*Xp&T:kDci+&OLVk6+F(lgJ5\p6Hf\Pm"F$i55C`$q&$f7[@6&-u!8
%r\0+:A;`lt-;4l56ft;uUD7T4<(@t9K)WnUlcZS;M''ZPGXi%ni2P^_7H^ajD.n]=A_f=6)R2ge8ZP5a&jHs4=A5/Ws79Fl@34]4
%&urAHUES/@[5?A?qH7a;J=]oag<`&O6S8uI#2tmGA2>I"hqMUP0hVf>D#NDB+P4@48:RL9$HmEk2shF=9IIMj1mPsV4s9u[aI+*j
%@>f%Wa0K`]BPAXqhp;Dqg/u/$oIJ/WW2?iNcf+p_h+q>8>19T0E<Q["rjtl)d4%CS%CP"_dYj%l]_c=nI"$1ncpeY82rU.CBDnak
%S*.LnT;fO@o@IZZInl[2fHFs!<HM`N.RQlX(Vq4N:,]9VMN;Qh*BU!O<3M_lCf@T5r;eXj99m<,JT2au8#`eWlfmRK2>7#kDnb=/
%qOk7/]`a(_WkY%$[kL8[4f!['R4;j=If2=sO6Q)ErBM;LZt7Kk8,/mWMFDIQm>jAVjh@AArZ!LN\agb>e"XN?ZC#6Pm@XC;p3uoc
%4-.nTGbPO$KjOTrR2Wpb4NFfW+%Ol-HF0LIJ5jhm43K;.`E@I_?))<,XQ*n-Ru9o1de95]BDL?6;(VS#(IjUTn%ZId-'<G\BD@&O
%bIZPamo)R:q[7IL>+oncs8@qoXk9rOQeIBrRq[@r"/;l(lX/Nrm59oVB2i'O@+t>ZUn^M2oC),]"l0+O^IF#[5N6lg6:CHqI@!=K
%.PGpr^.2.5n,;uF\1^K2s/YVS6F52^.]Z]*r>sjp6m<ET$)W0T<Dauh@f&BnLB$VZ/qm%9X<p-2Bmh7P6I+3@g6NTEoF*8-4&h6*
%T=hs`2H.*78Iebl35DTd8?7Rc+=gW<.d9FijTh3WbQ;8S?<:/n;c"/%Oh*Z4X]@5W#<LqD#)Ri&okY-K=B*LG`KWZ9C1npnq):@E
%=tjl9VP53NDteXcCoFc^Mu#/$L7j'On1*U7mg]Bl2%pp$2Rl]5HYZtl3BQE;:fMrD`aA^[lRHbYih_INL9OFf)["oNFk]pa:oOsL
%bpPN$g+qN/=A9&>>E^FcSEQnCU1=d.5gtf1+GM_NB%Xq/lNj;8]=3l\Tk[[DHPjSXH4.sg$5G$o*So^8]fqC+)D7<c;b@4%JND*?
%?\2T_g($P4.Zu`u,2KU%1"F,r;b`"]GV!1>IrqSL<Oq."VCqK$=Kk\J89I=4[A"qV?b3hX=;5(oQ1GCM])Z+.&ClAf6Kl)&H3U,\
%diu;&(tPtf_j=,q0=lE?%3B=$c;FD?D5.b[[>=E3^c,&i=F!M++4mh=$P'&ZaRJn:aImRL:Yf<jkfIG):YHXZUo;"cOsS8%1E#8g
%IS`&%)mLc+$Rd51YVimWq/g!)Ru6=@6J.pUHO-#2'Mca/52hu+KB&H&4T"tT(ff*O2<4_$ga\J1<(]B9X3&m:MfU,.rTDr4nS`Do
%Fg[l!#l;m07SVD1rXI>qde$!>Bo%4@0q;>!%;\=aJoY\]1Da\\$?d9$aeHh"=c&GNO(;+E63^b@BDqg*RaefJUrm!F<ApOlf=tL(
%J%ECEqtI/34m2a@J%lSFdt2tB3*'FC>(nOGgSC2`.KtN+!uc;4W);$6cajgO;\.Y!f:)tl5c@hWY2DJJmaBXVroW1^WGs\>`c;s/
%csI^=+i90(!%lerkVnHWYWlt&aZC7p=VmA%Ar/l%1Oh.+Z@WXO<KdEIOLM%i91FgrXbUp;P)8climWq&6LLCY4U<HbH;]`7?K-6>
%M=dCeGWIUb.S!s,bDOfn!OQeOe.j@_bP4hF(dAE$,]0JI)0+A`_@b/ljeo(b<PNVb'2!^V&XEDWMK0]jQ/\24QUfuNF*d>9D/L./
%<CU%3G`dJ`C)NH=D"Bd5*dq*db0)H?RR1#&k&kEfgNen[ek."\r/P!"F2:uge+;.OSl\^+9aW=!K3J$ZmCmMPmVJqR*A>G;Q*kbq
%:jt@5^+L[U;.r^&<tV[/[^K$B)5t%-CcVWQ;6]Z6Ug-#%EtrQN)sKLeF`\o*4!6U,XsPkgI=6B<7[BKI^:&qYi]!K:(Y0W!^\bV\
%J$V1s$]!6u.hKmO,DM(gCK=),\%/3d\FS@2PQ?&+^m>6nEc2M_KX=icBWJJqcsH7Qqq2SMr0l0>9gJFGKpNf,ct'h<#3c8g)(M>X
%).cp^'j%<6n%T]ne.CH%]BOq%JU(VRp0?1f2Y02Ich)G>Re?RpNB1ZfaM`%3)RcsNk4<6G0hZ2][(`$?`PG8/4jIhW[6W"<JY5\b
%]iMjB-1if%Y:ZH&>N7`SiekH+&t.m-S810Am?NFVdla&dV^tj!AI!<jX'jYbDqdtdDQCOJKtG\R]H2/Q\V*-3q"h[@nPWM&pCLM2
%2>94dNe+-:e_J:uqqF9?!X)OXnKJ@O\Wd+#=o,Z(&>DqaamW.![0N9r[J2>8WjQm22(<XQXtZfm\9Xe2G)d2\?=8u+`WWH*B$Ii2
%B=kipNTu`cl_6_nor"#AYI4"k!0%cKS0g)fh)s]iZu"qN?<SZGL("X]eR^Z7M;F)@KVkp#%nf'&KT4CW(2CSBaMrB7pfSN['s2?'
%;V56c$_iO9'&16IXqFtEXJ+9AA7"(:0KnCFe"`lS;F4&RN&N5s`[N@XCrjiM0_d0DCVqTR\Ac&^=nUcSH0YkCnb[GRf)c8l>>.p.
%3bC"1:s&oWN^&^]U8j/^fVHGjW%E9jb3HRKU4<,\REm[Z"Ns2_\q86[P`r5@[O4tA!b81GTM*hB>h6,LTomd$k:+dC";V;Uo]A=E
%pT$VQ\"Y5rd";Hl@s+LT.3dtf#1r02%d]*7WZ:`TMdQgQlJD*r?]5V8-:RQ24Vl(:/]cHAh8"o+`7cb*Ms15]Kk)TM'a5_;c20"j
%$9LHG];G7beI0pm;CM^r5(/6$7U<#gI-`sPCd0Ha=0=E]]+l.];r0m@#n]RG8nk^,6jQM/)QNhGd1V%rk.jqbYh=2_5+rSf@QXPO
%Ik-%Tg*!#_p7IB&-_n0>bWd/.O;/:Zou[S>S@gec)P+4l]Puem8o12K:I)V`N_lCV.Q+[1,eDS5aB5#*nj9.KUfaH@!7EtE`"Q/A
%CiG1@=q;M3;A&$?kG--Q"<JIErq!&gWmuC;4(Um;%jW697SY54Yn>24N`&Q=c#P)UGNQuAii#JVXbc.kph9,KWX:SU+([ZL*'C+(
%ealOjX"^T*e_N6]2UdcoF2"DcbgZ]9>f,%;YI0T<Z[oY&c)G;d\3-`0@TLY35$'`Wq:N+s[B]q#0WC5Erml()hg5+42-+t0Ie=2&
%?j;%'lIRumn-HMPL/A5]D^,/M>.Q%E**t-ca-F)*BBm7HSkCFi(d0D76t22PMNZM6`7^+pYC:9+o297.m2)e1'ep#,+jWeuFQCM]
%+/k'!B0+6J<4Uk\,.Di,&t0m_H$i[fIs#C-+$"cX2/,Wf!'0'_pUaf&J#rB.i*"M-^2(Yd&:nPolrDq8hiT4K;I#^e-!SnA<Nd;6
%EZ@-&@9_.Ui";cIVh9-E([>/F;h"jYmDK.>?.#`I!;\C7N:?Nfaq^^qSH>bJ*e5ji\Ea(U&(^G<#aRu1Om+nHK`!'H-gKp(3/B/l
%*\-rAPJu4$&#Qr$H4D\KMG7&4FZgfq4cY8EAHM-pV\SjX)0tugdJX[u]+t?b"c'L(^%K@F_bHVg!00gP?TH8L(e$s3Em`H],c^;*
%YWU9d-H!tBO_1X>^rLqDo?%YQniP99!\7>o68._uo43]=E1,WB"BXrkf9us^LAJn?N@.ii$'ssPSJ#9ZBgCjfhHY@0\nY#gMD#h6
%?!E;3oj_DE=(Dj;T\(C?jJkiHl(>RhnCe+D.R."@rM/(6bR?8LMRK'LLjWVL6MS^aI4iubj#ir4OYN,$IH4c&_Q&>j5"78TRqL5[
%Y$No9.ShR]c/Mi+!qaJ%6d$FZ`dYsjYO0SpY&3>5T\SNk#;-$/><BXlKoN*.I$3OrP.k!sFT$#&o?munj4Q<?q6#rTD`L"[8CF>a
%7@]:S)o5%$@kU"*8#dZIm7A<gcmKj6UR&Et-M]qJ]o02V-il4(i\UG<PEN`0^lD(so"1Qh'LG=hh9MFB#>`*7]pkJHgOT,oW&=;?
%)pO_Pfoo[5'_R;6m^$e.[JiV!i>b0SV?M_[6<("safIQ#[ZS;$aOXBU"\%Tm5$3f"*+g]^I.0Jb+k%.d>"`?jdjc$eosBo70.\W=
%Ad%W(UWZUn+GdZfpo.,!X@b"3WoLM[OP:ksn$c$7;5cb>]HqP9p&.nW/,dKA&:/t!ZLHmB_+>#>\5%VejV^!s1KpT6&#u;!L]\\=
%0;Ihh"EhSEV;$&(2H8bNO['gH6R[#pO*/sS`CJlL<(TFalpRI-jb)AYA:c6qb;:S<fPtiS8Rf9@A8>kp@9#qrX#5H"U13Ng=i\2<
%=ngN/cStY>F$Ao(.8,V"o4PK%kPG@uDTe$R!p]>!Jof(Qh4rN1@)W-;]5:8GhV!Z7T1))R;gMRAMm0"uZtmti3a]!aAXdk>MOV+V
%c'A$NWs35u<#dihC?Hp]@?rrmCXm-=-]Sa3(]A=;lLii&4"=T3WOdIt^aA"RX7d=\b,MEFhKF9V="+&@"QSpq@UeD)(mSB&5'X0.
%2I+S<Wk!QZ.T#uJ0T1r2R19@:K.]g+Nn85m"k/Z5V=cT[m3U2cD;LY7-@l-Y%kbopd`>=heA&LTD3Lt?qjWZ:i]i5LZs6]<].28J
%ms!-MB@F9,%MedcDbdeN*?=VM.f/:n%&?+HWBNHtrT1O;R!>1dNE+i-dud/gc^kf@`s^XD=?=jW^$tf!+OcY4]+nC!1W=:2ooE+m
%S=ltC'%L_ZN,)i6c4pdh3&c(+pPu`DYL=+e2\N:kf\G>N/8iQUpH7FIr]VH2lP\e^Zi?%q(7^]-j+<0)GUCA0Kps'mj$%*TEV8bW
%Rm[6=gUtD+N4%QH&_Tnucdts7a@?(4a9bJC=Z1i%;cVt,Mkft>jXeGSs6rO$^UMX6k58tT[UHc;m@.^o6.I^Ih`\]%K!Y#sr>:?d
%b?pk=dCBg(T)lFlY1Iq:;e,fbKjn:)*P*41b4/$2?s;QCH$CEg0B8Tu:=H<51=/MA]Jl9=Ue<+5``l*+VKkUDLk%lnp\V,,U)-f(
%2Vg]_N8r1(Ytut,2ltQ,K*Z^fDa`^.@<#Jg=>=)C?VX3?7r9hAGjd'L>4kW/_kNY>1*o'd-s57$TQ$2Bf@sMV\:m1m\DPOoAjBgZ
%Orjaf/.i'Q97@iOr>SVCB51IX,X=Y3L?BbAne[G4h]g@G!/(c(Kja7kn(bU8/l6>-]t3-E.1Ytp<CZaSeEPaE/sC@D.[VF.\tYnb
%Ni34TNr,WE<JcO8S$<.M@hJR.Hq10dC%jjIhS7_lPtn;8T`/X\%Y^Fc%cJK&[L/B'<WdY0^qSgf)q/(,pU7#:^uBnam8O^n&YorC
%Y5eX&7](-N2:m!tp[N7PH2pXXf'9903ZF;FLHAtqK#N5R^&M!&I-TMaV[&(clT%q?]16AqGNTUW@hS@%^f?Yf:tY%Ur456s2Wr+K
%r@.&5Z(,1RF<@'T,B$aKS<]_-L?\104dGMD<Eh^,R_9C4mP""shg>F(qi1P7bl08OJGoMIAGHa>@bML7n2YL#C$Y\7CSs6$*(c#M
%*AZeh9AA9KpF9QLdK:4I<.WaH,6pV1"fcq1YQn8-Na;0M&j+:I?H"BL*BY*(i'OFNGgHKdb1+=1"@-CJItLqp>&)K<#'S4R1hQ[X
%"Hq;16s2D/"XrqXMo'QLD_=DkL0@<BKLZWW>]m)Ek#L)r!$*GG.''W^j4dDJ3s]M;.XERsQM.[*7;VlEOAeFT8t5$D2Wc\>%B5Kj
%SHPA#bT.)a7"D>.qF^Z'Fj+XBY?'\nQr"4lj\EoMf8a9iTD[X<QV=qUE9USb)g"`TJZ@2Oc*_><EL!hk36s8j]?5eI-U?[,PhHIS
%1geYm1&>i<hr+U_fq:>LX^+*$!gjeghT.#OPLTcum-<W33HPTe\"J^C]Uj`#&:&Z<=]*eNmT>rJ[Q>.[@.5%Odpc98nI+gQo<!kC
%k6d[P.Q:e(M!re>C8O<Y/ca3QQ'#jI?@XMs6nhA_1rma)e1>K[^/c6kZ'sAd.tA.7omYHJ1&`8/8mCE]Ls"?1(!-f<L975c5M.,"
%nfJk/0/$_EYc9/`J;cOZ;9XW$MaIb6=FYBm^5`\\0E-mMf@Kp!&huq/&jh?TdsW0@%JZO0GdWrN1=I=`6%qLH&Rq`uk&Vc2jX/@q
%2(I[B/gIW)%82dd*Q.UU>.[+CkHc$BT`H:<"a?<6='uVR9r>es1pZTsJM_Vpk/BCbN^9;&2K+5N6:3'Y#N*60?pu\Jn,pC.@>2ib
%oE=DkZJ@?=Me;@tSfBbRn@:sE<6dmp_f',G]>=HO0B06k41[Rro:0"67HHIc,!:IEjY,jj*iTo`4l5DYEf9s,C\P-a^JlDq1fm?^
%61H^*Mn`F6VYK[fdE.WiiYM43q;NuBBR_sP;g67sg_s'E=N*ebTnus`]re(&2a<_@o=ZW0lM30ukHEZi[hGW>ITJBG1U"8+bH*Vg
%a#.sNUfnc$dVO/X6<kSFa@o`DY>O7\6!M7ur8"6IkXd+Wi-;ego5X.+P!c:CWY6_\.l>bWTV@PN9F"WE+RFQ8D`lC\YQ^Lr.P0>7
%s4aI_X%79:pZ`XRFZYup<2m*Z@]EY5JIebP2L$#W,">_L_TG1QqXi;,X.jY.B_-n0j@J@LFmM#9_=3R$hZ-BNY?ed=iIc[&l[)SP
%Z*X"7"j,!,FSblti>S7lDg%t9d0RQ36cElBq<hh]7."*a%Jc[Kpk4j7@;;S"kDb[q<E=pcCeY8>^Z_Fm]R[,kB0E,E[)Rr<BM*)+
%cLQ4,G;,/S:U2?7e.H,Mr5"j,4qYg)o9i?43\9X93gq:Uo)`o;r+s>MQ(Au<=$Ee6;m]eQIE-k!Wp8?.C7%cd>e-"HqOG*bYj0fK
%bp3L6Gquq]JSQcJo#4dRo'8dG8#UT"W`\ef-`h0$L\5juR`Q/=at"RhB&V8-C;_6`TUV?&Bk^S".L%nl^D!&$-4#S"9We.ha-XDB
%a=gV`Xd"W7D(i[Q<(I;>[bSAPA8=uJ[`T]^b9npbPeknYeh\u2F*4Dpq;i"i6h&R>?`T>6c;]<2T393$-j68MI8]dUatR2iWHW))
%H)M"K)2[46Zh9!iVrNQ1aGh(2doW@[-0,>s6!6^[%];5l2PKoo4/5S-&tQouOCP^8:GZ\.SrG1-U(\3(NMK!>@l29#ZRin=i=gaU
%ENRs8//<i^I.0\MNO<Vk3hP,"hK%T:a!-M*A-;nr&"hnf.8IUdj+tW"aeX_1WUEW4Oi[I[dK.:^-)\_EhtZ$Y4\&6caS#Ys[-uru
%R*T^Mi:)sMLQ-VRC'E14mF83#a;BDfb@8n(-4&`qW/:k8PVO=!a%T?%W^<S+^ENIDSL`IOc.<^:qE)@?c+EO[#KQsLTF[<U3rCQF
%DY/t??slLnD.Zbni%$*s*!7^$pfq"YCN>51j83rEX_/(.WbV++4s4DgY2Wl4<[T^rUc'V8d'L\pX\+3<53ofKgR@.e];TUE+B_oi
%?I1k(N60JEC)"i,W"uTCMZ;ObM/d5H;H:G^[LaBm156U$\d6>o7SmW4bl_-D!*OejTY2sV<SrOb"038=Q$)[LB7s!$CekWEJZ&1b
%RAdcODZkLT+X,+N]-%>2[eV)@T"9CQ6ul=[J0hX+@jG8jiVG<h57Qq!1\s!uQ:XRdY#a.'5#2bMkq1qBbJVp=/3!0rTT]+.f%onT
%M[6OrS_(cDWn$u()7c1@bK1U]Ti]33'Ql+\Ds3uEY$PbBW3,Z'o]U!Dol$:D#8SP6=:6!CV'!'[5.>(!.<jWX]F(fU1>eC?h]-^b
%<hJJJZKeA*$jRFb.+T$JN&H_A)O0gJ>Ga+bFXKbdg5Iql*,\ai$s\.B_)%aH9.N@8S6MOGL+0"r3,/dY!=*S]Wc4>=JR@@e<b4JR
%/_kDgqQIJFS!_@g<3:n'gls_hJJWOoPisV!j7*DC%VSZoCSUsYa3%F,#&$3j?nq*A0f^Y([cs"kD_EmVP\aCS*LD&,p/=RULQLWY
%G`oXilDRC[qIjZ184d.&(;!E?nYY$H2XUr5hrP8eQ':eBVYamn'9&chHX+V0IF":85ccu=>5qb2LF$aq0nD@$7"Nb+=<0T!<'[XT
%"t[I`g>70+BSJ]f7Mu$sFB^C+>'8s\(5@*C,[0s@\c9"D.p9.D321bNrh26`PfYpAQF;plcsSMc5V(;S7GHad9ZsfjhtrrfZ@kgU
%/\I'eVg!&kN$hB!h*lh(jV=19,()?:0lDQVNdfGsmA)Pe33%Mn2pAj@.X*Oq[%O21EQ,:mk@O-9)[Kt_=L./ei'fp3`t\)bQp'T=
%)!A#@SH7Wme-kDX6W"HC)>:'k*b:?`^3CgIf"I@=!U5+Y6*X<Fi(FUTC:\"G^"Cm!M8+>=OGnK"g0#4%Ds!`I+Tec(2oO=eKo[NN
%6\(po`7X8H4BI@YT&,eqfcP"u513E%!A5\d:9<C;D?[-j]+](Y5'+;LWJNm$\*]Fp.W:?UZKaE*kQPk*N^L]'N95Z?^i1.UU_3d=
%NKbG#Yh%cMCS]/#:Wn5hNabc1L,==Gi&Gkj(<ELAFA@&?1L2qhX1asu#7tO)Q<UooRF3dqcKsumA0+'URX2H*cd^]Zo#$I1Fi:jh
%i]A&K98C81WZCpla?4`6<C6_13^BQ)2mTdFD7I1%b.GlEPEh]p[>f6GdP;hB)YGC3!q_/^8IRcuJoI!m>BJ1m)Y2mbG'X6dJf8N"
%LoVZD:tc_E)<ltu,Arl$X]+)/-3c/2TRDcJd?XMX'5Vl5_J]`nBMVGTYNc?T-(R$(RAP'E)?N+rg%)i%BIVd.?KbINQ-uK?(uGm>
%f2@W;VmICJ!hoPSj[rKE97C%STLu3S1aHHsAK>p&FDD+"H$#BH1I"2q"`J'0A##6$)q(iVBR'AZVc/&6i_o+Hk-m@>;5#YB1OH]a
%<<P'bc9]aEro+dZNAHtnW4uO(d;E_>8i.!,=%3a!M3P(ChbA7k?q"$ohTbpI\Uc)%!bF@C>cBQ?!ReO<f-'PY3I0o["n>]R(@VO>
%UChMrGE.O+=;o+>q#W'-dhL$!1/-(J:?i96iP*loNR0Nd6<dN-X_+kVd9n);%Z?-,r^Q&d#Mo_.L**X1jtI@)s$H4PW"/TfFn?^T
%U+*/L;VI0`$n&:nk,"LZRl:JO,q+L8Ok:iY+I\rZF;B^i_`fG/W4BLgg,\E+*K^T#>[?TV@cjXXTF_VqHtgIK8EUs&;)8HnYZ#i4
%WN#D0RKS;T9!jED>6]nNLcG4dEG?fEZ^4"2N?J(+B;MPodS#C`k0-Eu4;)rLGT*J=#q.,mU,YdZBIFF066$kd@XL1^09UM5gr`lE
%)Pn?"D^%e2'r?QiK=&,HA!][f6i']\R]*qd[)E"Ik6ZR!`"eGLQI0`Z.h)L<m_3-nr:$Khn`;`<7)6k*bEX]X(79d2Mt:$iFG^15
%a_P!80c"Yg(N!b&h[mk[?M@?fs-7^rpLWdG#,7X8%-,t:2f\BgU3[W*^5_9ud5XqG=bHlNdV.;Z_j"/&L_"3Bp&_!Vn6R4]SNJ,%
%Xp0F:QeW5SknFUpC1\9HCRRIe"+SgCXt\iBU2A5/F3fV0-3<-$`OoSp-2l1eKY>m>\YWAf^sY@1DV1CQ@d@1,!0n!X&j"KQY"o^$
%2r;`\<1&H0bC9XZMfAh$Wrk#ZU*aGq[:(sA?@Ie`maeh[L,n57d`IT\&eUY=%0l4Xl\99bN]$JV6T?;q5[N!d.2RRcdKoDb8Y^j&
%=UV#ROYqiK2(B?;;:1#0-qUTs?X?p?kf(ZZKD'"gO$jV4c>0T*iX$$PWp6tG!V;b2944J-?'ZEs4hM@%'-t_uBXOJ.4D%&`*0Q+G
%D_G(U6"3fYY'Wcq!UY\,-JLHsV[XEVJ=?ndG_)j79_l0_LKiM!b"G/Fi>5[FRD)pdk8Kl2Y>qN'ao`de$g0@E&I2#j5`0.X6LjOh
%'l&:7-rYe>TJi^dAstMXV&6sWY9a_-GuN,$6n;NOOCK),LA!,$WpJ#qF>0'<4@,P_VLCPZ3OrI:`X(&ZOTFKo.AlpudfJKZ+_#fn
%at3"<''X"OZ.OR9$#+f8@[^?D5]p,+roq@CGX.n&#k]+IqkQ,?LA6^Q#,rq;'utc5>F":^$.tKig@3fsaO`7!Qhs+U[/_YFIUKP\
%'La^[S@f/EWI0PT3&u*K8rfToG0=sG=\,^"WS-^(g+9J-F/;i'eZ#_h:Z9*[VRjVLTP,f&$[NN-;j>jt(AXf<qf0DT<kER"!4<[_
%N@R^>!/3V:K,MtrCf!A`FJ<)+_*Jf\,KK?I7RuI<DN>0&9T'_sHDBV.Mhd\K:h_6o$3d*`_5CIo^,YihRZ\lu+qm[,]o8pfA?n+t
%5A7a$QY;6h1nl!pPu?$1&'[`CihBc98m5LTjTLqeWCjBW<7ah!$UdY!0%S1?f'$i2`G>[hLG8\/K];l0FSum;R(bh.`5msnYcqE\
%.PJ(&d2iij+c[IGSciN"`V$#C8nU=59=)@,B^')cOoGMOZladKL3,UbQ8.q<*.L(--E_G%kE-93<2DuDiN[h[W[lc),5/`ghQA(t
%3'qdT[@:7=RW]:`]%a-IldKRRPS/jD#8U<iBZ$<.487rqIPjZ!1GM^VK2E>+V0hgaWf#H!6m$De4+,h`o_;Oi9TaSM.GSs,=Tlo<
%)0Y?5XVQt$U*ru(U4q\'$n.bML^13RW\<u!.acSZ$-*q-&1ot0'j-\2b&-gcbZ$J,AcdElB+@Tma_gb^+2MCa+jmuOkC`[j.Zg*o
%8`U8ZNl7?Fm2UTBmV5-bD`=Eu*hKZG66rF>dZ3,p';IZX#DU&\U5T)@@42HdA]\?(6HXcr%;6]l]rrCf]YRW$_&.IKUm]Ic#9Rdu
%q+Aih6YPP]PnAudX\6X%@'<TM:,\`\I*+A<'WZ-\Y=TE6PcEX-lY')/n25ZB7AJ4$T5tu%'bI3j0JY#O[Xcjm%):GDiNu[?dj*?R
%1P\N"9Repo.#($*;lNi/Q^[^^-djH9<;Yc4VN`mB#\KG1nfuHTp%*V'CLC$3J7;>Jr)SV$S+B/E4b<'C_/l3$(NJ4V'*g"JE%$u?
%7tq8iQ!mW*B,bI]IWkOIlgtUg5eR(fgL?,4nJ1>ultNe\j@+%UcQDWUqtJW&Z?(@;FnELR8idj3lC\>A.lg*i>uJ(I*G\LFHJNhT
%4.*!lF)7g3Rq/I!nWU';W*7lqYA`b*br!g&7emiAmoTNR7d(Pj/,eVV5M.LZA@LDlq=3H(G4Dh(ZjR<S8"J(\*HZTQ3m8KOkV;n0
%6\`8bJ?;474>`!<MZit<W_"oM"Pa*WA#eMhX:b.8^sdlonL4,?9uJ=U?4h^RGr(9;/4=b"&==\9!c5;\;KHUrKq](<(HY/%Z4aO#
%/ASKBP@^CJNL<&fPQN$3Ekq:?`oums.0A"uOHhDL4p,f'dQTG@;_5i*aY^j=_k?'u?be#0_P\01+<k@U0HgX7@Q'AIE07#@c!)<n
%Nu`"&:,h/.-6$#8,%Kd_!Pst^*uB$%`pmJq<Wu6-Z9(Q`OuUPo%)Qa(@8UZ?8GX^62:[r]64$..;rEW89c$:i(c+n(a"&p(;`c*m
%9dGX0BHkSl4[BH]BH>I+&Ac9m;bnV/%?P7Bma[JrmAqk5X1VQgK:-$;OY!-IE/%Nhe'+chYZA6]?A*\OVa()2;uqm$,0<2SpeX_L
%1g,6<d:C@K,BYR>GnMOi:S<^laVHuWFjdTsf%KB'm,$5?Kt>1rW9@glg'>Xis(EMu'uAAk'fiA[.i!QFMhCH\A'HH0_/WU)/:$UQ
%XFaET:Q-LZ;/?I%'!9-f"`7:g<6TGS^hog"Lb<\?\mg"s4%*HXe0eIHYX!*7]d+JUV5bc8_eS7`@e)_\gqElG49&19[k=[d:6HYJ
%Hd6Y*mTg4H/YX`FCPm1QhP"s:\A9nQ#VK)W_[EZaj!J/:<>CPVcFs<U9hdF1c[)r7cRK_'C8C0[ej>`X,)ah68dd>[&2d4RTa6bt
%4"TGlU&K)l.Z5op)<<\38<F21@qdZj"qHVBn)1Tb%UkJZ1Cll%6gCE+LZV^nF:^kLbss>%[P![j#;_6(U7RqQf'jTb%Cqu=Y#=UD
%2V0%cdt7k>a2c*9%ZA2F6)!AAJ$th.0iCGB,CZ>Jagc`d1]0*W-b)s%2F-2/QB!tN;;oBE%"RZ.iW?0FXj&ij#M3`Xg^IC8%MEr/
%+\Mma1`-[@91-9EN@]BZ8Edb=p/X=lO2[(/#lj"HIITVO`qa]R42g;=`+Hpeq7sjT9/jSiiAUcUhoBf;[8lZ'(fuOI8`a#TEGcZ_
%F]f;VHl\%..b5.?FpaYg.?$3G)S9Tb21"PXEh&J64!-/<<(Efc1ZA,Qm_D)d&Dk?5*_*u6q:GO@O&0OFe%2OZ$(OM)o/`T;5BMY>
%OX&^RI_GecSLGmGkh)A7hcs.Uo7:od9"VCskgeG6;(cAG[;nRRc$>OVn&k*Wl%gJk0DF7"l/;2=+D8Hb,?1IlD&\EcM1G)qfs';t
%KD*9maY?qt3U%IL?5:o61@d[WY>G\uY+`p\/KuUK8]<IC5_P=F\Xpd%,B@%mH`C2CY(fbOHKk1M$N)`GNe(la761l.I,omf%W$-m
%#&<H,25T^d]noN:C+<Z.\HqF6j`kQA9T:7kl(fZ*,JbL!=3KGeK*E\&JrjmRfeMB@%"7R9kl;bJA-gbHq5^!i-?l$2h[\5q^]g1<
%3/ZTK!,c#D!QZACcq%5\ChZj::EqHK+6jjHJsCc/p%YcG91BiSGNZ7u81fWuHIkgrP(bYKHd29iE0jQ5k>2cX-F=#7BgT"2T&_/p
%s68.%\1;fkD*<a*5bAjt8/RtrdVDe_g&9Sl8>5=ck&DQ/&5pr18^29]%m#i8$]SgM9$)4OAC#@`3g@^c$".>b[5F$QN!;7[P`Am$
%4SE(T?q(TbffjJJBQl\dSl1pU[UEf`HpJo(rE.L?pV9A#!JTs'i\dD8BXQ'(Q^(0ShbYHH\Ja"%&r8sh#A>a7T&Y0,&IT<(,ARp=
%B$q/&O5h!/[OP<f?6gFe$\Leh;RGVGX<?rB*=in7(8.W9BS,ukBd&p9[Bt0fgaZ]5KbMW<E=PBLV'6bT-bsEfRS&6`rNn1=rV&YQ
%(#74%nA0\]FU:HWD/[j*S1JL/@GWLB&I7Z-!q/s.`BFA[f<iXJk2rN!'Zn*<K2GQpARSrPC;0Ya,:rimTBG+Hr9i=Kms]Z`pr+$[
%_4/3RHiO#QO73)DYNLt=J+iksGFtJ!hL5,=!p\ru5CRp)s7,o?s*Xk:q<<ZaI/dPEE7-o.c'pBdnu'euq]A6Kh-9~>
%AI9_PrivateDataEnd
